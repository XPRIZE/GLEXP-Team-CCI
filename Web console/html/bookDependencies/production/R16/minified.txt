<html>
	<!-- version 14.002 -->
	<head>
		<script src=MainXML.js></script>
		<style>#sprite {
    position:fixed;
    left:0;
    top:0;
    height:100px;
    width:100px;
}
.bgCenter {
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: 100% 100%;
    background-repeat:no-repeat;
}
@font-face {
    font-family: 'caf';
    font-style:normal;
    font-weight:large;
    font-size: x-large;
    src: local('?'),
    url("fonts/caf.oft") format("openstyle"),
    url("fonts/caf.woff") format("woff"),
    url("fonts/caf.eot") format("embedded-opentype"),
    url("fonts/caf.ttf") format("truetype"),
    url("fonts/caf.svg#caf") format("svg");
}
@font-face {
    font-family: 'vag';
    font-style:normal;
    font-weight:normal;
    font-size: large;
    src: local('?'),
    url("fonts/vag.oft") format("openstyle"),
    url("fonts/vag.woff") format("woff"),
    url("fonts/vag.eot") format("embedded-opentype"),
    url("fonts/vag.ttf") format("truetype"),
    url("fonts/vag.svg#vag") format("svg");
}
.noSelect {
    user-select: none;
    -o-user-select:none;
    -moz-user-select: none;
    -khtml-user-select: none;
    -webkit-user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
}
body {
    color: #FFFFFF;
    margin:0;
}
#backgroundImg {
    /*background-image:url("presets/blueMetal.jpg");*/
    background-image:url("presets/cloud-snapshot.jpg");
    background-size:100% 100%;
    height:100%;
    width:100%;
}
#background {
    position:fixed;
    top:0;
    left:0;
    height:100%;
    width:100%;
    z-index:-1;
}
#main {
    /*background-image:url("presets/blackMetalShadow.png");*/
    background-position-x:10px;	
    position:relative;
    display:block;
    margin-left:auto;
    margin-right:auto;
}
#mainC {
    /*background-image: url(presets/blackMetal.jpg);
    background-color:#99ccff;*/
    position:relative;
}
#logoCont {
    position:absolute;
    left:0px;
}
#logo {
    background-image:url("presets/poweredbypubbly-clouds.png");
    background-size:171 38;
    height:38;
    width:171;
    margin-top:7;
    margin-bottom:10;
    margin-right:10;
}
#titleC {
    float:left;
    height:21;
    margin:10 0 7 10;
    width:0;
    overflow:hidden;
}
#titleC * {
    float:left;
    display:inline-block;
    height:21;
}
#bullet {
    width:21;
    height:21;
    margin-right:7;
    background-color:black;
}
#textC {
    font-family: "vag";
    float:left;
    width:21;
    min-width:100;
    text-overflow:ellipsis;
}
#textAct {
    letter-spacing: 2px;
    margin:0;
    position:relative;
    top:1;
}
#textAct:hover {
    cursor:default;
}
#navC {
    height:21;
    width:111;
    margin-top:10;
    /* Minimum left is 140 */
    left:140;
    position:absolute;
}
#navC div {
}
#next {
    display:inline-block;
    height:21;
    width:21;
    margin-right:7;
    background-image:url(presets/next.png);
    position:relative;
    margin-left:7;
    left:55;
}
#prev {
    display:inline-block;
    height:21;
    width:21;
    margin-right:7;
    background-image:url(presets/prev.png);
}
#goto {
    display:inline-block;
    margin-right:7px;
    position:absolute;
    z-index:10;
    width:55px;
    height:21px;
    overflow:hidden;
}
#gotoCover {
    position:absolute;
    padding:0;
    margin:0;
    border:0;
    height:100%;
    width:100%;
    text-align:center;
    color:#FFF;
    font-color:#FFF;
    font-family:"Verdana", Geneva, sans-serif;
    font-size:x-large;
    top:-3px;
}

#goto select {
    opacity:0;
    color:#5AACC5;
    font-color:#5AACC5;
    height:100%;
    width:100%;
    margin:0;
    padding:0;
    border:0;
}
#goto select * {
    color:#5AACC5;
    font-color:#5AACC5;
    font-family:"Verdana", Geneva, sans-serif;
    font-size:'x-large';
}
#isCover {
    position:relative;
    top:-31;
}
.itemP {
    position:relative;
    top:-28;
}
#coverP {
    top:-28;
}
#bookC {
    clear:left;
    height:0;
    width:0;
    overflow:hidden;
}
.center {
    position:relative;
    margin-left:auto;
    margin-right:auto;
}
.can {
    position:absolute;
    z-index:0;
}
.buf {
    position:absolute;
    z-index:0;
    width:0;
    display:none;
}
.workspace {
    position:absolute;
    z-index:1;
}
.dragCatch {
    height:100%;
    width:100%;
}
#audioDiv {
    top:0;
    left:0;
    height:0px;
    width:0px;
    float:left;
    overflow:visible;
    overflow:hidden;
}
#audioDiv audio {
    height:30;
    margin-top:12;
    width:700px;
}
.pDiv {
    position:absolute;
    overflow:hidden;
    width:0px;
}
.dupDiv {
    position:absolute;
    overflow:hidden;
}
.dup {
}
#shade {
    position:relative;
    top:0;
    left:0;
    width:100%;
    height:100%;
    background-color:RGB(20,20,20);
    opacity:1;
    overflow:hidden;
}
#spriteStart {
    text-align:center;
    font-family:caf;
    margin:0;
    /* 25% container width */
    font-size:32px;
}
#jumpBoxMouse {
    height:100%;
    width:100%;
}

/* LOADER */

#jumpBoxCent {
    margin-left:auto;
    margin-right:auto;
}
#jumpBox {
    position:relative;
}
.jumpLetter {
    position:absolute;
    opacity:0.8;
}



/* BOOK DISABLED */
#bookDisabled {
    height:100%;
    width:0;
    top:0;
    left:0;
    position:fixed;
    background-color:black;
    opacity:0;
    z-index:1000;
}

/* COLOR PALET */

#plateCont {
    visibility:hidden;
    position: fixed;
    bottom:0;
    left:0;
    width:100%;
    height:50px;
    z-index:1001;
}
#plateCont p {
    font-family:Sans-Serif;
    letter-spacing:3px;
}
#plateMin {
    width:150px;
    height:100px;
    background-color:#2E2E2E;
    border-radius:25px;
    display:block;
    margin:0 auto;
    padding:0;
}
#arrowStickCont {
    height:30px;
    width:23px;
    display:block;
    margin:auto;
    padding:10px 0px;
}
.arrowStick {
    height:30px;
    width:4px;
    background-color:RGB(0,135,0)
}
#arrowStickLeft {
    float:left;
    -webkit-transform:rotate(45deg);
}
#arrowStickRight {
    float:right;
    step:0;
    -webkit-transform:rotate(-45deg);
}
#plateMin:hover {
    cursor:hand;
}
#plateMax {
    width:450px;
    height:250px;
    background-color:#848484;
    display:block;
    margin:0 auto;
    padding:0;
    position:relative;
    top:-50px;
    border-radius:25px;
}
#squareBottomCorners {
    position:absolute;
    bottom:0;
    height:25px;
    width:100%;
    background-color:#848484;
}
.plateChoice {
    height:100px;
    width:80px;
    float:left;
    margin:5px;
    margin-top:15px;
    padding:0;
}
.plateChoice:hover{
    cursor:hand;
}
.plateChoiceIcon {
    height: 50px;
    width:50px;
    display:block;
    margin:0 auto;
}
.plateChoiceName {
    padding:0;
    margin:5px 0px;
    font-size:16px;
    height:16px;
    text-align:center;
}
.plateChoiceUnderline {
    width:40px;
    height:3px;
    margin:5px auto 0px auto;
    background-color:black;
}
#subChoices {
    position:absolute;
    top:110px;
    left:10px;
    height:130px;
    width:430px;
    border-radius:20px;
    background-color:RGBA(255,255,255,0.3);
}

.subCol {
    float:left;
    height:100%;
}
#subCol1 {
    height:120px;
    width:160px;
}


#subCol1 > #color {
    float:left;
    margin-top:5px;
    height:120px;
    width:160px;
    display:none;
}
#subCol1 > #color > .colorSquare:hover {
    cursor:hand;
}
#subCol1 > #color > .colorSquare {
    height:30px;
    width:20px;
    border:5px solid transparent;
    border-radius:10px;
    float:left;
    margin:10px 5px;
}
#subCol1 > #shape {
    height:100%;
    width:100%;
}
#subCol1 > #shape > #shapeLabel {
    text-align:center;
    font-size:24px;
    position:relative;
    top:-55px;
    width:100%;
}
#subCol1 > #shape > .shapeAct {
    height:40px;
    width:40px;
    margin:40px 20px;
    background-color:white;
    display:inline-block;
}
#subCol1 > #shape > .shapeAct:hover {
    cursor:hand;
}
#subCol1 > #shape > #circle-shape {
    background-color:green;
    border-radius:50%;
}



#subCol2 {
    width:150px;
}
#thickness, #opacity {
    height:50px;
    margin:0px 10px;
    display:inline-block
}
#thicknessSlider, #opacitySlider {
}
#thicknessLabel, #opacityLabel {
    padding:0;
    margin:0;
    font-size:16px;
    text-align:center;
}
.thicknessTable, #opacityTable {
    float:left;
    height:100%;
}
#thicknessInputLeft, #opacityInputLeft {
    width:100%;
}
#clear {
    margin:0;
    padding:0;
    height:50px;
    width:133;
}
#clearInputLeft {
    height:30;
    width:100%;
    border:none;
    background-color:RGBA(0,200,0,0.5);
    -webkit-text-fill-color:RGBA(0,0,0,1);
    font-size:12;
    font-weight:500;
}
#clearInputLeft:hover {
    cursor:hand;
}
#nukeWarning {
    height:50;
    width:50;
    position:absolute;
    z-index:2;
    border: 5px solid white;
    border-radius: 50%;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
    filter: alpha(opacity=60);
    opacity: 0;
    -webkit-box-shadow: 0 0 1px 0px rgb( 255, 255, 255);
    box-shadow: 0 0 1px 0px rgb( 255, 255, 255);

}





#subCol3 {
    background-color:white;
    width:90px;
    height:90px;
    margin:20px 15px;
}
#choiceDisplay {
    height:40px;
    width:40px;
    margin:20px;
    border-radius:50%;
    background-color:rgb(137, 103, 172);
    opacity:0.5;
}




/* login */

#loginCont {
    position:fixed;
    z-index:1001;
    height:95;
    width:75;
    top:0;
    right:0;
}
#loginIcon {
    z-index:1002;
    position:absolute;
    bottom:0;
    left:0;
    height:80;
    width:60;
    background-image:url("../presets/icons/readerLogin.png");
}
#loginIcon:hover {
    cursor:hand;
    background-image:url("../presets/icons/readerLoginHover.png");
}
#loginFieldCont {
    display:none;
    position:absolute;
    width:200;
    height:325;
    background-color:RGBA(90,90,90,1);
    border-radius:15px;
    opacity:0;
}
#loginFieldCont * {
    text-align:center;
}
#loginFieldExit {
    z-index:1002;
    position:absolute;
    bottom:0;
    left:0;
    height:25;
    width:25;
    background-image:url("../presets/icons/exit.png");
    background-size:25px;
    visibility:hidden;
}
#loginFieldExit:hover {
    cursor:hand;
    background-image:url("../presets/icons/exit-highlighted.png");
}
.loginCreateButtons {
    height:22px;
    width:70px;
    margin:5px;
}
.birthdateDropdown {
    margin:5px;
}
#userForgot {
    margin-top:0px;
}
#loginSuccessfulName {
    width:85px;
    text-align:center;
    margin:0;
    position:absolute;
    top:100;
    right:0;
}
#loginErrorMessage {
    color:rgb(94, 12, 12);
}
#dialogC {
    background-color: rgba(20,20,20,0.7);
    height: 100%;
    width: 100%;
    position: absolute;
    z-index: 100;
}
.dialogWindow {
    border-radius:8px;
}
.dialog:hover {
    cursor:normal;
}
.dialogButton:hover {
    cursor:hand;
}
.dialogTop:hover {
    cursor:hand;
}
.dialogTop {
    position:absolute;
    top:-24px;
    height:24px;
    width:100%;
    border-radius:8px;
    border-bottom-right-radius: 0px;
    border-bottom-left-radius: 0px;
    background-color:rgba(20,20,20,0.2);
}



.sideNav {
    position:absolute;
    top:0px;
    height:100%;
    width:50px;
}
#leftSideNav {
    left:-50px;
}
#rightSideNav {
    left:100%;
}
.sideNav .VCmiddle {
    position:absolute;
    top:50%;
    width:100%;
    height:50px;
}
.sideNav .VCcenter {
    position:relative;
    top:-50%;
    width:100%;
    height:100%;
    transition:0.1s;
}
#leftSideNav .VCcenter {
    background-image:url('../presets/arrowleft.png');
    background-size:50px 50px;
    background-repeat:no-repeat;
    left:0px;
}
#rightSideNav .VCcenter {
    background-image:url('../presets/arrowright.png');
    background-size:50px 50px;
    background-repeat:no-repeat;
}
#rightSideNav .VCcenteractive {
    width:120%;
    background-position:10px 0px;
}
#leftSideNav .VCcenteractive {
    width:120%;
    left:-10px;
}


/* loader */
#loadContVertCenter {
    position:absolute;
    top:50%;
    width:100%;
}
#loadCont {
    position:relative;
    top:-57px;
    height:114px;
    width:290px;
    display:block;
    margin-left:auto;
    margin-right:auto;
}
#load-water {
    position:absolute;
}
#load-seethrough {
    position:absolute;
    height:100%;
    width:100%;
    top:0;
}
#loadText {
    text-align:center;
    font-size:48px;
    padding:0;
    margin:0;
    font-family: 'vag';
    color:RGB(255,102,51);
}
.loadC {
    height:100%;
    width:100%;
}

.load-spinner {
    position:relative;
    display:block;
    margin-left:auto;
    margin-right:auto;
    -webkit-transform:rotate(0deg);
    -moz-transform:rotate(0deg);
    -o-transform:rotate(0deg);
    transform:rotate(0deg);
    -webkit-animation: spin 0.75s linear 0s infinite;
    -moz-animation: move_eye 0.75s linear 0s infinite;
    -o-animation: move_eye 0.75s linear 0s infinite;
    animation: move_eye 0.75s linear 0s infinite;
}

@-webkit-keyframes spin {
    from {
        -webkit-transform:rotate(0deg);
    } to {
        -webkit-transform:rotate(360deg);
    }
}
@-moz-keyframes spin {
    from {
        -moz-transform:rotate(0deg);
    } to {
        -moz-transform:rotate(360deg);
    }
}
@-o-keyframes spin {
    from {
        -o-transform:rotate(0deg);
    } to {
        -o-transform:rotate(360deg);
    }
}
@keyframes spin {
    from {
        transform:rotate(0deg);
    } to {
        transform:rotate(360deg);
    }
}
</style>
		<script>/*! jQuery v1.11.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k="".trim,l={},m="1.11.0",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(l.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:k&&!k.call("\ufeff\xa0")?function(a){return null==a?"":k.call(a)}:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||n.guid++,e):void 0},now:function(){return+new Date},support:l}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s="sizzle"+-new Date,t=a.document,u=0,v=0,w=eb(),x=eb(),y=eb(),z=function(a,b){return a===b&&(j=!0),0},A="undefined",B=1<<31,C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=D.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",M=L.replace("w","w#"),N="\\["+K+"*("+L+")"+K+"*(?:([*^$|!~]?=)"+K+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+M+")|)|)"+K+"*\\]",O=":("+L+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+N.replace(3,8)+")*)|.*)\\)|)",P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(O),U=new RegExp("^"+M+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L.replace("w","w*")+")"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=/'|\\/g,ab=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),bb=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{G.apply(D=H.call(t.childNodes),t.childNodes),D[t.childNodes.length].nodeType}catch(cb){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function db(a,b,d,e){var f,g,h,i,j,m,p,q,u,v;if((b?b.ownerDocument||b:t)!==l&&k(b),b=b||l,d=d||[],!a||"string"!=typeof a)return d;if(1!==(i=b.nodeType)&&9!==i)return[];if(n&&!e){if(f=Z.exec(a))if(h=f[1]){if(9===i){if(g=b.getElementById(h),!g||!g.parentNode)return d;if(g.id===h)return d.push(g),d}else if(b.ownerDocument&&(g=b.ownerDocument.getElementById(h))&&r(b,g)&&g.id===h)return d.push(g),d}else{if(f[2])return G.apply(d,b.getElementsByTagName(a)),d;if((h=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(h)),d}if(c.qsa&&(!o||!o.test(a))){if(q=p=s,u=b,v=9===i&&a,1===i&&"object"!==b.nodeName.toLowerCase()){m=ob(a),(p=b.getAttribute("id"))?q=p.replace(_,"\\$&"):b.setAttribute("id",q),q="[id='"+q+"'] ",j=m.length;while(j--)m[j]=q+pb(m[j]);u=$.test(a)&&mb(b.parentNode)||b,v=m.join(",")}if(v)try{return G.apply(d,u.querySelectorAll(v)),d}catch(w){}finally{p||b.removeAttribute("id")}}}return xb(a.replace(P,"$1"),b,d,e)}function eb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function fb(a){return a[s]=!0,a}function gb(a){var b=l.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function hb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function ib(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||B)-(~a.sourceIndex||B);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function jb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function kb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function lb(a){return fb(function(b){return b=+b,fb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function mb(a){return a&&typeof a.getElementsByTagName!==A&&a}c=db.support={},f=db.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},k=db.setDocument=function(a){var b,e=a?a.ownerDocument||a:t,g=e.defaultView;return e!==l&&9===e.nodeType&&e.documentElement?(l=e,m=e.documentElement,n=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){k()},!1):g.attachEvent&&g.attachEvent("onunload",function(){k()})),c.attributes=gb(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=gb(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(e.getElementsByClassName)&&gb(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=gb(function(a){return m.appendChild(a).id=s,!e.getElementsByName||!e.getElementsByName(s).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==A&&n){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ab,bb);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ab,bb);return function(a){var c=typeof a.getAttributeNode!==A&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==A?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==A&&n?b.getElementsByClassName(a):void 0},p=[],o=[],(c.qsa=Y.test(e.querySelectorAll))&&(gb(function(a){a.innerHTML="<select t=''><option selected=''></option></select>",a.querySelectorAll("[t^='']").length&&o.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||o.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll(":checked").length||o.push(":checked")}),gb(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&o.push("name"+K+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||o.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),o.push(",.*:")})),(c.matchesSelector=Y.test(q=m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&gb(function(a){c.disconnectedMatch=q.call(a,"div"),q.call(a,"[s!='']:x"),p.push("!=",O)}),o=o.length&&new RegExp(o.join("|")),p=p.length&&new RegExp(p.join("|")),b=Y.test(m.compareDocumentPosition),r=b||Y.test(m.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},z=b?function(a,b){if(a===b)return j=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===t&&r(t,a)?-1:b===e||b.ownerDocument===t&&r(t,b)?1:i?I.call(i,a)-I.call(i,b):0:4&d?-1:1)}:function(a,b){if(a===b)return j=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],k=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:i?I.call(i,a)-I.call(i,b):0;if(f===g)return ib(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)k.unshift(c);while(h[d]===k[d])d++;return d?ib(h[d],k[d]):h[d]===t?-1:k[d]===t?1:0},e):l},db.matches=function(a,b){return db(a,null,null,b)},db.matchesSelector=function(a,b){if((a.ownerDocument||a)!==l&&k(a),b=b.replace(S,"='$1']"),!(!c.matchesSelector||!n||p&&p.test(b)||o&&o.test(b)))try{var d=q.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return db(b,l,null,[a]).length>0},db.contains=function(a,b){return(a.ownerDocument||a)!==l&&k(a),r(a,b)},db.attr=function(a,b){(a.ownerDocument||a)!==l&&k(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!n):void 0;return void 0!==f?f:c.attributes||!n?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},db.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},db.uniqueSort=function(a){var b,d=[],e=0,f=0;if(j=!c.detectDuplicates,i=!c.sortStable&&a.slice(0),a.sort(z),j){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return i=null,a},e=db.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=db.selectors={cacheLength:50,createPseudo:fb,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ab,bb),a[3]=(a[4]||a[5]||"").replace(ab,bb),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||db.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&db.error(a[0]),a},PSEUDO:function(a){var b,c=!a[5]&&a[2];return V.CHILD.test(a[0])?null:(a[3]&&void 0!==a[4]?a[2]=a[4]:c&&T.test(c)&&(b=ob(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ab,bb).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=w[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&w(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==A&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=db.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),t=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&t){k=q[s]||(q[s]={}),j=k[a]||[],n=j[0]===u&&j[1],m=j[0]===u&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[u,n,m];break}}else if(t&&(j=(b[s]||(b[s]={}))[a])&&j[0]===u)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(t&&((l[s]||(l[s]={}))[a]=[u,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||db.error("unsupported pseudo: "+a);return e[s]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?fb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:fb(function(a){var b=[],c=[],d=g(a.replace(P,"$1"));return d[s]?fb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:fb(function(a){return function(b){return db(a,b).length>0}}),contains:fb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:fb(function(a){return U.test(a||"")||db.error("unsupported lang: "+a),a=a.replace(ab,bb).toLowerCase(),function(b){var c;do if(c=n?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===m},focus:function(a){return a===l.activeElement&&(!l.hasFocus||l.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:lb(function(){return[0]}),last:lb(function(a,b){return[b-1]}),eq:lb(function(a,b,c){return[0>c?c+b:c]}),even:lb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:lb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:lb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:lb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=jb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=kb(b);function nb(){}nb.prototype=d.filters=d.pseudos,d.setFilters=new nb;function ob(a,b){var c,e,f,g,h,i,j,k=x[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=Q.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?db.error(a):x(a,i).slice(0)}function pb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function qb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=v++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[u,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[s]||(b[s]={}),(h=i[d])&&h[0]===u&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function rb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function sb(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function tb(a,b,c,d,e,f){return d&&!d[s]&&(d=tb(d)),e&&!e[s]&&(e=tb(e,f)),fb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||wb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:sb(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=sb(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=sb(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ub(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],i=g||d.relative[" "],j=g?1:0,k=qb(function(a){return a===b},i,!0),l=qb(function(a){return I.call(b,a)>-1},i,!0),m=[function(a,c,d){return!g&&(d||c!==h)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>j;j++)if(c=d.relative[a[j].type])m=[qb(rb(m),c)];else{if(c=d.filter[a[j].type].apply(null,a[j].matches),c[s]){for(e=++j;f>e;e++)if(d.relative[a[e].type])break;return tb(j>1&&rb(m),j>1&&pb(a.slice(0,j-1).concat({value:" "===a[j-2].type?"*":""})).replace(P,"$1"),c,e>j&&ub(a.slice(j,e)),f>e&&ub(a=a.slice(e)),f>e&&pb(a))}m.push(c)}return rb(m)}function vb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,i,j,k){var m,n,o,p=0,q="0",r=f&&[],s=[],t=h,v=f||e&&d.find.TAG("*",k),w=u+=null==t?1:Math.random()||.1,x=v.length;for(k&&(h=g!==l&&g);q!==x&&null!=(m=v[q]);q++){if(e&&m){n=0;while(o=a[n++])if(o(m,g,i)){j.push(m);break}k&&(u=w)}c&&((m=!o&&m)&&p--,f&&r.push(m))}if(p+=q,c&&q!==p){n=0;while(o=b[n++])o(r,s,g,i);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=E.call(j));s=sb(s)}G.apply(j,s),k&&!f&&s.length>0&&p+b.length>1&&db.uniqueSort(j)}return k&&(u=w,h=t),r};return c?fb(f):f}g=db.compile=function(a,b){var c,d=[],e=[],f=y[a+" "];if(!f){b||(b=ob(a)),c=b.length;while(c--)f=ub(b[c]),f[s]?d.push(f):e.push(f);f=y(a,vb(e,d))}return f};function wb(a,b,c){for(var d=0,e=b.length;e>d;d++)db(a,b[d],c);return c}function xb(a,b,e,f){var h,i,j,k,l,m=ob(a);if(!f&&1===m.length){if(i=m[0]=m[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&c.getById&&9===b.nodeType&&n&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(ab,bb),b)||[])[0],!b)return e;a=a.slice(i.shift().value.length)}h=V.needsContext.test(a)?0:i.length;while(h--){if(j=i[h],d.relative[k=j.type])break;if((l=d.find[k])&&(f=l(j.matches[0].replace(ab,bb),$.test(i[0].type)&&mb(b.parentNode)||b))){if(i.splice(h,1),a=f.length&&pb(i),!a)return G.apply(e,f),e;break}}}return g(a,m)(f,b,!n,e,$.test(a)&&mb(b.parentNode)||b),e}return c.sortStable=s.split("").sort(z).join("")===s,c.detectDuplicates=!!j,k(),c.sortDetached=gb(function(a){return 1&a.compareDocumentPosition(l.createElement("div"))}),gb(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||hb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&gb(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||hb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),gb(function(a){return null==a.getAttribute("disabled")})||hb(J,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),db}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=a.document,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,B=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:A.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:z,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=z.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return y.find(a);this.length=1,this[0]=d}return this.context=z,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};B.prototype=n.fn,y=n(z);var C=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!n(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function E(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return E(a,"nextSibling")},prev:function(a){return E(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(D[a]||(e=n.unique(e)),C.test(a)&&(e=e.reverse())),this.pushStack(e)}});var F=/\S+/g,G={};function H(a){var b=G[a]={};return n.each(a.match(F)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?G[a]||H(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&n.each(arguments,function(a,c){var d;while((d=n.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){if(a===!0?!--n.readyWait:!n.isReady){if(!z.body)return setTimeout(n.ready);n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(z,[n]),n.fn.trigger&&n(z).trigger("ready").off("ready"))}}});function J(){z.addEventListener?(z.removeEventListener("DOMContentLoaded",K,!1),a.removeEventListener("load",K,!1)):(z.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(z.addEventListener||"load"===event.type||"complete"===z.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===z.readyState)setTimeout(n.ready);else if(z.addEventListener)z.addEventListener("DOMContentLoaded",K,!1),a.addEventListener("load",K,!1);else{z.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&z.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!n.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}J(),n.ready()}}()}return I.promise(b)};var L="undefined",M;for(M in n(l))break;l.ownLast="0"!==M,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c=z.getElementsByTagName("body")[0];c&&(a=z.createElement("div"),a.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",b=z.createElement("div"),c.appendChild(a).appendChild(b),typeof b.style.zoom!==L&&(b.style.cssText="border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1",(l.inlineBlockNeedsLayout=3===b.offsetWidth)&&(c.style.zoom=1)),c.removeChild(a),a=b=null)}),function(){var a=z.createElement("div");if(null==l.deleteExpando){l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}}a=null}(),n.acceptData=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(n.acceptData(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f
}}function S(a,b,c){if(n.acceptData(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d]));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var T=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},W=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},X=/^(?:checkbox|radio)$/i;!function(){var a=z.createDocumentFragment(),b=z.createElement("div"),c=z.createElement("input");if(b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a>",l.leadingWhitespace=3===b.firstChild.nodeType,l.tbody=!b.getElementsByTagName("tbody").length,l.htmlSerialize=!!b.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==z.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,a.appendChild(c),l.appendChecked=c.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,a.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){l.noCloneEvent=!1}),b.cloneNode(!0).click()),null==l.deleteExpando){l.deleteExpando=!0;try{delete b.test}catch(d){l.deleteExpando=!1}}a=b=c=null}(),function(){var b,c,d=z.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),l[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var Y=/^(?:input|select|textarea)$/i,Z=/^key/,$=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,ab=/^([^.]*)(?:\.(.+)|)$/;function bb(){return!0}function cb(){return!1}function db(){try{return z.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof n===L||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(F)||[""],h=b.length;while(h--)f=ab.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(F)||[""],j=b.length;while(j--)if(h=ab.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,m,o=[d||z],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||z,3!==d.nodeType&&8!==d.nodeType&&!_.test(p+n.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[n.expando]?b:new n.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),k=n.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!n.isWindow(d)){for(i=k.delegateType||p,_.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||z)&&o.push(l.defaultView||l.parentWindow||a)}m=0;while((h=o[m++])&&!b.isPropagationStopped())b.type=m>1?i:k.bindType||p,f=(n._data(h,"events")||{})[b.type]&&n._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&n.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&n.acceptData(d)&&g&&d[p]&&!n.isWindow(d)){l=d[g],l&&(d[g]=null),n.event.triggered=p;try{d[p]()}catch(r){}n.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((n.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?n(c,this).index(i)>=0:n.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=$.test(e)?this.mouseHooks:Z.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||z),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||z,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==db()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===db()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=z.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===L&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&(a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault())?bb:cb):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:cb,isPropagationStopped:cb,isImmediatePropagationStopped:cb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=bb,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=bb,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submitBubbles||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?b.form:void 0;c&&!n._data(c,"submitBubbles")&&(n.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),n._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.changeBubbles||(n.event.special.change={setup:function(){return Y.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),n.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),n.event.simulate("change",this,a,!0)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;Y.test(b.nodeName)&&!n._data(b,"changeBubbles")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a,!0)}),n._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!Y.test(this.nodeName)}}),l.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=cb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return n().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=cb),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});function eb(a){var b=fb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var fb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gb=/ jQuery\d+="(?:null|\d+)"/g,hb=new RegExp("<(?:"+fb+")[\\s/>]","i"),ib=/^\s+/,jb=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,kb=/<([\w:]+)/,lb=/<tbody/i,mb=/<|&#?\w+;/,nb=/<(?:script|style|link)/i,ob=/checked\s*(?:[^=]|=\s*.checked.)/i,pb=/^$|\/(?:java|ecma)script/i,qb=/^true\/(.*)/,rb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,sb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},tb=eb(z),ub=tb.appendChild(z.createElement("div"));sb.optgroup=sb.option,sb.tbody=sb.tfoot=sb.colgroup=sb.caption=sb.thead,sb.th=sb.td;function vb(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==L?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==L?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,vb(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function wb(a){X.test(a.type)&&(a.defaultChecked=a.checked)}function xb(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function yb(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function zb(a){var b=qb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ab(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}function Bb(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Cb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(yb(b).text=a.text,zb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&X.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}n.extend({clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!hb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(ub.innerHTML=a.outerHTML,ub.removeChild(f=ub.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=vb(f),h=vb(a),g=0;null!=(e=h[g]);++g)d[g]&&Cb(e,d[g]);if(b)if(c)for(h=h||vb(a),d=d||vb(f),g=0;null!=(e=h[g]);g++)Bb(e,d[g]);else Bb(a,f);return d=vb(f,"script"),d.length>0&&Ab(d,!i&&vb(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k,m=a.length,o=eb(b),p=[],q=0;m>q;q++)if(f=a[q],f||0===f)if("object"===n.type(f))n.merge(p,f.nodeType?[f]:f);else if(mb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(kb.exec(f)||["",""])[1].toLowerCase(),k=sb[i]||sb._default,h.innerHTML=k[1]+f.replace(jb,"<$1></$2>")+k[2],e=k[0];while(e--)h=h.lastChild;if(!l.leadingWhitespace&&ib.test(f)&&p.push(b.createTextNode(ib.exec(f)[0])),!l.tbody){f="table"!==i||lb.test(f)?"<table>"!==k[1]||lb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)n.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}n.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),l.appendChecked||n.grep(vb(p,"input"),wb),q=0;while(f=p[q++])if((!d||-1===n.inArray(f,d))&&(g=n.contains(f.ownerDocument,f),h=vb(o.appendChild(f),"script"),g&&Ab(h),c)){e=0;while(f=h[e++])pb.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.deleteExpando,m=n.event.special;null!=(d=a[h]);h++)if((b||n.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k?delete d[i]:typeof d.removeAttribute!==L?d.removeAttribute(i):d[i]=null,c.push(f))}}}),n.fn.extend({text:function(a){return W(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||z).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(vb(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&Ab(vb(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(vb(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return W(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(gb,""):void 0;if(!("string"!=typeof a||nb.test(a)||!l.htmlSerialize&&hb.test(a)||!l.leadingWhitespace&&ib.test(a)||sb[(kb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(jb,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(vb(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(vb(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,k=this.length,m=this,o=k-1,p=a[0],q=n.isFunction(p);if(q||k>1&&"string"==typeof p&&!l.checkClone&&ob.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(k&&(i=n.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=n.map(vb(i,"script"),yb),f=g.length;k>j;j++)d=i,j!==o&&(d=n.clone(d,!0,!0),f&&n.merge(g,vb(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,n.map(g,zb),j=0;f>j;j++)d=g[j],pb.test(d.type||"")&&!n._data(d,"globalEval")&&n.contains(h,d)&&(d.src?n._evalUrl&&n._evalUrl(d.src):n.globalEval((d.text||d.textContent||d.innerHTML||"").replace(rb,"")));i=c=null}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],g=n(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Db,Eb={};function Fb(b,c){var d=n(c.createElement(b)).appendTo(c.body),e=a.getDefaultComputedStyle?a.getDefaultComputedStyle(d[0]).display:n.css(d[0],"display");return d.detach(),e}function Gb(a){var b=z,c=Eb[a];return c||(c=Fb(a,b),"none"!==c&&c||(Db=(Db||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Db[0].contentWindow||Db[0].contentDocument).document,b.write(),b.close(),c=Fb(a,b),Db.detach()),Eb[a]=c),c}!function(){var a,b,c=z.createElement("div"),d="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0";c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],a.style.cssText="float:left;opacity:.5",l.opacity=/^0.5/.test(a.style.opacity),l.cssFloat=!!a.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===c.style.backgroundClip,a=c=null,l.shrinkWrapBlocks=function(){var a,c,e,f;if(null==b){if(a=z.getElementsByTagName("body")[0],!a)return;f="border:0;width:0;height:0;position:absolute;top:0;left:-9999px",c=z.createElement("div"),e=z.createElement("div"),a.appendChild(c).appendChild(e),b=!1,typeof e.style.zoom!==L&&(e.style.cssText=d+";width:1px;padding:1px;zoom:1",e.innerHTML="<div></div>",e.firstChild.style.width="5px",b=3!==e.offsetWidth),a.removeChild(c),a=c=e=null}return b}}();var Hb=/^margin/,Ib=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Jb,Kb,Lb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Jb=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Kb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Jb(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),Ib.test(g)&&Hb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):z.documentElement.currentStyle&&(Jb=function(a){return a.currentStyle},Kb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Jb(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Ib.test(g)&&!Lb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Mb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h=z.createElement("div"),i="border:0;width:0;height:0;position:absolute;top:0;left:-9999px",j="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0";h.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",b=h.getElementsByTagName("a")[0],b.style.cssText="float:left;opacity:.5",l.opacity=/^0.5/.test(b.style.opacity),l.cssFloat=!!b.style.cssFloat,h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,b=h=null,n.extend(l,{reliableHiddenOffsets:function(){if(null!=c)return c;var a,b,d,e=z.createElement("div"),f=z.getElementsByTagName("body")[0];if(f)return e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=z.createElement("div"),a.style.cssText=i,f.appendChild(a).appendChild(e),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",b=e.getElementsByTagName("td"),b[0].style.cssText="padding:0;margin:0;border:0;display:none",d=0===b[0].offsetHeight,b[0].style.display="",b[1].style.display="none",c=d&&0===b[0].offsetHeight,f.removeChild(a),e=f=null,c},boxSizing:function(){return null==d&&k(),d},boxSizingReliable:function(){return null==e&&k(),e},pixelPosition:function(){return null==f&&k(),f},reliableMarginRight:function(){var b,c,d,e;if(null==g&&a.getComputedStyle){if(b=z.getElementsByTagName("body")[0],!b)return;c=z.createElement("div"),d=z.createElement("div"),c.style.cssText=i,b.appendChild(c).appendChild(d),e=d.appendChild(z.createElement("div")),e.style.cssText=d.style.cssText=j,e.style.marginRight=e.style.width="0",d.style.width="1px",g=!parseFloat((a.getComputedStyle(e,null)||{}).marginRight),b.removeChild(c)}return g}});function k(){var b,c,h=z.getElementsByTagName("body")[0];h&&(b=z.createElement("div"),c=z.createElement("div"),b.style.cssText=i,h.appendChild(b).appendChild(c),c.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;display:block;padding:1px;border:1px;width:4px;margin-top:1%;top:1%",n.swap(h,null!=h.style.zoom?{zoom:1}:{},function(){d=4===c.offsetWidth}),e=!0,f=!1,g=!0,a.getComputedStyle&&(f="1%"!==(a.getComputedStyle(c,null)||{}).top,e="4px"===(a.getComputedStyle(c,null)||{width:"4px"}).width),h.removeChild(b),c=h=null)}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Nb=/alpha\([^)]*\)/i,Ob=/opacity\s*=\s*([^)]*)/,Pb=/^(none|table(?!-c[ea]).+)/,Qb=new RegExp("^("+T+")(.*)$","i"),Rb=new RegExp("^([+-])=("+T+")","i"),Sb={position:"absolute",visibility:"hidden",display:"block"},Tb={letterSpacing:0,fontWeight:400},Ub=["Webkit","O","Moz","ms"];function Vb(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Ub.length;while(e--)if(b=Ub[e]+c,b in a)return b;return d}function Wb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=n._data(d,"olddisplay",Gb(d.nodeName)))):f[g]||(e=V(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Xb(a,b,c){var d=Qb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Yb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Zb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Jb(a),g=l.boxSizing()&&"border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Kb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ib.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Yb(a,b,c||(g?"border":"content"),d,f)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Kb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=Vb(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Rb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]="",i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Vb(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Kb(a,b,d)),"normal"===f&&b in Tb&&(f=Tb[b]),""===c||c?(e=parseFloat(f),c===!0||n.isNumeric(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?0===a.offsetWidth&&Pb.test(n.css(a,"display"))?n.swap(a,Sb,function(){return Zb(a,b,d)}):Zb(a,b,d):void 0},set:function(a,c,d){var e=d&&Jb(a);return Xb(a,c,d?Yb(a,b,d,l.boxSizing()&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Ob.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Nb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Nb.test(f)?f.replace(Nb,e):f+" "+e)}}),n.cssHooks.marginRight=Mb(l.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},Kb,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Hb.test(a)||(n.cssHooks[a+b].set=Xb)}),n.fn.extend({css:function(a,b){return W(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Jb(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)





},a,b,arguments.length>1)},show:function(){return Wb(this,!0)},hide:function(){return Wb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function $b(a,b,c,d,e){return new $b.prototype.init(a,b,c,d,e)}n.Tween=$b,$b.prototype={constructor:$b,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=$b.propHooks[this.prop];return a&&a.get?a.get(this):$b.propHooks._default.get(this)},run:function(a){var b,c=$b.propHooks[this.prop];return this.pos=b=this.options.duration?n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):$b.propHooks._default.set(this),this}},$b.prototype.init.prototype=$b.prototype,$b.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},$b.propHooks.scrollTop=$b.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=$b.prototype.init,n.fx.step={};var _b,ac,bc=/^(?:toggle|show|hide)$/,cc=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),dc=/queueHooks$/,ec=[jc],fc={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=cc.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&cc.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function gc(){return setTimeout(function(){_b=void 0}),_b=n.now()}function hc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=U[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function ic(a,b,c){for(var d,e=(fc[b]||[]).concat(fc["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function jc(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&V(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k=Gb(a.nodeName),"none"===j&&(j=k),"inline"===j&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==k?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],bc.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}if(!n.isEmptyObject(o)){r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=ic(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function kc(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function lc(a,b,c){var d,e,f=0,g=ec.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=_b||gc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:_b||gc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(kc(k,j.opts.specialEasing);g>f;f++)if(d=ec[f].call(j,a,k,j.opts))return d;return n.map(k,ic,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(lc,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],fc[c]=fc[c]||[],fc[c].unshift(b)},prefilter:function(a,b){b?ec.unshift(a):ec.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=lc(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&dc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(hc(b,!0),a,d,e)}}),n.each({slideDown:hc("show"),slideUp:hc("hide"),slideToggle:hc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(_b=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),_b=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ac||(ac=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(ac),ac=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e=z.createElement("div");e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=e.getElementsByTagName("a")[0],c=z.createElement("select"),d=c.appendChild(z.createElement("option")),b=e.getElementsByTagName("input")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==e.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=d.selected,l.enctype=!!z.createElement("form").enctype,c.disabled=!0,l.optDisabled=!d.disabled,b=z.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value,a=b=c=d=e=null}();var mc=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(mc,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.text(a)}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(l.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var nc,oc,pc=n.expr.attrHandle,qc=/^(?:checked|selected)$/i,rc=l.getSetAttribute,sc=l.input;n.fn.extend({attr:function(a,b){return W(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===L?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?oc:nc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(F);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?sc&&rc||!qc.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(rc?c:d)},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),oc={set:function(a,b,c){return b===!1?n.removeAttr(a,c):sc&&rc||!qc.test(c)?a.setAttribute(!rc&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=pc[b]||n.find.attr;pc[b]=sc&&rc||!qc.test(b)?function(a,b,d){var e,f;return d||(f=pc[b],pc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,pc[b]=f),e}:function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),sc&&rc||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):nc&&nc.set(a,b,c)}}),rc||(nc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},pc.id=pc.name=pc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:nc.set},n.attrHooks.contenteditable={set:function(a,b,c){nc.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var tc=/^(?:input|select|textarea|button|object)$/i,uc=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return W(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):tc.test(a.nodeName)||uc.test(a.nodeName)&&a.href?0:-1}}}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var vc=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(F)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(vc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(F)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(vc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(F)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===L||"boolean"===c)&&(this.className&&n._data(this,"__className__",this.className),this.className=this.className||a===!1?"":n._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(vc," ").indexOf(b)>=0)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var wc=n.now(),xc=/\?/,yc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(yc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var zc,Ac,Bc=/#.*$/,Cc=/([?&])_=[^&]*/,Dc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ec=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Fc=/^(?:GET|HEAD)$/,Gc=/^\/\//,Hc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ic={},Jc={},Kc="*/".concat("*");try{Ac=location.href}catch(Lc){Ac=z.createElement("a"),Ac.href="",Ac=Ac.href}zc=Hc.exec(Ac.toLowerCase())||[];function Mc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(F)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Nc(a,b,c,d){var e={},f=a===Jc;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Oc(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Pc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Qc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ac,type:"GET",isLocal:Ec.test(zc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Oc(Oc(a,n.ajaxSettings),b):Oc(n.ajaxSettings,a)},ajaxPrefilter:Mc(Ic),ajaxTransport:Mc(Jc),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Dc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||Ac)+"").replace(Bc,"").replace(Gc,zc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(F)||[""],null==k.crossDomain&&(c=Hc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===zc[1]&&c[2]===zc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(zc[3]||("http:"===zc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),Nc(Ic,k,b,v),2===t)return v;h=k.global,h&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Fc.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(xc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Cc.test(e)?e.replace(Cc,"$1_="+wc++):e+(xc.test(e)?"&":"?")+"_="+wc++)),k.ifModified&&(n.lastModified[e]&&v.setRequestHeader("If-Modified-Since",n.lastModified[e]),n.etag[e]&&v.setRequestHeader("If-None-Match",n.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Kc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Nc(Jc,k,b,v)){v.readyState=1,h&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Pc(k,v,c)),u=Qc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(n.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!l.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||n.css(a,"display"))},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var Rc=/%20/g,Sc=/\[\]$/,Tc=/\r?\n/g,Uc=/^(?:submit|button|image|reset|file)$/i,Vc=/^(?:input|select|textarea|keygen)/i;function Wc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Sc.test(a)?d(a,e):Wc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Wc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Wc(c,a[c],b,e);return d.join("&").replace(Rc,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Vc.test(this.nodeName)&&!Uc.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Tc,"\r\n")}}):{name:b.name,value:c.replace(Tc,"\r\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&$c()||_c()}:$c;var Xc=0,Yc={},Zc=n.ajaxSettings.xhr();a.ActiveXObject&&n(a).on("unload",function(){for(var a in Yc)Yc[a](void 0,!0)}),l.cors=!!Zc&&"withCredentials"in Zc,Zc=l.ajax=!!Zc,Zc&&n.ajaxTransport(function(a){if(!a.crossDomain||l.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Xc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Yc[g],b=void 0,f.onreadystatechange=n.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Yc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function $c(){try{return new a.XMLHttpRequest}catch(b){}}function _c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=z.head||n("head")[0]||z.documentElement;return{send:function(d,e){b=z.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var ad=[],bd=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=ad.pop()||n.expando+"_"+wc++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(bd.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&bd.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(bd,"$1"+e):b.jsonp!==!1&&(b.url+=(xc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,ad.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||z;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var cd=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&cd)return cd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=a.slice(h,a.length),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&n.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var dd=a.document.documentElement;function ed(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?(typeof e.getBoundingClientRect!==L&&(d=e.getBoundingClientRect()),c=ed(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||dd;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||dd})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return W(this,function(a,d,e){var f=ed(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Mb(l.pixelPosition,function(a,c){return c?(c=Kb(a,b),Ib.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return W(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var fd=a.jQuery,gd=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=gd),b&&a.jQuery===n&&(a.jQuery=fd),n},typeof b===L&&(a.jQuery=a.$=n),n});
/*!
 * jQuery Color Animations v@VERSION
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: @DATE
 */
(function( jQuery, undefined ) {

	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

	// plusequals test for += 100 -= 100
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
	// a set of RE's that can match strings and generate color tuples.
	stringParsers = [{
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ],
					execResult[ 3 ],
					execResult[ 4 ]
				];
			}
		}, {
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ] * 2.55,
					execResult[ 2 ] * 2.55,
					execResult[ 3 ] * 2.55,
					execResult[ 4 ]
				];
			}
		}, {
			// this regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ], 16 )
				];
			}
		}, {
			// this regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
				];
			}
		}, {
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			space: "hsla",
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ] / 100,
					execResult[ 3 ] / 100,
					execResult[ 4 ]
				];
			}
		}],

	// jQuery.Color( )
	color = jQuery.Color = function( color, green, blue, alpha ) {
		return new jQuery.Color.fn.parse( color, green, blue, alpha );
	},
	spaces = {
		rgba: {
			props: {
				red: {
					idx: 0,
					type: "byte"
				},
				green: {
					idx: 1,
					type: "byte"
				},
				blue: {
					idx: 2,
					type: "byte"
				}
			}
		},

		hsla: {
			props: {
				hue: {
					idx: 0,
					type: "degrees"
				},
				saturation: {
					idx: 1,
					type: "percent"
				},
				lightness: {
					idx: 2,
					type: "percent"
				}
			}
		}
	},
	propTypes = {
		"byte": {
			floor: true,
			max: 255
		},
		"percent": {
			max: 1
		},
		"degrees": {
			mod: 360,
			floor: true
		}
	},
	support = color.support = {},

	// element for support tests
	supportElem = jQuery( "<p>" )[ 0 ],

	// colors = jQuery.Color.names
	colors,

	// local aliases of functions called often
	each = jQuery.each;

// determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
	space.cache = "_" + spaceName;
	space.props.alpha = {
		idx: 3,
		type: "percent",
		def: 1
	};
});

function clamp( value, prop, allowEmpty ) {
	var type = propTypes[ prop.type ] || {};

	if ( value == null ) {
		return (allowEmpty || !prop.def) ? null : prop.def;
	}

	// ~~ is an short way of doing floor for positive numbers
	value = type.floor ? ~~value : parseFloat( value );

	// IE will pass in empty strings as value for alpha,
	// which will hit this case
	if ( isNaN( value ) ) {
		return prop.def;
	}

	if ( type.mod ) {
		// we add mod before modding to make sure that negatives values
		// get converted properly: -10 -> 350
		return (value + type.mod) % type.mod;
	}

	// for now all property types without mod have min and max
	return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
	var inst = color(),
		rgba = inst._rgba = [];

	string = string.toLowerCase();

	each( stringParsers, function( i, parser ) {
		var parsed,
			match = parser.re.exec( string ),
			values = match && parser.parse( match ),
			spaceName = parser.space || "rgba";

		if ( values ) {
			parsed = inst[ spaceName ]( values );

			// if this was an rgba parse the assignment might happen twice
			// oh well....
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
			rgba = inst._rgba = parsed._rgba;

			// exit each( stringParsers ) here because we matched
			return false;
		}
	});

	// Found a stringParser that handled it
	if ( rgba.length ) {

		// if this came from a parsed string, force "transparent" when alpha is 0
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
		if ( rgba.join() === "0,0,0,0" ) {
			jQuery.extend( rgba, colors.transparent );
		}
		return inst;
	}

	// named colors
	return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
	parse: function( red, green, blue, alpha ) {
		if ( red === undefined ) {
			this._rgba = [ null, null, null, null ];
			return this;
		}
		if ( red.jquery || red.nodeType ) {
			red = jQuery( red ).css( green );
			green = undefined;
		}

		var inst = this,
			type = jQuery.type( red ),
			rgba = this._rgba = [];

		// more than 1 argument specified - assume ( red, green, blue, alpha )
		if ( green !== undefined ) {
			red = [ red, green, blue, alpha ];
			type = "array";
		}

		if ( type === "string" ) {
			return this.parse( stringParse( red ) || colors._default );
		}

		if ( type === "array" ) {
			each( spaces.rgba.props, function( key, prop ) {
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
			});
			return this;
		}

		if ( type === "object" ) {
			if ( red instanceof color ) {
				each( spaces, function( spaceName, space ) {
					if ( red[ space.cache ] ) {
						inst[ space.cache ] = red[ space.cache ].slice();
					}
				});
			} else {
				each( spaces, function( spaceName, space ) {
					var cache = space.cache;
					each( space.props, function( key, prop ) {

						// if the cache doesn't exist, and we know how to convert
						if ( !inst[ cache ] && space.to ) {

							// if the value was null, we don't need to copy it
							// if the key was alpha, we don't need to copy it either
							if ( key === "alpha" || red[ key ] == null ) {
								return;
							}
							inst[ cache ] = space.to( inst._rgba );
						}

						// this is the only case where we allow nulls for ALL properties.
						// call clamp with alwaysAllowEmpty
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
					});

					// everything defined but alpha?
					if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
						// use the default of 1
						inst[ cache ][ 3 ] = 1;
						if ( space.from ) {
							inst._rgba = space.from( inst[ cache ] );
						}
					}
				});
			}
			return this;
		}
	},
	is: function( compare ) {
		var is = color( compare ),
			same = true,
			inst = this;

		each( spaces, function( _, space ) {
			var localCache,
				isCache = is[ space.cache ];
			if (isCache) {
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
				each( space.props, function( _, prop ) {
					if ( isCache[ prop.idx ] != null ) {
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
						return same;
					}
				});
			}
			return same;
		});
		return same;
	},
	_space: function() {
		var used = [],
			inst = this;
		each( spaces, function( spaceName, space ) {
			if ( inst[ space.cache ] ) {
				used.push( spaceName );
			}
		});
		return used.pop();
	},
	transition: function( other, distance ) {
		var end = color( other ),
			spaceName = end._space(),
			space = spaces[ spaceName ],
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
			start = startColor[ space.cache ] || space.to( startColor._rgba ),
			result = start.slice();

		end = end[ space.cache ];
		each( space.props, function( key, prop ) {
			var index = prop.idx,
				startValue = start[ index ],
				endValue = end[ index ],
				type = propTypes[ prop.type ] || {};

			// if null, don't override start value
			if ( endValue === null ) {
				return;
			}
			// if null - use end
			if ( startValue === null ) {
				result[ index ] = endValue;
			} else {
				if ( type.mod ) {
					if ( endValue - startValue > type.mod / 2 ) {
						startValue += type.mod;
					} else if ( startValue - endValue > type.mod / 2 ) {
						startValue -= type.mod;
					}
				}
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
			}
		});
		return this[ spaceName ]( result );
	},
	blend: function( opaque ) {
		// if we are already opaque - return ourself
		if ( this._rgba[ 3 ] === 1 ) {
			return this;
		}

		var rgb = this._rgba.slice(),
			a = rgb.pop(),
			blend = color( opaque )._rgba;

		return color( jQuery.map( rgb, function( v, i ) {
			return ( 1 - a ) * blend[ i ] + a * v;
		}));
	},
	toRgbaString: function() {
		var prefix = "rgba(",
			rgba = jQuery.map( this._rgba, function( v, i ) {
				return v == null ? ( i > 2 ? 1 : 0 ) : v;
			});

		if ( rgba[ 3 ] === 1 ) {
			rgba.pop();
			prefix = "rgb(";
		}

		return prefix + rgba.join() + ")";
	},
	toHslaString: function() {
		var prefix = "hsla(",
			hsla = jQuery.map( this.hsla(), function( v, i ) {
				if ( v == null ) {
					v = i > 2 ? 1 : 0;
				}

				// catch 1 and 2
				if ( i && i < 3 ) {
					v = Math.round( v * 100 ) + "%";
				}
				return v;
			});

		if ( hsla[ 3 ] === 1 ) {
			hsla.pop();
			prefix = "hsl(";
		}
		return prefix + hsla.join() + ")";
	},
	toHexString: function( includeAlpha ) {
		var rgba = this._rgba.slice(),
			alpha = rgba.pop();

		if ( includeAlpha ) {
			rgba.push( ~~( alpha * 255 ) );
		}

		return "#" + jQuery.map( rgba, function( v ) {

			// default to 0 when nulls exist
			v = ( v || 0 ).toString( 16 );
			return v.length === 1 ? "0" + v : v;
		}).join("");
	},
	toString: function() {
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
	}
});
color.fn.parse.prototype = color.fn;

// hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
	h = ( h + 1 ) % 1;
	if ( h * 6 < 1 ) {
		return p + (q - p) * h * 6;
	}
	if ( h * 2 < 1) {
		return q;
	}
	if ( h * 3 < 2 ) {
		return p + (q - p) * ((2/3) - h) * 6;
	}
	return p;
}

spaces.hsla.to = function ( rgba ) {
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
		return [ null, null, null, rgba[ 3 ] ];
	}
	var r = rgba[ 0 ] / 255,
		g = rgba[ 1 ] / 255,
		b = rgba[ 2 ] / 255,
		a = rgba[ 3 ],
		max = Math.max( r, g, b ),
		min = Math.min( r, g, b ),
		diff = max - min,
		add = max + min,
		l = add * 0.5,
		h, s;

	if ( min === max ) {
		h = 0;
	} else if ( r === max ) {
		h = ( 60 * ( g - b ) / diff ) + 360;
	} else if ( g === max ) {
		h = ( 60 * ( b - r ) / diff ) + 120;
	} else {
		h = ( 60 * ( r - g ) / diff ) + 240;
	}

	// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
	if ( diff === 0 ) {
		s = 0;
	} else if ( l <= 0.5 ) {
		s = diff / add;
	} else {
		s = diff / ( 2 - add );
	}
	return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function ( hsla ) {
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
		return [ null, null, null, hsla[ 3 ] ];
	}
	var h = hsla[ 0 ] / 360,
		s = hsla[ 1 ],
		l = hsla[ 2 ],
		a = hsla[ 3 ],
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
		p = 2 * l - q;

	return [
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
		Math.round( hue2rgb( p, q, h ) * 255 ),
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
		a
	];
};


each( spaces, function( spaceName, space ) {
	var props = space.props,
		cache = space.cache,
		to = space.to,
		from = space.from;

	// makes rgba() and hsla()
	color.fn[ spaceName ] = function( value ) {

		// generate a cache for this space if it doesn't exist
		if ( to && !this[ cache ] ) {
			this[ cache ] = to( this._rgba );
		}
		if ( value === undefined ) {
			return this[ cache ].slice();
		}

		var ret,
			type = jQuery.type( value ),
			arr = ( type === "array" || type === "object" ) ? value : arguments,
			local = this[ cache ].slice();

		each( props, function( key, prop ) {
			var val = arr[ type === "object" ? key : prop.idx ];
			if ( val == null ) {
				val = local[ prop.idx ];
			}
			local[ prop.idx ] = clamp( val, prop );
		});

		if ( from ) {
			ret = color( from( local ) );
			ret[ cache ] = local;
			return ret;
		} else {
			return color( local );
		}
	};

	// makes red() green() blue() alpha() hue() saturation() lightness()
	each( props, function( key, prop ) {
		// alpha is included in more than one space
		if ( color.fn[ key ] ) {
			return;
		}
		color.fn[ key ] = function( value ) {
			var vtype = jQuery.type( value ),
				fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
				local = this[ fn ](),
				cur = local[ prop.idx ],
				match;

			if ( vtype === "undefined" ) {
				return cur;
			}

			if ( vtype === "function" ) {
				value = value.call( this, cur );
				vtype = jQuery.type( value );
			}
			if ( value == null && prop.empty ) {
				return this;
			}
			if ( vtype === "string" ) {
				match = rplusequals.exec( value );
				if ( match ) {
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
				}
			}
			local[ prop.idx ] = value;
			return this[ fn ]( local );
		};
	});
});

// add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
	var hooks = hook.split( " " );
	each( hooks, function( i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, curElem,
					backgroundColor = "";

				if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						while (
							(backgroundColor === "" || backgroundColor === "transparent") &&
							curElem && curElem.style
						) {
							try {
								backgroundColor = jQuery.css( curElem, "backgroundColor" );
								curElem = curElem.parentNode;
							} catch ( e ) {
							}
						}

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				try {
					elem.style[ hook ] = value;
				} catch( e ) {
					// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
				}
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	});

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
	expand: function( value ) {
		var expanded = {};

		each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
			expanded[ "border" + part + "Color" ] = value;
		});
		return expanded;
	}
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {
	// 4.1. Basic color keywords
	aqua: "#00ffff",
	black: "#000000",
	blue: "#0000ff",
	fuchsia: "#ff00ff",
	gray: "#808080",
	green: "#008000",
	lime: "#00ff00",
	maroon: "#800000",
	navy: "#000080",
	olive: "#808000",
	purple: "#800080",
	red: "#ff0000",
	silver: "#c0c0c0",
	teal: "#008080",
	white: "#ffffff",
	yellow: "#ffff00",

	// 4.2.3. "transparent" color keyword
	transparent: [ null, null, null, 0 ],

	_default: "#ffffff"
};

}( jQuery ));

</script>
		<script>var curSequence = false, minimumHighlightTimerAct, showsequence = false;;
function sequence(list, elem, linkName, relPos) {
    if (showsequence) {
        console.log("New sequence -- " + linkName);
    }
    var THIS = this;
    this.running = true;
    // current page object in book
    this.pageElem = elem;
    // boolean, NOTE not sure if we need this
    this.inList = true;
    // Increment for sequence list, 
    this.listNum = -1;
    // List array
    this.listArr = list;
    // Any opened animation intervals, for clearing or waiting for "animation ended" event
    // NOTE Can switch to array if needed, but for the time being, the books only support one animation at a time.
    this.openAnim = false;
    this.animInterval = false;
    // Any opened and ticking waits, CAN ONLY HAVE ONE AT A TIME
    this.openWait = false;


    // Audio props for local export
    this.openAudio = false;
    this.videoElem = false;
    this.playCheck = false;
    this.videoRefresh = false;
    this.openFlash = false;
    this.flashInt = false;

    // Highlighter props
    this.openHighlight = false;
    this.parentHighlight = false;

    minimumHighlightTimer = false;
    window.clearTimeout(minimumHighlightTimerAct);
    minimumHighlightTimerAct = window.setTimeout(function() {
        if (!THIS.running) {
            THIS.pageElem.highlightedLink = false;
            THIS.pageElem.redraw();
        }
        THIS.minimumHighlightTimer = true;
    },book.minLinkHighlightTime);

    this.nextCheck = function() {
        var next = THIS.listArr[THIS.listNum+1];
        if (next) {
            return next[0].toLowerCase();
        }       else    {
            return 'end of sequence';
        }
    }
    this.next = function () {
        THIS.listNum++;
        var curTarg = THIS.listArr[THIS.listNum];
        if (curTarg) {
            if (showsequence) {
                console.log(curTarg);
            }
            if (curTarg[0]) {
                curTarg[0] = curTarg[0].toLowerCase();
                curTarg[1] = curTarg[1].toLowerCase();

                if (curTarg[0] == "object") {
                    var splitTarg = curTarg[1].split('|');
                    // objects
                    if (curTarg[1] == "show" || curTarg[1] == "hide") {
                        // show hide obj
                        showHide(curTarg, true);
                    } else if (curTarg[1] == "play") {
                        // animate obj
                        var objName = curTarg[2].split("|")[0];
                        var objLoc = THIS.pageElem.objs[objName];
                        var animName = curTarg[2].split("|")[1];
                        if (objLoc.type == 'image') {
                            // static object animation
                            animateObject(objLoc, animName);
                        } else if (objLoc.type == 'video') {
                            // playing a video
                            playVideo(objLoc);
                        } else {
                            console.error('unknown object type ' + objLoc.type + ' in object ' + objLoc.name);
                            THIS.next();
                        }
                    } else if (curTarg[1] == "reset") {
                        resetObject(curTarg[2]);
                    } else if (curTarg[1].toLowerCase() == 'send click to') {
                        THIS.clear();
                        var sendLink = curTarg[2];
                        var linkInfo = THIS.pageElem.linkKey[sendLink];
                        if (linkInfo) {
                            var linkAct = THIS.pageElem[linkInfo.type][linkInfo.pos];
                            if (linkAct.enabled) {
                                curSequence = new sequence(linkAct.targets, THIS.pageElem, sendLink, relPos);
                                curSequence.start();
                            } else {
                                console.warn("Send link disabled");
                            }
                        } else {
                            console.error('link "' + sendLink + '" not found on page ' + THIS.pageElem.ident);
                        }
                    } else if (curTarg[1] == 'enable' || curTarg[1] == 'disable') {
                        var lnkInKey = THIS.pageElem.linkKey[curTarg[2]];
                        if (lnkInKey) {
                            lnkType = lnkInKey.type;
                            lnkPos = lnkInKey.pos;
                            var lnkTypeArr = THIS.pageElem[lnkType];
                            if (lnkTypeArr) {
                                var lnkAct = lnkTypeArr[lnkPos];
                                if (lnkAct) {
                                    // enable or disable
                                    if (curTarg[1] == 'enable') {
                                        lnkAct.enabled = true;
                                    } else {
                                        lnkAct.enabled = false;
                                    }
                                    THIS.next();
                                } else {
                                    console.error("ERROR! link not found in " + lnkType);
                                    THIS.next();
                                }
                            } else {
                                console.error("ERROR! unknown link type " + lnkType);
                                THIS.next();
                            }
                        } else {
                            console.error("ERROR! link " + curTarg[2] + " not found on page");
                            THIS.next();
                        }

                    } else if (splitTarg.length > 1) {
                        if (splitTarg[0] == 'move') {
                            var objSel = THIS.pageElem.objs[curTarg[2]];
                            if (objSel) {
                                var leftTop = splitTarg[1].split(',');
                                objSel.top = leftTop[0];
                                objSel.left = leftTop[1];
                                THIS.pageElem.redraw();
                                THIS.next();
                            } else {
                                console.error("ERROR! Object " + curTarg[2] + " not found on page");
                                THIS.next();
                            }
                        } else if (splitTarg[0] == 'flash') {
                            flashObj(curTarg[2], splitTarg);
                        }
                    } else {
                        console.error("ERROR! unknown action - " + curTarg[1]);
                    }
                } else if (curTarg[0] == "audio") {
                    if (spriteKey) {
                        if (!book.sprite.paused) {
                            THIS.listNum--;
                            wait('silence');
                        } else {
                            // play sounds
                            playSound(curTarg[2]);
                        }
                    } else {
                        if (THIS.openAudio) {
                            THIS.listNum--;
                            wait('silence');
                        } else {
                            playSound(curTarg[2]);
                        }
                    }

                } else if (curTarg[0] == "page") {
                    // goto page
                    gotoPage(curTarg[2]);
                } else if (curTarg[0] == "url") {
                    // same tab, new tab, new window, nothing special
                    if (curTarg[1] == "same tab") {
                        same_tab(curTarg[2], false);
                    } else if (curTarg[1] == "new tab") {
                        new_tab(curTarg[2]);
                    } else if (curTarg[1] == "new window") {
                        new_window(curTarg[2]);
                    } else {
                        console.warn('unknown type of window "' + curTarg[1] + '" defaulting to new window');
                        new_window(curTarg[2]);
                    }
                } else if (curTarg[0] == "wait") {
                    // all wait events
                    curTarg[2] = curTarg[2].toLowerCase();
                    wait(curTarg[2]);
                } else if (curTarg[0] == "highlighter") {
                    highlight(curTarg[2]);
                } else if (curTarg[0] == 'redraw') {
                    THIS.pageElem.redraw();
                    THIS.next();
                } else if (curTarg[0] == 'dialog') {
                    dialog(curTarg[1].split(' ')[0],curTarg[2]);
                } else if (curTarg[0] == 'log') {
                    console.log('"' + curTarg[1] + '"');
                    THIS.next();
                } else {
                    console.warn("ERROR! unidentified target type - " + curTarg[0]);
                    THIS.next();
                }
            }
        } else {
            THIS.pageElem.redraw();
        }
    }
    this.clear = function sequenceClear() {
        THIS.running = false;
        inSequence = false;
        if (!book.sprite.paused) {
            book.sprite.pause();
            book.sprite.currentTime = spriteKey['page' + THIS.pageElem.ident].start;
            if (book.sprite.startCheck) {
                window.clearInterval(book.sprite.startCheck);
                book.sprite.startCheck = false;
            }
            if (book.sprite.volSet) {
                window.clearTimeout(book.sprite.volSet);
                book.sprite.volSet = false;
            }
            if (book.sprite.endCheck) {
                window.clearTimeout(book.sprite.endCheck);
                book.sprite.endCheck = false;
            }
        } else if (THIS.openAudio) {
            THIS.openAudio.pause();
        }
        if (THIS.openAnim) {
            window.clearInterval(THIS.animInterval);
            window.clearTimeout(THIS.animTimeout);
            THIS.openAnim = false;
        }
        if (THIS.openWait) {
            window.clearTimeout(THIS.openWait);
            THIS.openWait = false;
        }
        if (THIS.videoElem) {
            if (isFirefox && isMac) {
                THIS.videoElem.Stop();
            } else {
                THIS.videoElem.pause();
            }
            THIS.videoElem = false;
            window.clearInterval(THIS.playCheck);
        }
        if (THIS.openFlash) {
            window.clearInterval(THIS.flashInt);
            THIS.openFlash = true;
        }
        if (THIS.openHighlight) {
            THIS.openHighlight.clear = true;
            window.clearTimeout(THIS.openHighlight.nextTimeout);
            THIS.openHighlight.vis = THIS.openHighlight.initVis; 
        }
        if (THIS.parentHighlight) {
            THIS.pageElem.objs[THIS.parentHighlight].parentMarker = 0;
            THIS.parentHighlight = false;
        }
        if (THIS.minimumHighlightTimer) {
            THIS.pageElem.highlightedLink = false;
        }
        sequenceArr = [];
        curSequence = false;
        book.sprite.name = false;
        book.sprite.loc = false;
        THIS.pageElem.redraw();
    }
    function dialog(action, dialogName) {
        if (action == 'display') {
            var locInKey = book[THIS.pageElem.ident-1].dialogKey['D 1'];
            book[THIS.pageElem.ident-1].dialogs[locInKey].open();
        }       else    {
            console.warn('unknown dialog action ' + action);
        }
        THIS.next();
    }
    function highlight(objName) {
        var obj = THIS.pageElem.objs[objName];
        obj.currentChild = 1;
        obj.parentMarker = 0;
        if (obj.name == obj.parentHighlighter) {
            if (obj.audio) {
                var name = obj.audio;
                var stripExtension = name.substring(0,name.length-4);
                playSound(stripExtension, obj);
            }       else    {
                obj.start();
                if (obj.sequenceBlocking) {
                }   else    {
                    THIS.next();
                }
            }
        }       else    {
            console.warn('highlighter triggered is not a parent highlighter, but a child. Even skipped');
            THIS.next();
        }

    }
    function flashObj(objName, flashDesc) {
        var objName = objName;
        var flashNum = parseInt(flashDesc[1]);
        var flashSpeed = parseFloat(flashDesc[2]);
        var flashWait = flashDesc[3];
        if (flashWait == 'false') {
            flashWait = false;
        } else {
            flashWait = true;
        }

        var flashVisCur = THIS.pageElem.objs[objName].vis;
        THIS.openFlash = true;

        THIS.flashInt = window.setInterval(function () {
            if (flashNum <= 0) {
                window.clearInterval(THIS.flashInt);
                THIS.openFlash = false;
                if (flashWait) {
                    THIS.next();
                }
            } else {
                flashNum--;
                if (flashVisCur == 'show') {
                    flashVisCur = 'hide'
                } else {
                    flashVisCur = 'show'
                }
                showHide([0, flashVisCur, objName], false);
            }
        }, flashSpeed * 1000);
        if (!flashWait) {
            THIS.next();
        }
    }
    function resetObject(obj) {
        if (obj == "Page") {
            THIS.pageElem.reload();
            THIS.next();
        } else if (THIS.pageElem.objs[obj]) {
            var curObj = THIS.pageElem.objs[obj];
            curObj.left = curObj.initLeft;
            curObj.top = curObj.initTop;
            curObj.height = curObj.initHeight;
            curObj.width = curObj.initWidth;
            curObj.vis = curObj.initVis;
            if (THIS.pageElem.activeClones > 0) {
                for (var i = 1; i <= THIS.pageElem.activeClones; i++) {
                    var curClone = THIS.pageElem.objs[obj + "_clone_" + i];
                    if (curClone) {
                        delete curClone;
                        var cloneInKey = false;
                        for (var ii = 0; ii < THIS.pageElem.objKey.length; ii++) {
                            if (THIS.pageElem.objKey[ii] == obj + "_clone_" + i) {
                                cloneInKey = ii;
                            }
                        }
                        if (cloneInKey) {
                            THIS.pageElem.objKey.splice(cloneInKey, 1);
                        }
                    }
                }
                THIS.pageElem.activeClones = 0;
            }
            THIS.pageElem.redraw();
            THIS.next();
        }
    }
    function playVideo(objLoc) {
        if (THIS.videoElem) {
            if (isFirefox && isMac) {
                THIS.videoElem.Stop();
            } else {
                THIS.videoElem.pause();
            }
            window.clearInterval(playCheck);
        }
        if (objLoc.vis == 'hidden') {
            objLoc.vis = 'visible';
            objLoc.elem.style.visibility = objLoc.vis;
        }
        THIS.videoElem = objLoc.elem;

        var exit = false;

        if (isPad) {
            THIS.videoElem.controls = true;
            if (isAndroid) {
                $("#" + THIS.videoElem.id).css({"top": 0, "left": 0, "height": "100%", "width": "100%"});
                THIS.pageElem.CAN.width = THIS.pageElem.CAN.width;
                if (isFirefox && isMac) {
                    THIS.videoElem.SetTime(0);
                    THIS.videoElem.Play();
                } else {
                    THIS.videoElem.currentTime = 0;
                    THIS.videoElem.play();
                }
            }
        } else {
            if (isFirefox && isMac) {
                THIS.videoElem.SetTime(0);
                THIS.videoElem.Play();
            } else {
                THIS.videoElem.currentTime = 0;
                THIS.videoElem.play();
            }
        }

        THIS.listArr.push(['wait','time','silence']);

        if (isFirefox && isMac) {
            THIS.next();
        } else {
            var playFunc = function () {
                objLoc.elem.removeEventListener('playing', playFunc);
                THIS.next();
            }
            objLoc.elem.addEventListener('playing', playFunc, false);
        }
        var endFunc = function () {
            objLoc.elem.removeEventListener('ended', endFunc);
            window.clearInterval(THIS.videoRefresh);
            if (isFirefox && isMac) {
                THIS.videoElem.SetTime(0)
            } else {
                THIS.videoElem.currentTime = 0;
            }
            THIS.pageElem.redraw();
            THIS.videoElem = false;
            if (THIS.openWait == true) {
                window.clearTimeout(THIS.openWait);
                THIS.openWait = false;
                THIS.next();
            }
        }
        objLoc.elem.addEventListener('ended', endFunc, false);
    }
    function animateObject(sentObj, animName) {
        sentObj.vis = "show";
        var animObj = sentObj.anim;
        var animAct = animObj[animName];
        THIS.openAnim = animName;
        animObj.AT = 1;
        var animSel = this;
        animObj.active = animName;
        THIS.pageElem.change = true;
        this.end = function () {
            window.clearInterval(THIS.animInterval);
            window.clearTimeout(THIS.animTimeout);
            animObj.AT = animAct.data.length - 1;
            THIS.pageElem.redraw();
            animObj.AT = false;
            THIS.next();
        }
        if (animAct) {
            THIS.animInterval = window.setInterval(function () {
                if (animObj.AT >= animAct.data.length - 1) {
                    animSel.end();
                } else {
                    animObj.AT++;
                    THIS.pageElem.redraw();
                }
            }, 40);
            THIS.animTimeout = window.setTimeout(function () {
                animSel.end();
            }, animAct.data.length * 40);
        } else {
            console.error("Animation '" + animName + "' was not able to play on object");
            console.error(animObj);
        }
    }
    function animateGraphic(animTargArr) {
    }
    function playSound(soundElem,highlightObj) {
        if (soundElem == book.sprite.name) {
            if (highlightObj) {
                highlightObj.start();
            }       else    {
                THIS.next();
            }
        }       else    {
            if (spriteKey) {
                window.clearInterval(book.sprite.endCheck);
                window.clearInterval(book.sprite.startCheck);
                //var soundElem = soundElem.replace(/ /g, '');
                var locInKey = spriteKey['page' + THIS.pageElem.ident];
                if (locInKey && locInKey[soundElem]) {
                    book.sprite.name = soundElem;
                    book.sprite.loc = locInKey;
                    book.sprite.audStart = parseFloat(locInKey[soundElem].start);
                    book.sprite.audStart -= 0.15;
                    book.sprite.currentTime = book.sprite.audStart;
                    book.sprite.audEnd = locInKey[soundElem].end;
                    //var revertVol = book.sprite.volume;
                    book.sprite.volume = 0;
                    var startTime = book.sprite.currentTime;
                    book.sprite.play();
                    book.sprite.volSet = window.setTimeout(function () {
                        //book.sprite.volume = revertVol;
                    }, 1);
                    /*
                       console.clear();
                       console.info('start ' + startTime);
                       console.info('cur ' + book.sprite.currentTime);
                       console.info(book.sprite.currentTime-startTime);
                       */
                    book.sprite.volume = 1;

                    book.sprite.startCheck = window.setInterval(function () {
                        if (book.sprite.currentTime > book.sprite.audStart) {
                            window.clearInterval(book.sprite.startCheck);
                            if (highlightObj) {
                                highlightObj.start();
                                if (highlightObj.sequenceBlocking) {
                                    // wait for highlighter to finish before continuing sequence
                                }       else    {
                                    THIS.next();
                                }
                            }       else    {
                                THIS.next();
                            }
                        }
                    }, 50);
                    book.sprite.endCheck = window.setInterval(function () {
                        if (book.sprite.currentTime > book.sprite.audEnd + 0.500) {
                            book.sprite.pause();
                            window.clearInterval(book.sprite.endCheck);
                            book.sprite.endCheck = false;
                            book.sprite.name = false;
                            book.sprite.loc = false;
                            if (THIS.parentHighlight && THIS.pageElem.objs[THIS.parentHighlight].waitForAudio) {
                                THIS.pageElem.objs[THIS.parentHighlight].parentMarker = 0;
                                THIS.parentHighlight = false;
                                //THIS.pageElem.redraw();
                            }
                            if (book.sprite.waitingForSilence) {
                                //book.sprite.currentTime = locInKey.start;
                                book.sprite.pause();
                                book.sprite.waitingForSilence = false;
                                THIS.next();
                            } else if (THIS.listNum >= THIS.listArr.length) {
                                THIS.clear();
                            }
                        }
                    }, 200);
                } else {
                    console.error("Cannot find sound " + soundElem);
                    if (highlightObj) {
                        highlightObj.start();
                    }       else    {
                        THIS.next();
                    }
                }
            } else {
                THIS.openAudio = THIS.pageElem.auds[soundElem].elem;
                if (THIS.openAudio) {
                    THIS.openAudio.currentTime = 0;
                    THIS.openAudio.play();
                    THIS.openAudio.addEventListener('ended', function () {
                        THIS.openAudio = false;
                        if (THIS.openWait) {
                            window.clearTimeout(THIS.openWait);
                            THIS.openWait = false;
                            THIS.next();
                        }
                    });
                    if (highlightObj) {
                        highlightObj.start();
                    }   else    {
                        THIS.next();
                    }
                }       else    {
                    THIS.next();
                }
            }
        }
    }
    function wait(timeTarg) {
        if (timeTarg == "silence") {
            // Add event listener if audio is playing, next in list if no audio is playing
            if (spriteKey) {
                if (book.sprite.endCheck || THIS.videoElem) {
                    book.sprite.waitingForSilence = true;
                    THIS.openWait = true;
                } else {
                    if (!THIS.openWait) {
                        THIS.next();
                    }
                }
            } else {
                if (THIS.openAudio) {
                    THIS.openWait = true;
                } else {
                    THIS.next();
                }
            }

        } else {
            THIS.openWait = window.setTimeout(function () {
                window.clearTimeout(THIS.openWait);
                THIS.openWait = false;
                THIS.next();
            }, parseFloat(timeTarg) * 1000);
        }
    }
    function showHide(objTarg, gotoNext) {
        THIS.pageElem.change = true;
        var objAct = THIS.pageElem.objs[objTarg[2]];
        objAct.vis = objTarg[1];
        THIS.pageElem.redraw();
        if (gotoNext) {
            THIS.next();
        }
    }
    function gotoPage(pageTarg) {
        var targ = parseFloat(pageTarg);
        if (isNaN(targ)) {
            if (pageTarg.toLowerCase() == 'next') {
                if (curPage < bookLength) {
                    nextStr();
                } else {
                    gotoChange(false, 1);
                }
                THIS.clear();
            } else if (pageTarg.toLowerCase() == 'previous') {
                if (curPage > 1) {
                    prevStr();
                } else {
                    if (!singlePage && isEven(bookLength)) {
                        gotoChange(false, bookLength + 1);
                    } else {
                        gotoChange(false, bookLength);
                    }
                }
                THIS.clear();
            } else {
                console.error("ERROR - Unknown page targ of " + pageTarg);
            }
        } else {
            if (targ > bookLength) {
                return false;
            } else if (targ <= 0) {
                return false;
            } else {
                gotoChange(false, targ);
            }
        }
    }
    function same_tab(url, blocked) {
        if (blocked) {
            if (confirm("Author designed pop-up has been blocked! Either click CANCEL and go to " + url + " manually, or click OK to navigate off this page. CAREFUL! You might loose your place!")) {
                window.location = url;
            }
        } else {
            window.location = url;
        }
    }
    function new_tab(url) {
        var win = window.open(url, '_blank');
        if (win == undefined) {
            new_window(url);
        } else {
            win.focus();
        }
        ;
    }
    function new_window(url) {
        newwindow = window.open(url, 'name', 'height=page.x,width=page.y');
        if (newwindow == undefined) {
            same_tab(url, true);
        } else {
            if (window.focus) {
                newwindow.focus()
            }
            return false;
        }
    }
    this.start = function sequenceStart() {
        this.next();
    }
}

</script>
		<script>function loader(placement) {
    var THIS = this;
    this.loadTimes = [];
    this.averageLoadTime = 0;
    this.done = 0;
    this.steps = false;
    this.canDim = [114,290];
    this.canTopMax = this.canDim[0];
    this.contID = placement;
    placement.innerHTML = 
'<div id=loadContVertCenter>' + 
    '<div id=loadCont>' + 
        '<canvas id="load-water" height=' + this.canDim[0] + ' width=' + this.canDim[1] + '></canvas>' + 
        '<img id="load-seethrough" src =""></img>' + 
    '</div>' + 
    '<p id=loadText>0%</p>' + 
'</div>';
    this.loadText = document.getElementById('loadText');
    this.can = document.getElementById('load-water');
    $(this.can).css("visibility","hidden");
    this.img = document.getElementById('load-seethrough');
    this.img.src = dependenciesLoc + '/presets/orangerulepub.png';
    $(this.img).load(function() {
        $(THIS.can).css("visibility","visible");
    });
    this.ctx = this.can.getContext('2d');
    this.ctx.fillStyle = 'RGB(255,102,51)';
    // fillRect(left,top,right,bottom)
    this.ctx.fillRect(0,50,this.canDim[1],this.canDim[0]);
    this.averageLoads = function() {
        var average = 0;
        for (var i = 0; i < this.loadTimes.length; i++) {
            average += this.loadTimes[i];
        }
        average /= this.loadTimes.length;
        this.averageLoadTime = average;
    }
    this.update = function(at,total) {
        if (!this.loadTimes.length) {
            this.steps = total;
            this.jump = parseInt(this.canDim[0]/total);
        }
        this.done = at/total;

        this.canTopMax -= this.jump;
        this.newLoad = new Date();
        this.betweenTimes = this.newLoad.getTime()-this.lastLoad.getTime();
        this.loadTimes.push(this.betweenTimes);
        this.averageLoads();
        this.lastLoad = this.newLoad;
        this.smoothMax = Math.floor(this.averageLoadTime/this.redrawTime);
        this.smoothAt = 0;


        bufArr[key + 'at'] = 0;

        if (at >= total) {
            window.clearInterval(this.redraw);
            this.loadText.innerHTML = '100%';
            this.ctx.fillRect(0,0,this.canDim[1],this.canDim[0]);
        }


    }
    this.clear = function() {
        this.ctx.clearRect(0,0,this.canDim[1],this.canDim[0]);
    }
    this.draw = function() {
        var smooth = Math.min((parseInt(100*(this.smoothAt/this.smoothMax)))/100,1);
        var smoothTop = Math.max(this.canTopMax-(smooth*this.jump),0)
        this.ctx.fillRect(0,smoothTop,this.canDim[1],this.canDim[0]);
        var percentage = Math.min(100,parseInt(((this.canDim[0]-smoothTop)/this.canDim[0])*100)) || 0;
        this.loadText.innerHTML = percentage + "%";
    }
    this.kill = function() {
        window.clearInterval(this.redraw);
        this.contID.innerHTML = '';
    }
    this.waveAt = 0;
    this.redrawTime = 10;
    this.smoothMax = 0;
    this.smoothAt = 0;
    this.redraw = window.setInterval(function() {
        THIS.smoothAt++;
        THIS.clear();
        THIS.draw();
    },this.redrawTime);
    this.lastLoad = new Date();
}
function spinner(placement) {
    var THIS = this;
    this.contID = placement;
    placement.innerHTML = 
'<div id=loadContVertCenter>' + 
    '<div id=loadCont>' + 
        '<img class="load-spinner" src =' + dependenciesLoc + 'presets/spinner.png></img>' + 
    '</div>' + 
'</div>';
    this.spinner = this.contID.getElementsByClassName('load-spinner')[0];
    this.kill = function() {
        this.contID.innerHTML = '';
    }
}
</script>
		<script>var mxVel = ["", "", "", "", "", ""];
var mxVelOverride = false;
var mxVelOverrideTimeout;
var viewVelocity = false;
var startX = 0;
var origX = 0;
var pageDir = false;
var pageAnimAt = false;
var pageAnimInt = false;
var curDrag = false;
var lastDragPos = [];
var lastDragPage = false;
var scrollOffsets = [0, 0];
var vertCenteredOffset = 0;
var mxStr, myStr;
var lineStartPos = [];
var lineFrom = false;
var lastLinePage = false;
var mMode = false;  // nav, down, line, draw-pencil, draw-pen, draw-high, draw-erase
var absPos = [0, 0];
var drawCTX = false;
var lineCTX = false;
var drawingPoints = [];
var workspaceNukeWarningTimeout = false;
var workspaceNukeCountdown = false;
var startTime, firstMoveTime = false, lastMoveTime, endTime, prevStr, nextStr;
var clickInCont = false;
var buttonHoverName = false;

function animPlate(mod) {
    var animTime = 300;
    plateHeight = mod;
    var arrows = function (dir) {
        var mod = 0;
        if (dir == 'down') {
            mod = 90;
        }
        var step = 0;
        var stepInt = window.setInterval(function () {
            step++;
            if (step > 45) {
                window.clearInterval(stepInt);
            } else {
                var leftVal = "rotate(" + (mod + (45 + (2 * step))) + "deg)";
                var rightVal = "rotate(" + (mod + (-45 - (2 * step))) + "deg)";
                $("#arrowStickLeft").css({"transform": leftVal, "-webkit-transform": leftVal, "-moz-transform": leftVal, "-o-transform": leftVal});
                $("#arrowStickRight").css({"transform": rightVal, "-webkit-transform": rightVal, "-moz-transform": rightVal, "-o-transform": rightVal});
                if (dir == 'down') {
                    $(".arrowStick").css({"background-color": "RGB(20," + (3 * step) + ",20)"});
                } else {
                    $(".arrowStick").css({"background-color": "RGB(20," + (135 - (3 * step)) + ",20)"});
                }
            }
        }, animTime / 45);
    }
    if (mod == 'half' || mod == 'full') {
        $("#bookDisabled").css("width", "100%");
        $("#bookDisabled").animate({"opacity": 0.3}, animTime / 2);
        if (mod == 'half') {
            arrows('up');
            $(plateCont).animate({"height": 150}, animTime);
        } else if (mod == 'full') {
            $(plateCont).animate({"height": 300}, animTime);
        }
    } else if (mod == 'close') {
        arrows('down');
        $(plateCont).animate({"height": 50}, animTime);
        $("#bookDisabled").animate({"opacity": 0.3}, animTime);
        window.setTimeout(function () {
            $("#bookDisabled").css("width", "0");
        }, animTime);
    } else {
        console.error('unknown mod ' + mod);
    }
}

$(window).resize(function () {
    loginOverflow(window.innerHeight, window.innerWidth);
    if (!isPad) {
        vertCenterBook();
    }
    bookOffsets = $("#bookC").offset();
});
function centerOfPoly(poly) {
    var containingRect = [maxDim[0], maxDim[1], 0, 0];
    if (pDisplay == 'BlockSpread') {
        containingRect[1] *= 2;
    }
    for (var i = 0; i < poly.length; i++) {
        var curX = (poly[i].x);
        var curY = (poly[i].y);
        if (curY < containingRect[0]) {
            containingRect[0] = curY;
        }
        if (curX < containingRect[1]) {
            containingRect[1] = curX;
        }
        if (curY > containingRect[2]) {
            containingRect[2] = curY;
        }
        if (curX > containingRect[3]) {
            containingRect[3] = curX;
        }
    }
    var centerY = (containingRect[2] - containingRect[0]) / 2 + containingRect[0];
    var centerX = (containingRect[3] - containingRect[1]) / 2 + containingRect[1];
    return [centerY, centerX];
}
function debug() {
    viewVelocity = true;
    return "Debugging!";
}
function addUserControl() {
    // ipad speeds

    // Check for tablet first, because it could be chrome on a pad
    if (isPad) {
        mxStr = "pageX";
        myStr = "pageY";
    } else if (isChrome) {
        mxStr = "x";
        myStr = "y";
    } else {
        mxStr = "clientX";
        myStr = "clientY";
    }
    var selectFnc = function (event) {
        if (event) {
            if (pDisplay == 'Single') {
                return book[curPage - 1];
            } else if (pDisplay == 'SingleSpread') {
                var mX = (event[mxStr] || event.changedTouches[0].pageX) + scrollOffsets[1] - bookOffsets.left;
                if (curPage == 1) {
                    if (mX > pUnit / 2 && mX < (pUnit / 2) + pUnit) {
                        return book[0];
                    }
                } else if (curPage == book.length+1) {
                    if (mX > pUnit / 2 && mX < (pUnit / 2) + pUnit) {
                        return book[book.length-1];
                    }
                } else {
                    if (mX < pUnit) {
                        // page on left
                        return book[curPage - 2];
                    } else {
                        // page on right
                        return book[curPage - 1];
                    }
                }
            } else if (pDisplay == 'BlockSpread') {
                return book[curPage - 1];
            }
        } else {
            return false;
        }
    }
    // working on ipads
    var downFnc = function (event) {
        if (mMode && !book.dialog.open) {
            var pos;
            if (isPad) {
                pos = [event.touches[0][mxStr], event.touches[0][myStr]];
            } else {
                pos = [event[mxStr] + scrollOffsets[1], event[myStr] + scrollOffsets[0] - vertCenteredOffset];
            }
            var page = selectFnc(event);
            event.preventDefault();
            var noDrop = false;
            if (curSequence) {
                curSequence.clear();
            }
            if (page) {
                if (book.drawingTools.cur == 'nuke') {
                    actionCheck(page, pos[0], pos[1], false, false, true);
                } else if (dragCheck(page, pos[0], pos[1], true)) {
                    hoverMouse('grabbing');
                    mMode = "down";
                } else {
                    var lineHit = false;
                    var relPos = offsetCalc(page, pos[0], pos[1]);
                    var pt = {x: relPos[0], y: relPos[1]};
                    for (var i = 0; i < page.lineStarts.length; i++) {
                        var curLineStart = page.lineStarts[i];
                        var poly = curLineStart.pts;
                        if (pointInPoly(poly, pt)) {
                            lineHit = curLineStart;
                            i = page.lineStarts.length;
                        }
                    }
                    if (lineHit) {
                        lineFrom = lineHit.name;
                        if (lineHit.lineDraw == "Single") {
                            var dupLine = page.linesOnPage[lineFrom];
                            if (dupLine) {
                                delete page.linesOnPage[lineFrom];
                                page.redraw();
                            }
                        }
                        lastLinePage = page;
                        mMode = 'line';
                        lineCTX = page.CAN.getContext('2d');
                        lineCTX.beginPath();
                        lineStartPos = [relPos[0] * resMult, relPos[1] * resMult];
                        hoverMouse("crosshair");
                        mMode = "line";
                    } else {
                        startX = toBookPercent(event);
                        origX = startX;
                        if (mMode != "line") {
                            mMode = "down";
                        }
                    }
                }
            }
        }
    }
    // working on ipads (slowly)
    var moveFnc = function (event) {
        clearNuke();
        if (mMode) {
            var pos;
            if (isPad) {
                pos = [event.touches[0][mxStr], event.touches[0][myStr]];
            } else {
                pos = [event[mxStr] + scrollOffsets[1], event[myStr] + scrollOffsets[0] - vertCenteredOffset];
            }
            event.preventDefault();
            var page = selectFnc(event);
            absPos = offsetCalc(page, pos[0], pos[1]);
            mxVelPop(pos[0]);
            if (!pageAnimInt) {
                if (mMode == "down") {
                    if (!page) {
                        leaveFnc();
                    } else if (book.drawingTools.cur) {
                        actionCheck(page, pos[0], pos[1], false, false, true);
                    } else if (curDrag) {
                        if (page == lastDragPage) {
                            dragObj(curDrag[0], curDrag[1], offsetCalc(page, pos[0], pos[1]), page, curDrag[2]);
                        } else {
                            dragEnd();
                        }
                    } else if (bookLength != 1) {
                        uDrag(toBookPercent(event));
                    }
                } else if (mMode == 'nav') {
                    if (book.dialog.open) {
                        if (book.dialog.dragging) {
                            var dragLoc = [pos[1]-38-book.dialog.dragOffsets[1],pos[0]-bookOffsets.left-book.dialog.dragOffsets[0]-scrollOffsets[1]];
                            var leftBound = 0;
                            var rightBound = (maxDim[1]*2) - book.dialog.dragging.width - 16;
                            var topBound = 0;
                            var bottomBound = maxDim[0] - book.dialog.dragging.height - 40;
                            if (dragLoc[1] > leftBound && dragLoc[1] < rightBound && dragLoc[0] > topBound && dragLoc[0] < bottomBound) {
                                $(book.dialog.dragging.dialogWin).css({
                                    'top':dragLoc[0],
                                    'left':dragLoc[1],
                                });
                            }   else    {
                                book.dialog.dragging = false;
                            }
                        }
                    }   else    {
                        // Check if mouse is above a drag area first
                        if (book.drawingTools.cur) {
                            actionCheck(page, pos[0], pos[1], true, false, true);
                        } else if (lastDragPos[0]) {
                            hoverMouse('grabbing');
                        } else if (dragCheck(page, pos[0], pos[1], false)) {
                            hoverMouse('grab');
                            // Check if mouse is above link second (all links below drags)
                        } else {
                            actionCheck(page, pos[0], pos[1], true);
                        }
                    }
                } else if (mMode == 'line') {
                    if (lastLinePage == page) {
                        drawLine(page, pos);
                        actionCheck(page, pos[0], pos[1], true);
                    } else {
                        lineDeny(false);
                    }
                }
                if (page && page.objMovement) {
                    page.redraw();
                }
            } else {
                leaveFnc();
            }
        }
    }
    // working on ipads
    var upFnc = function (event) {
        clearNuke();
        // if user is turning the page
        if (pageDir) {
            if (!pageAnimInt && mMode == "down") {
                mMode = "nav";
                hoverMouse(false);
                uDragStop();
            }
        } else {
            if (!pageAnimInt) {
                if (mMode != 'nav') {
                    // page is not animating to an already dropped turn
                    var page, posX, posY;
                    if (isPad) {
                        var page = selectFnc(event);
                        var posX = event.changedTouches[0].pageX;
                        var posY = event.changedTouches[0].pageY;
                    } else {
                        var page = selectFnc(event);
                        var posX = event[mxStr];
                        var posY = event[myStr];
                    }
                    if (page && !pageDir) {
                        actionCheck(page, posX + scrollOffsets[1], posY + scrollOffsets[0] - vertCenteredOffset, false, curDrag);
                    }
                }       else    {
                    if (book.dialog.open) {
                        book.dialog.dragging = false;
                    }
                }
            }
        }
        if (book.drawingTools.cur) {
            endDrawing();
        }
        if (mMode == 'down') {
            mMode = "nav";
        }
        curDrag = false;
    }
    prevStr = function () {
        if (!pageAnimInt && !pageDir && curPage > 1 && !book.dialogUp) {
            if (curSequence) {
                curSequence.clear();
            }
            pageDir = 'left';
            startX = 0;
            setPageAnimInt(0, 'left', 'right');
            var prevTool = book.drawingTools[book.drawingTools.cur];
            book.drawingTools.cur = false;
            if (prevTool) {
                prevTool.hoverLeave();
                book.drawingTools.navigation.select();
            }
        }
    }
    nextStr = function () {
        if (!pageAnimInt && !pageDir && curPage < bookLength && !book.dialogUp) {
            if (curSequence) {
                curSequence.clear();
            }
            pageDir = 'right';
            startX = 1;
            setPageAnimInt(1, 'right', 'left');
            var prevTool = book.drawingTools[book.drawingTools.cur];
            book.drawingTools.cur = false;
            if (prevTool) {
                prevTool.hoverLeave();
                book.drawingTools.navigation.select();
            }
        }
    }
    var closeGoto = function () {
    }
    $(window).blur(function () {
        if (curSequence) {
            curSequence.clear();
        }
    });
    var prev = $("#prev");
    var next = $("#next");
    var gutterPrev = $("#gutterPrev");
    var gutterNext = $("#gutterNext");
    window.setTimeout(function () {
        book.loader.kill();
        delete book.loader;
        $("#shade").css("height", "0");
        if (isPad) {
            window.setTimeout(function () {
                /*
                   $(".gutter").animate({'opacity':1},500);
                   window.setTimeout(function() {$(".gutterImage").css({'display':'block'})},800);
                   window.setTimeout(function() {$(".gutterImage").css({'display':'none'})},1200);
                   window.setTimeout(function() {$(".gutterImage").css({'display':'block'})},1600);
                   window.setTimeout(function() {$(".gutterImage").css({'display':'none'})},2000);
                   window.setTimeout(function() {$(".gutter").animate({'opacity':0},500);},2000);
                   */
            }, 200);
            window.setTimeout(function () {
                var leftGutter = $("#leftGutter");
                var rightGutter = $("#rightGutter");
                rightGutter[0].addEventListener("touchend", nextStr);
                leftGutter[0].addEventListener("touchend", prevStr);

                bookC.addEventListener("touchstart", downFnc);
                bookC.addEventListener("touchmove", moveFnc);
                bookC.addEventListener("touchend", upFnc);
                next[0].addEventListener("touchend", nextStr);
                prev[0].addEventListener("touchend", prevStr);
                gutterNext[0].addEventListener("touchend", nextStr);
                gutterPrev[0].addEventListener("touchend", prevStr);
            }, 250);
        } else {
            // clicking outside of login container will exit login container
            var exitLogin = function() {
                if (clickInCont) {
                    clickInCont = false;
                }       else    {
                    book.login.close();
                }
            }
            var noExit = function() {
                clickInCont = true;
            }
            document.body.addEventListener('mousedown',exitLogin);
            document.getElementById('loginCont').addEventListener('mousedown',noExit);


            bookC.addEventListener("mousedown", downFnc);
            bookC.addEventListener("mousemove", moveFnc);
            $(bookC).mouseleave(function () {
                leaveFnc();
            });
            bookC.addEventListener("mouseup", upFnc);
            prev.mouseenter(function () {
                if (curPage > 1) {
                    hoverMouse("hand");
                }
            });
            prev.mouseleave(function () {
                hoverMouse(false)
            });
            next.mouseenter(function () {
                if (curPage < bookLength) {
                    hoverMouse("hand")
                }
            });
            next.mouseleave(function () {
                hoverMouse(false)
            });
            gutterPrev.mouseenter(function () {
                if (curPage > 1) {
                    hoverMouse("hand");
                    gutterPrev.addClass('VCcenteractive')
                }
            });
            gutterPrev.mouseleave(function () {
                hoverMouse(false);
                gutterPrev.removeClass('VCcenteractive')
            });
            gutterNext.mouseenter(function () {
                if (curPage < bookLength) {
                    hoverMouse("hand");
                    gutterNext.addClass('VCcenteractive')
                }
            });
            gutterNext.mouseleave(function () {
                hoverMouse(false);
                gutterNext.removeClass('VCcenteractive')
            })
            prev[0].addEventListener("mousedown", prevStr);
            next[0].addEventListener("mousedown", nextStr);
            gutterPrev[0].addEventListener("mousedown", prevStr);
            gutterNext[0].addEventListener("mousedown", nextStr);
            $(window).scroll(function () {
                scrollOffsets = [];
                scrollOffsets.push($(window).scrollTop());
                scrollOffsets.push($(window).scrollLeft());
                loginOverflow(window.innerHeight, window.innerWidth);
            });
        }
    }, 1);
    checkOpenPageLinks();
    checkDrawingTools();
    mMode = 'nav';
}


function loginOverflow(height,width) {
    if (height < (bookHeight+(2*book.login.dimensions[0])) && width < (bookWidth+(2*book.login.dimensions[1]))) {
        console.log(height,width);
        $("#loginCont").css({"display":"none"});
    }   else    {
        $("#loginCont").css({"display":"block"});
    }
}
function draw(pos, workspace) {
    var page = workspace.elem;
    var choiceName = book.drawingTools.cur;
    var choiceLoc = book.drawingTools[choiceName];
    var toolChoices = false;
    if (choiceLoc) {
        toolChoices = choiceLoc.subValues;
    }
    var curColor = $('.colorSquare')[toolChoices.color].style.backgroundColor;

    var cap = 'round';
    if (toolChoices.shape && toolChoices.shape == 'square') {
        cap = 'square';
    }
    if (choiceName !== 'nuke') {
        if (!drawCTX) {
            drawCTX = page.getContext('2d');
            drawingPoints.push(pos);
        } else {
            workspace.redraw();
            book.drawingTools.curPage = workspace.pageIdent;
            book.drawingTools.curSpace = workspace.name;
            drawCTX.beginPath();
            if (choiceName == 'eraser') {
                drawCTX.globalCompositeOperation = 'destination-out';
            } else {
                drawCTX.globalCompositeOperation = 'source-over';
                drawCTX.strokeStyle = "RGBA(" + curColor.substring(4, curColor.length - 1) + ", " + (toolChoices.opacity);
            }

            var lineWidth = Math.max(1, toolChoices.thickness / 2)
                drawCTX.lineWidth = lineWidth;
            drawCTX.lineJoin = cap;
            drawCTX.lineCap = cap;
            drawCTX.moveTo(drawingPoints[0][0], drawingPoints[0][1]);
            drawingPoints.push(pos);
            for (var i = 1; i < drawingPoints.length; i++) {
                var point = drawingPoints[i];
                drawCTX.lineTo(point[0], point[1]);
            }
            drawCTX.stroke();
        }
    }
}
function endDrawing() {
    if (drawingPoints.length > 0) {
        var curTool = book.drawingTools.cur;
        var toolChoices = book.drawingTools[curTool].subValues;
        var curColor = $('.colorSquare')[toolChoices.color].style.backgroundColor;

        var newDrawing = {};
        newDrawing.points = drawingPoints;
        newDrawing.thickness = Math.max(1, toolChoices.thickness / 2);
        var cap = 'round';
        if (toolChoices.shape == 'square') {
            cap = 'square'
        } else if (toolChoices.shape == 'butt') {
            cap = 'butt';
        }
        newDrawing.shape = cap;
        newDrawing.color = "RGBA(" + curColor.substring(4, curColor.length - 1) + ", " + (toolChoices.opacity) + ")";
        newDrawing.type = curTool;
        book[book.drawingTools.curPage].workspaces[book.drawingTools.curSpace].drawingsOnWorkspace.push(newDrawing);
    }
    drawCTX = false;
    drawingPoints = [];
    book.drawingTools.curPage = false;
    book.drawingTools.curSpace = false;
    if (book.login.loggedIn) {book.login.saveToServer()};
}


function actionCheck(page, mX, mY, isHover, isDrag, isDraw) {
    if (page && page.loaded) {
        if (isDraw) {
            if (!isHover) {
            }
        }
        // turn off all buttons
        if (buttonHoverName) {
            var hoverButton = page.buttons[page.buttonKey[buttonHoverName]];
            hoverButton.off();
        }
        var pos = offsetCalc(page, mX, mY);
        //if (!isHover) {console.log(pos)}
        var pt = {};
        pt.x = pos[0];
        pt.y = pos[1];
        var hit = false;
        var actionArr = false;
        var workspaceHit = false;
        if (isDrag) {
            actionArr = page.drops;
        } else if (isDraw) {
            actionArr = [];
            for (var i = 0; i < page.workspaceKey.length; i++) {
                var curSpace = page.workspaces[page.workspaceKey[i]]
                    actionArr.push(curSpace);
            }
        } else {
            if (mMode == "line") {
                actionArr = page.lineEnds;
            } else {
                actionArr = page.clicks;
                if (actionArr.length) {
                    actionArr = actionArr.concat(page.buttons);
                }       else    {
                    actionArr = page.buttons;
                }
            }
        }
        for (var key = 0; key < actionArr.length; key++) {
            var poly = actionArr[key].pts;
            if (pointInPoly(poly, pt)) {
                if (isDraw) {
                    workspaceHit = page.workspaces[page.workspaceKey[key]];
                }
                var acceptFrom = actionArr[key].requires || 'any';
                if (acceptFrom == 'any') {
                    hit = key;
                    key = actionArr.length;
                } else {
                    if (isDrag) {
                        var dragSplit = isDrag[0].name.split("_");
                        var curName = isDrag[0].name;
                        if (dragSplit.length == 3 && dragSplit[1] == 'clone') {
                            curName = dragSplit[0];
                        }
                        if (curName.toString() == acceptFrom.toString()) {
                            hit = key;
                            key = actionArr.length;
                        }
                    } else if (mMode == 'line') {
                        if (isHover) {
                            hit = key;
                            key = actionArr.length;
                        } else {
                            if (acceptFrom == lineFrom) {
                                hit = key;
                                key = actionArr.length;
                            }
                        }
                    }
                }
            }
        }
        // if any click, and in sequence, clear sequence
        if (!isHover && curSequence) {
            curSequence.clear();
        }
        if (actionArr[hit]) {
            var buttonFlash = false;
            if (actionArr[hit].parentObj) {
                buttonFlash = actionArr[hit].parentObj.childFlash;
            }
            if (actionArr[hit].enabled) {
                if (isHover) {
                    if (mMode == 'line') {
                        hoverMouse("cell");
                    } else {
                        hoverMouse("hand");
                        if (actionArr[hit].linkType == 'button' && actionArr[hit].state == 'off' && !buttonFlash) {
                            buttonHoverName = actionArr[hit].name;
                            actionArr[hit].hover();
                        }
                    }
                } else {
                    // startFX(page,actionArr[hit].pts,pt)
                    if (actionArr[hit]) {
                        var targetsHit = actionArr[hit].targets;
                        var linkName = actionArr[hit].name;
                        if (mMode == 'line') {
                            pos[0] *= resMult;
                            pos[1] *= resMult;
                            mMode = "nav";
                            // linkName is the link accepting the line, NOT the link that started the line
                            lineAccept(page, lineStartPos, pos, lineFrom);
                        }
                        if (isDrag) {
                            var polyCenter = centerOfPoly(actionArr[hit].pts);
                            if (!isDrag[0].cloneID) {
                                isDrag[0].top = (polyCenter[0] * resMult) - (isDrag[0].height / 2);
                                isDrag[0].left = (polyCenter[1] * resMult) - (isDrag[0].width / 2);
                                page.redraw();
                                hoverMouse(false);
                            }
                        }
                        if (targetsHit || actionArr[hit].linkType == 'button') {
                            if (!curSequence) {
                                hoverMouse(false);
                                if (actionArr[hit].autoHighlight) {
                                    page.highlightedLink = actionArr[hit].pts;
                                }
                                if (actionArr[hit].linkType == 'button') {
                                    buttonHoverName = false;
                                    if (!buttonFlash) {
                                        if (actionArr[hit].state == 'on' && actionArr[hit].type == 'checkbox') {
                                            actionArr[hit].off();
                                        }   else    {
                                            page.toggleButtons(actionArr[hit].parentName,actionArr[hit].name);
                                            actionArr[hit].on();
                                            if (targetsHit) {
                                                curSequence = new sequence(targetsHit, page, linkName, pos);
                                            }
                                        }
                                    }
                                }       else    {
                                    curSequence = new sequence(targetsHit, page, linkName, pos);
                                }

                                if (curSequence) {
                                    curSequence.start();
                                }
                            }
                        }
                    }
                }
            } else {
                console.log("link not enabled");
            }
        } else {

            if (workspaceHit && book.drawingTools.cur) {
                if (isHover) {
                    hoverMouse('drawingTool');
                } else {
                    if (book.drawingTools.cur == 'nuke') {
                        clearWorkspace(workspaceHit);
                        hoverMouse('drawingTool');
                    } else {
                        draw(pos, workspaceHit);
                        hoverMouse('drawingTool');
                    }
                }
            } else {
                if (isHover) {
                    drawCTX = false;
                    drawingPoints = [];
                }
                if (mMode == 'line') {
                    lineDeny(isHover);
                } else {
                    hoverMouse(false);
                }
                if (isDrag) {
                    dragEnd(isDrag);
                }
            }
        }
        lastDragPos = false;
    } else {
        return "no page element selected";
    }
}
function clearWorkspace(space) {
    var clearTime = 600;
    var spaceCenter = [(space.top + (space.height / 2)), (space.left + (space.width / 2))];
    var spaceMaxDim = Math.min(spaceCenter[0], spaceCenter[1]);
    $("#nukeWarning").clearQueue();
    $("#nukeWarning").css({"visibility": "visibile", "background-color": "transparent", "opacity": 0.1, "height": 25, "width": 25, "top": spaceCenter[0] - (25 / 2), "left": spaceCenter[1] - (25 / 2)});
    $("#nukeWarning").animate({"background-color": "red", "opacity": 1, "height": spaceMaxDim, "width": spaceMaxDim, "top": spaceCenter[0] - (spaceMaxDim / 2), "left": spaceCenter[1] - (spaceMaxDim / 2)}, clearTime);
    workspaceNukeWarningTimeout = window.setTimeout(function () {
        space.reload();
        clearNuke();
        $("#clearInputLeft").trigger("click");
        hoverMouse("drawingTool")
    }, clearTime);
}
function clearNuke() {
    if (workspaceNukeWarningTimeout) {
        $("#nukeWarning").clearQueue();
        $("#nukeWarning").css({"visibility": "hidden"});
        window.clearTimeout(workspaceNukeWarningTimeout);
        workspaceNukeWarningTimeout = false;
    }
}
function drawLine(page, pos) {
    var x = pos[0];
    var y = pos[1];
    var pageOffsets = $(page.DIV).offset();
    x -= pageOffsets.left;
    y -= pageOffsets.top;
    y += vertCenteredOffset;
    x *= resMult;
    y *= resMult;
    page.redraw();
    lineCTX.beginPath();
    lineCTX.moveTo(lineStartPos[0], lineStartPos[1]);
    lineCTX.lineTo(x, y);
    lineCTX.stroke();
}
function lineAccept(pageElem, start, finish, name) {
    var curLine = pageElem.linesOnPage;
    curLine[name] = [];
    curLine[name].push(start);
    curLine[name].push(finish);
}
function lineDeny(isHover) {
    if (isHover) {
        hoverMouse('crosshair');
    } else {
        lastLinePage.redraw();
        lastLinePage = false;
        mMode = 'nav';
        lineFrom = false;
        lineStartPos = [];
        lineCTX = false;
        drawingPoints = [];
        hoverMouse(false);
    }
}
function addResMult(pos) {
    var returnPos = [];
    returnPos[0] = pos[0] * resMult;
    returnPos[1] = pos[1] * resMult;
    return returnPos;
}
function dragCheck(page, mX, mY, create) {
    var tmpReturn = false;
    if (page) {
        var pos = addResMult(offsetCalc(page, mX, mY));
        var objectDragging = false;
        // if this isn't the first page and (isn't the last page with an odd number of pages) or if it is (the relative mouse location is within the boundries of the page)
        function clickInRect(obj, pos) {
            // top, left, bottom, right
            var rect = [];
            rect.push(obj.top);
            rect.push(obj.left);
            rect.push((obj.top + obj.height));
            rect.push((obj.left + obj.width));
            if (pos[1] > rect[0] && pos[1] < rect[2] && pos[0] > rect[1] && pos[0] < rect[3]) {
                return true;
            } else {
                return false;
            }
        }
        var rectInArr = [];
        for (var i = 0; i < page.objKey.length; i++) {
            var tmpObj = page.objs[page.objKey[i]];
            if (clickInRect(tmpObj, pos) && tmpObj.vis == 'show' && tmpObj.mobility && !tmpObj.animating) {
                rectInArr.push([tmpObj.page, tmpObj.layer, tmpObj.name, i]);
            }
        }
        // sort by layer
        rectInArr.sort(function (a, b) {
            return b[1] - a[1];
        });
        // remember what's visible and what's not
        var resetVisArr = [];
        for (obj in page.objKey) {
            resetVisArr.push(page.objs[page.objKey[obj]].vis);
            ;
        }
        function hideAll() {
            for (obj in page.objKey) {
                page.objs[page.objKey[obj]].vis = 'hide';
            }
        }
        if (dragDropRect) {
            objectDragging = rectInArr[0] || false;
        } else {
            // turn on each pageent at a time.
            for (var i = 0; i < rectInArr.length; i++) {
                hideAll();
                page.objs[rectInArr[i][2]].vis = "show";
                page.redraw();
                var ctx = page.CAN.getContext('2d');
                var imgData = ctx.getImageData(pos[0], pos[1], 1, 1);
                if (imgData.data[3] == 255) {
                    objectDragging = rectInArr[i];
                    i = rectInArr.length;
                }
            }
            // Set all visible back to normal
            for (var i = 0; i < resetVisArr.length; i++) {
                page.objs[page.objKey[i]].vis = resetVisArr[i];
            }
            // Draw it on canvas
            page.redraw();
        }
        // lets see if we caught anything
        if (objectDragging) {
            tmpReturn = true;
            // CREATE CLONE or START DRAG only if peram is passed, i.e., click not hover
            if (create) {
                var dragObj = page.objs[objectDragging[2]];
                dragObj.dragging = true;
                var dragOffset = ["", ""];
                dragOffset[1] = dragObj.top - pos[1] + (dragObj.height / 2);
                dragOffset[0] = dragObj.left - pos[0] + (dragObj.width / 2);
                var objName = dragObj.name;
                if (mMode == "nav" && dragObj.mobility == "clone" && dragObj.cloneID == undefined) {
                    page.activeClones++;
                    var cloneNum = page.activeClones;
                    var tmpObj = {};
                    for (prop in dragObj) {
                        tmpObj[prop] = dragObj[prop];
                    }
                    var cloneName = objectDragging[2] + "_clone_" + cloneNum;
                    objName = cloneName;
                    page.objs[cloneName] = {}
                    page.objs[cloneName] = tmpObj;
                    page.objs[cloneName].cloneID = cloneNum;
                    page.objs[cloneName].name = cloneName;
                    page.objs[cloneName].mobility = "static";
                    page.objs[cloneName].layer = dragObj.layer + 1 + page.activeClones;
                    dragObj = page.objs[cloneName];
                    page.objKey.splice(objectDragging[3], 0, cloneName);
                }
                page.objs[objName].dropped = function () {
                    dragObj.dragging = false;
                    curDrag = false;
                    lastDragPage = false;
                    mMode = 'nav';
                    var objSelf = this;
                    this.animating = true;
                    var targTop = this.initTop;
                    var targLeft = this.initLeft;
                    var curTop = lastDragPos[0];
                    var curLeft = lastDragPos[1];
                    // interval repeat time;
                    var animSpeed = 10;
                    var animTopDif = curTop - targTop;
                    var animLeftDif = curLeft - targLeft;
                    // Time for animation to complete - interval time
                    var animLegCount = 20;
                    var animAt = 0;
                    if (curTop && curLeft) {
                        objSelf.dragAnim = window.setInterval(function () {
                            if (animAt < animLegCount) {
                                animAt++;
                                var percentDone = Math.abs((animAt / animLegCount) - 1);
                                objSelf.top = targTop + percentDone * animTopDif;
                                objSelf.left = targLeft + percentDone * animLeftDif;
                                page.redraw();
                                hoverMouse(false);
                            } else {
                                window.clearInterval(objSelf.dragAnim);
                                if (page.cloneID) {
                                    // this is not working dont know why
                                    delete page.objs[objSelf.name];
                                    for (key in page.objKey) {
                                        if (page.objKey[key] == objSelf.name) {
                                            page.objKey.splice(key, 1);
                                        }
                                    }
                                } else {
                                    objSelf.animating = false;
                                }
                            }
                        }, animSpeed);
                    }
                }
                if (page.objs[objName].dragAnim) {
                    window.clearInterval(page.objs[objName].dragAnim);
                }
                curDrag = [dragObj, pos, dragOffset];
                lastDragPage = page;
            }
        } else {
            curDrag = false;
        }
    } else {
        // console.log("Click not on page");
    }
    return tmpReturn;
}
function dragObj(obj, startPos, curPos, page, offset) {
    curPos = addResMult(curPos);
    obj.top = (curPos[1] - obj.height / 2) + offset[1];
    obj.left = (curPos[0] - obj.width / 2) + offset[0];
    lastDragPos = [obj.top, obj.left];
    hoverMouse("grabbing");
    page.redraw();
}
function dragEnd() {
    if (curDrag[0].initTop == curDrag[0].top && curDrag[0].initLeft == curDrag[0].left) {
        // drag has not yet started (only start on mouse move, mouse is down and has not moved)
    } else {
        curDrag[0].dropped();
        lastDragPos = false;
    }
}
function leaveFnc() {
    hoverMouse(false);
    if (book.drawingTools.cur) {
        mMode = 'nav';
        endDrawing();
    }   else    {
        if (mMode == 'down') {
            if (!pageAnimInt) {
                uDragStop();
            }
            if (curDrag) {
                dragEnd();
            }
            mMode = 'nav';
        } else if (mMode == 'line') {
            if (pDisplay == 'Single') {
                book[curPage - 1].redraw();
            } else if (pDisplay == 'SingleSpread') {
                book[curPage - 1].redraw();
                if (book[curPage]) {
                    book[curPage].redraw();
                }
            } else if (pDisplay == 'BlockSpread') {
            }
            lineDeny();
        }
    }
}
function offsetCalc(page, mX, mY) {
    if (page) {
        var blueLeftOffset = ((window.innerWidth - parseInt(main.style.width)) / 2);
        if (blueLeftOffset < 0) {
            blueLeftOffset = 0
        }
        var pageLeftOffset = (bookMarginLeft + parseInt(page.DIV.style.left));
        var jQuerryOffsetSub = blueLeftOffset + pageLeftOffset;

        // extra 10 for black border offset
        returnX = mX - jQuerryOffsetSub - 10;
        //returnX = mX - parseInt($(page.DIV).offset().left);
        //returnY = mY - parseInt($(page.DIV).offset().top);
        //

        returnY = mY - 38;

        return [returnX, returnY];
    } else {
        return false;
    }
}
function mxVelPop(mX) {
    mxVel.unshift(mX);
    mxVel.pop();
    /*
       mxVelOverride = false;
       window.clearTimeout(mxVelOverrideTimeout);
       mxVelOverrideTimeout = window.setTimeout(function(){mxVelOverride = true;},100);
       */
}
function mxVelCalc() {
    var dif = 0;
    for (i = 1; i < mxVel.length; i++) {
        if (typeof (mxVel[i]) == "number" && typeof (mxVel[i - 1]) == "number") {
            dif += mxVel[i] - mxVel[i - 1];
        }
    }
    return dif;
}
function toBookPercent(event) {
    var returnX = false;
    if (event) {
        if (isPad) {
            returnX = event.touches[0][mxStr];
        } else {
            returnX = event[mxStr];
        }
    } else {
        returnX = mxVel[0];
    }
    returnX -= bookOffsets.left;
    returnX = Math.round(100 * (returnX / pUnit / 2)) / 100;
    if (pDisplay == 'Single') {
        returnX *= 2;
    }
    return returnX;
}
function uDrag(curX) {
    if (pageDir) {
        if (pDisplay == 'Single') {
            turnSingle(pageDir, curX);
        } else if (pDisplay == 'SingleSpread') {
            turnSingleSpread(pageDir, curX);
        } else if (pDisplay == 'BlockSpread') {
            turnBlockSpread(pageDir, curX);
        }
    } else {
        if (origX > 0.5) {
            if (curX + 0.05 < origX && curPage <= (bookLength - 1)) {
                // avoid starting jolt
                startX -= 0.05;
                hoverMouse(false);
                if (pDisplay == 'Single') {
                    turnSingle("left", curX);
                } else if (pDisplay == 'SingleSpread') {
                    turnSingleSpread("left", curX);
                } else if (pDisplay == 'BlockSpread') {
                    turnBlockSpread("left", curX);
                }
                pageDir = "left";
            }
        } else {
            if (curX - 0.05 > origX && curPage > 1) {
                startX += 0.05;
                hoverMouse(false);
                if (pDisplay == 'Single') {
                    turnSingle("right", curX);
                } else if (pDisplay == 'SingleSpread') {
                    turnSingleSpread("right", curX);
                } else if (pDisplay == 'BlockSpread') {
                    turnBlockSpread("right", curX);
                }
                pageDir = "right";
            }
        }
    }
}
function uDragStop() {
    mMode = 'nav';
    lastX = toBookPercent();
    if (!pageAnimInt) {
        var vel = mxVelCalc();
        var turnVelocityThreshold = 50;
        /* dealing mostly with location of last drag, not direction of drag
           if (origX > 0.5) {
        // started from right
        if (lastX < 0.5 || vel > turnVelocityThreshold) {
        // IF there is a page to animate to.
        if (curPage < bookLength) {
        // ..turn left 90%, fast swipe right ending at 51% is a turn left, end RIGHT
        setPageAnimInt(lastX,"right","left");
        }	else if (!isEven(bookLength) && curPage == bookLength) {
        setPageAnimInt(lastX,"right","right",4);
        }
        }	else	{
        setPageAnimInt(lastX,"right","right");
        }
        }	else	{
        // started from left
        if (lastX > 0.5 ||  vel > turnVelocityThreshold) {
        // ended right
        if (curPage > 2) {
        setPageAnimInt(lastX,"left","right");
        }
        }	else	{
        // ended left
        setPageAnimInt(lastX,"left","left");
        }
        }
        */
        if (origX > 0.5) {
            // started from right
            if (vel > 0) {
                // ended left
                if (curPage < bookLength) {
                    setPageAnimInt(lastX, "right", "left");
                } else if (!isEven(bookLength) && curPage == bookLength) {
                    setPageAnimInt(lastX, "right", "right", 4);
                }
            } else {
                // ended right
                setPageAnimInt(lastX, "right", "right");
            }
        } else {
            // started from left
            if (vel > 0) {
                // ended left
                setPageAnimInt(lastX, "left", "left");
            } else {
                // ended right
                setPageAnimInt(lastX, "left", "right");
            }
        }
    }
}
function isEven(n) {
    return (n % 2 == 0);
}
function setPageAnimInt(lastX, start, end, speedNumMult) {
    if (!curDrag) {
        function clearAnim(pageManip) {
            window.clearInterval(pageAnimInt);
            if (pDisplay == 'SingleSpread') {
                pageManip *= 2
            }
            pageAnimInt = false;
            pageAnimAt = false;
            pageDir = false;
            curPage += pageManip;
            var end = bookLength - 1;
            var i = 0;
            if (curPage == 1) {
                i = 2;
            } else if (curPage > bookLength) {
                end--;
            }
            while (i < end) {
                if (book[i].change) {
                    book[i].change = false;
                    book[i].reload();
                }
                i++;
            }
            var page = Math.max(curPage - 5, 0);
            var endPage = Math.min(curPage + 5, bookLength);
            if (pDisplay != 'Single') {
                while (page < endPage) {
                    if (page !== curPage - 1 && page !== curPage - 2) {
                        $(book[page].DIV).css({"z-index": 1, "width": 0});
                    }
                    page++;
                }
            }
            if (pageManip != 0) {
                newBuffer();
                arrangePages();
                checkOpenPageLinks();
                if (pDisplay == 'Single' || pDisplay == 'BlockSpread') {
                    gotoAct.selectedIndex = curPage - 1;
                } else if (pDisplay == 'SingleSpread') {
                    gotoAct.selectedIndex = Math.ceil(curPage / 2) - 1;
                }
                setGotoCover();
            }
            mDown = false;
            mMode = 'nav';
            checkDrawingTools();
            book.drawingTools.cur = false;
            arrangePages();
        }
        var speedNum = 25;
        if (speedNumMult) {
            speedNum /= speedNumMult
        }
        var curRevert, curPageManip, pageAnimTarg;
        pageAnimAt = parseInt(lastX * speedNum);
        if (start == "right" && curPage < bookLength + 1) {
            if (end == "left") {
                pageAnimTarg = 0;
                pageAnimInt = window.setInterval(function () {
                    if (pageAnimAt > pageAnimTarg) {
                        pageAnimAt--;
                        if (pDisplay == 'Single') {
                            turnSingle("left", pageAnimAt / speedNum);
                        } else if (pDisplay == 'SingleSpread') {
                            turnSingleSpread("left", pageAnimAt / speedNum);
                        } else if (pDisplay == 'BlockSpread') {
                            turnBlockSpread('left', pageAnimAt / speedNum);
                        }
                    } else {
                        clearAnim(1);
                    }
                }, 15);
            } else if (end == "right") {
                pageAnimTarg = speedNum;
                pageAnimInt = window.setInterval(function () {
                    if (pageAnimAt < pageAnimTarg) {
                        pageAnimAt++;
                        if (pDisplay == 'Single') {
                            turnSingle("left", pageAnimAt / speedNum);
                        } else if (pDisplay == 'SingleSpread') {
                            turnSingleSpread("left", pageAnimAt / speedNum);
                        } else if (pDisplay == 'BlockSpread') {
                            turnBlockSpread('left', pageAnimAt / speedNum);
                        }
                    } else {
                        clearAnim(0);
                    }
                }, 15);
            }
        } else if (start == "left" && curPage > 1) {
            if (end == "left") {
                pageAnimTarg = 0;
                pageAnimInt = window.setInterval(function () {
                    if (pageAnimAt > pageAnimTarg) {
                        pageAnimAt--;
                        if (pDisplay == 'Single') {
                            turnSingle("right", pageAnimAt / speedNum);
                        } else if (pDisplay == 'SingleSpread') {
                            turnSingleSpread("right", pageAnimAt / speedNum);
                        } else if (pDisplay == 'BlockSpread') {
                            turnBlockSpread('right', pageAnimAt / speedNum);
                        }
                    } else {
                        clearAnim(0);
                    }
                }, 15);
            } else if (end == "right") {
                pageAnimTarg = speedNum;
                pageAnimInt = window.setInterval(function () {
                    if (pageAnimAt < pageAnimTarg) {
                        pageAnimAt++;
                        if (pDisplay == 'Single') {
                            turnSingle("right", pageAnimAt / speedNum);
                        } else if (pDisplay == 'SingleSpread') {
                            turnSingleSpread("right", pageAnimAt / speedNum);
                        } else if (pDisplay == 'BlockSpread') {
                            turnBlockSpread('right', pageAnimAt / speedNum);
                        }
                    } else {
                        clearAnim(-1);
                    }
                }, 15);
            }
        }
    }
}
function checkOpenPageLinks() {
    var tPage = Math.max(curPage - 2, 0);
    if (pDisplay == 'BlockSpread' || pDisplay == 'Single') {
        tPage = curPage-1;
    }   else if (isEven(bookLength) && curPage == bookLength) {
        tPage++;
    }
    var noneHit = true;
    while (tPage < curPage && book[tPage] && noneHit) {
        for (var i = 0; i < book[tPage].pageOpens.length; i++) {
            if (noneHit) {
                var linkHit = book[tPage].pageOpens[i];
                if (linkHit.action == "Open Page First Time" || linkHit.action == "Open Page") {
                    noneHit = false;
                    if (linkHit.targets) {
                        curSequence = new sequence(linkHit.targets, book[tPage], linkHit.name, [maxDim[0] / 2, maxDim[1] / 2]);
                        curSequence.start();
                    } else {
                        console.warn("open page link has no targets");
                    }
                    if (linkHit.action == "Open Page First Time") {
                        book[tPage].pageOpens.splice(i, i + 1);
                    }
                }
            }
        }
        tPage++;
    }
}
function turnSingle(direction, percent) {
    if (direction == "left") {
        pageSelectMod = 0;
        percent /= startX;
    } else if (direction == "right") {
        pageSelectMod = -1;
        if (percent < 1) {
            percent -= startX;
            percent *= (1 + startX);
        }
    }
    if (percent > 1) {
        percent = 1;
    } else if (percent < 0) {
        percent = 0;
    }


    var pUnitPlus = pUnit + 10;
    $(book[curPage - 1 + pageSelectMod].DIV).css({"left": (pUnitPlus * percent) - pUnitPlus});
    $(book[curPage + pageSelectMod].DIV).css({"left": ((pUnitPlus * percent) - pUnitPlus) + pUnitPlus});
}
function turnSingleSpread(direction, percent) {
    // set percent relative to start of click, NOT position on page.
    var tmpLeft = [];
    var tmpWidth = [];
    var tmpIndex = [];
    var pageSelectMod;
    if (direction == "left") {
        pageSelectMod = -1;
        percent /= startX;
    } else if (direction == "right") {
        pageSelectMod = -3;
        if (percent < 1) {
            percent -= startX;
            percent *= (1 + startX);
        }
    }
    if (percent > 1) {
        percent = 1;
    } else if (percent < 0) {
        percent = 0;
    }
    if ((direction == "left" && curPage == 1) || (direction == "right" && curPage == 3)) {
        // first page turnning left OR last page turnning right
        tmpLeft[0] = ((1 - percent) * pUnit * 2) + (pUnit / 2);
        if (tmpLeft[0] > pUnit) {
            tmpLeft[0] = pUnit
        }
        tmpLeft[2] = tmpLeft[0];
        tmpIndex[0] = 4;
        tmpIndex[1] = 3;
        tmpIndex[2] = 2;
        tmpWidth[0] = maxDim[1];
        tmpWidth[2] = maxDim[1];
        if (percent > 0.75) {
            tmpLeft[1] = tmpLeft[0];
            tmpWidth[1] = 0;
        } else {
            var stretch = percent * 1.33;
            tmpLeft[1] = stretch * pUnit * 2;
            tmpWidth[0] = (stretch - 0.5) * 2 * pUnit;
            tmpWidth[1] = (1 - stretch) * pUnit;
        }
        for (i = 0; i < 3; i++) {
            $(book[i].DIV).css({"width": parseInt(tmpWidth[i]), "left": tmpLeft[i], "z-index": tmpIndex[i]});
        }
    } else if ((direction == "left" && curPage + 1 < bookLength) || (direction == "right" && curPage <= bookLength)) {
        // ANY other normal page turn.
        tmpLeft[-1] = 0;
        tmpLeft[0] = pUnit;
        tmpLeft[1] = (2 * pUnit) * percent;
        tmpLeft[2] = pUnit;
        tmpIndex[-1] = 2;
        tmpIndex[0] = 4;
        tmpIndex[1] = 5;
        tmpIndex[2] = 3;
        tmpWidth[-1] = pUnit;
        tmpWidth[0] = pUnit * percent;
        tmpWidth[1] = (1 - percent) * pUnit;
        tmpWidth[2] = pUnit;
        for (i = -1; i < 3; i++) {
            var tmpPage = curPage + i + pageSelectMod;
            $(book[tmpPage].DIV).css({"width": tmpWidth[i], "left": tmpLeft[i], "z-index": tmpIndex[i]});
        }
    } else if ((direction == "left" && curPage + 1 == bookLength) || (direction == "right" && curPage == bookLength + 1)) {
        // LAST page turn anim-wrapper book center
        var stretch = (percent * 1.33) - 0.33;
        tmpLeft[-1] = 0;
        tmpLeft[0] = pUnit;
        tmpIndex[-1] = 2;
        tmpIndex[0] = 3;
        tmpIndex[1] = 4;
        tmpWidth[-1] = pUnit;
        if (percent > 0.25) {
            // first three quarteres should close the book
            tmpLeft[1] = (2 * pUnit) * stretch;
            tmpWidth[0] = pUnit * stretch;
            tmpWidth[1] = (1 - stretch) * pUnit;
        } else {
            // last quarter should shift right
            stretch = (4 * ((1 - percent) - 0.75));
            tmpLeft[1] = stretch * pUnit / 2;
            tmpWidth[-1] = 0;
            tmpWidth[0] = 0;
            tmpWidth[1] = pUnit;
        }
        for (i = -1; i < 2; i++) {
            var tmpPage = curPage + i + pageSelectMod;
            $(book[tmpPage].DIV).css({"width": tmpWidth[i], "left": tmpLeft[i], "z-index": tmpIndex[i]});
        }
    } else if (direction == "left" && !isEven(bookLength) && curPage == bookLength) {
        // odd number of pages in book, last page is a double, communicate that it is the last page
        tmpLeft[0] = 0;
        // Will pull the page 1/8th the way left before snapping back.
        // add left offset on book[1].DIV CHILD CANVAS!!!
        var snapInt = (pUnit * (percent - 1) / -8)
            tmpLeft[1] = pUnit - snapInt;
        tmpIndex[0] = 2;
        tmpIndex[1] = 3;
        tmpWidth[0] = pUnit;
        tmpWidth[1] = pUnit;
        for (i = 0; i < 2; i++) {
            var tmpPage = bookLength - 2 + i;
            $(book[tmpPage].DIV).css({"width": tmpWidth[i], "left": tmpLeft[i], "z-index": tmpIndex[i]});
        }
    }
}
function turnBlockSpread(direction, percent) {
    // change to [first page modified , last page modified] inside conditional, loop through at end.
    pageSelectMod = 0;
    if (direction == 'left') {
        percent /= startX;
    }   else if (direction == "right") {
        pageSelectMod = -1;
        if (percent < 1) {
            percent -= startX;
            percent *= (1 + startX);
        }
    }
    if (percent > 1) {
        percent = 1;
    } else if (percent < 0) {
        percent = 0;
    }
    if ((direction == 'left' && curPage == 1) || (direction == 'right' && curPage == 2)) {
        // first page turn
        var frontCover = book[0].DIV;
        var spreadLeft = book[1].DIV;
        var spreadRight = book[1].DUP;

        if (percent > 0.75) {
            var stretch = (percent-0.75)*4;
            var invert = Math.abs(stretch-1);
            $(frontCover).css({
                'width':pUnit,
                'left':pUnit/2 + ((pUnit/2)*invert),
                'z-index':1,
            });
            $(spreadRight).css({
                'display':'none'
            });
            $(spreadLeft).css({
                'display':'none'
            });
        }       else    {
            var stretch = percent * 1.33;
            var invert = Math.abs(stretch-1);
            var doubleTime = (stretch*2)-1;
            $(frontCover).css({
                'width':pUnit*doubleTime,
                'left':pUnit,
                'z-index':3,
            })
            $(spreadLeft).css({
                'width':pUnit*invert,
                'left':pUnit*2*stretch,
                'z-index':2,
                'display':'block'
            });
            $(spreadRight).css({
                'width':pUnit,
                'left':pUnit,
                'z-index':1,
                'display':'block'
            });
        }
    } else if ((direction == "left" && (curPage + 1 < bookLength || book.lastPageDouble)) || (direction == "right" && (curPage < bookLength || book.lastPageDouble))) {
        // normal page turn
        var invert = Math.abs(percent-1); // 0-1
        var currentPage = book[curPage-1+pageSelectMod].DIV;
        var nextPageLeft = book[curPage+pageSelectMod].DIV;
        var nextPageRight = book[curPage+pageSelectMod].DUP;
        $(currentPage).css({
            'width':pUnit*2*percent,
            'left':0,
            'z-index':2,
        })
        $(nextPageLeft).css({
            'width':pUnit*invert,
            'left':pUnit*2*percent,
            'z-index':3,
        });
        $(nextPageRight).css({
            'width':pUnit,
            'left':pUnit,
            'z-index':1,
            'display':'block'
        });
    } else if ((direction == "left" && curPage + 1 == bookLength) || (direction == "right" && curPage == bookLength)) {
        // last page turn
        var backCover = book[curPage+pageSelectMod].DIV;
        var secondToLast = book[curPage-1+pageSelectMod].DIV;
        if (percent > 0.25) {
            var stretch = (percent-0.25)*1.33;
            var invert = Math.abs(stretch-1);
            $(backCover).css({
                'width':pUnit*invert,
                'left':pUnit*2*stretch,
                'z-index':2,
            });
            $(secondToLast).css({
                'width':pUnit*2*stretch,
                'left':0,
                'z-index':3,
                'display':'block'
            });
        }       else    {
            var stretch = percent * 4;
            var invert = Math.abs(stretch-1);
            $(backCover).css({
                'width':pUnit,
                'left':pUnit/2*invert,
                'z-index':2,
            });
            $(secondToLast).css({
                'display':'none'
            });
        }
    }
}
function pointInPoly(poly, pt) {
    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)
        ((poly[i].y <= pt.y && pt.y < poly[j].y) || (poly[j].y <= pt.y && pt.y < poly[i].y))
            && (pt.x < (poly[j].x - poly[i].x) * (pt.y - poly[i].y) / (poly[j].y - poly[i].y) + poly[i].x)
            && (c = !c);
    return c;
}
function hoverMouse(type) {
    if (!isPad) {
        var tmpStyle = "";
        if (type) {
            tmpStyle = type;
            if (isChrome) {
                if (type == "grab") {
                    tmpStyle = "-webkit-grab";
                } else if (type == "grabbing") {
                    tmpStyle = "-webkit-grabbing";
                }
            }
        } else {
            tmpStyle = "auto";
        }
        if (type == "hand" && isFirefox) {
            tmpStyle = "pointer";
        } else if (type == "drawingTool") {
            tmpStyle = "url('" + dependenciesLoc + "presets/icons/" + book.drawingTools.cur + "-cursor.png'), defaut";
        }
        $("body").css("cursor", tmpStyle);
    }
}
function newBuffer() {
    for (buf in bufObjArr) {
        if (bufObjArr[buf].running) {
            bufObjArr[buf].clear = true;
            bufObjArr[buf].path = buf;
        } else {
            bufObjArr.splice(buf, 1);
        }
    }
    bufObjArr.push(new buffer());
}
function setGotoCover() {
    var cover = document.getElementById('gotoCover');
    if (pDisplay == 'Single') {
        var onlyPageStr = pageNumberingStr[curPage - 1] || curPage;
        if (onlyPageStr == 'undefined') {
            onlyPageStr = curPage;
        }
        cover.innerHTML = onlyPageStr;
    } else if (pDisplay == 'SingleSpread') {
        var leftPage = pageNumberingStr[curPage - 2] || curPage - 1;
        var rightPage = pageNumberingStr[curPage - 1] || curPage;
        if (curPage == 1) {
            cover.innerHTML = rightPage;
        } else if (curPage == bookLength && isEven(bookLength)) {
            cover.innerHTML = rightPage;
        } else if (curPage > bookLength) {
            cover.innerHTML = leftPage;
        } else {
            cover.innerHTML = leftPage + ' - ' + rightPage;
        }
    } else if (pDisplay == 'BlockSpread') {
        var inner = false;
        if (pageNumberingStr && pageNumberingStr[curPage-1]) {
            inner = pageNumberingStr[curPage-1];
        }       else    {
            var rightPageVis = (curPage*2)-1;
            var leftPageVis = rightPageVis-1;
            if (curPage == 1) {
                inner = rightPageVis;
            }   else if (curPage >= book.length) {
                inner = leftPageVis;
            }   else    {
                inner = leftPageVis + ' - ' + rightPageVis;
            }
        }
        cover.innerHTML = inner;
    }
}
function gotoChange(page, ident) {
    var gotoPage;
    if (page) {
        gotoPage = parseFloat((page.childNodes[page.selectedIndex].value));
    } else if (ident) {
        gotoPage = ident;
    }
    if (isEven(gotoPage) && gotoPage < bookLength && pDisplay == 'SingleSpread') {
        gotoPage++;
    }
    if (curSequence) {
        curSequence.clear(true);
    }
    curPage = gotoPage;
    newBuffer();
    arrangePages();
    setGotoCover();
}




function vertCenterBook() {
    var workHeight = window.innerHeight;
    var middle = $('#screen-middle').offset().top;
    var workHeight = (middle*2)-deviceTopBar;
    if (isPad && !isAndroid) {
        if (window.orientation == 90 || window.orientation == -90) {
            //workHeight = (screenWidth - deviceTopBar) / viewportScale;
        } else if (window.orientation != undefined) {
            //workHeight = (screenHeight - deviceTopBar) / viewportScale;
        } else {
            //workHeight = 0;
        }
    }
    if (workHeight > bookHeight) {
        var overflow = workHeight - bookHeight;
        overflow /= 2;
        $("#main").css("margin-top", overflow);
        vertCenteredOffset = overflow;
    }
}



// quick shits
//

function splitAndInt(str,del) {
    var strArr = str.split(del);
    var numArr = [];
    for (var i = 0; i < strArr.length; i++) {
        numArr.push(parseInt(strArr[i]));
    }
    return numArr;
}
function splitAndFloat(str,del) {
    var strArr = str.split(del);
    var numArr = [];
    for (var i = 0; i < strArr.length; i++) {
        numArr.push(parseFloat(strArr[i]));
    }
    return numArr;
}

</script>
		<script>// GLobals
var maxDim = [0, 0], book = [], resMult = 1, bufArr = {length: 0}, curPage = 1, assetArr = {}, bufObjArr = [], bookOffsets, pUnit, bookC, navC, mDown = false, deviceTopBar = 0, pageNumberingStr = false, isChrome = navigator.userAgent.toLowerCase().indexOf("chrome") > -1, isFirefox = !(window.mozInnerScreenX == null), spriteKey = false;
// Single, SingleSpread,BlockSpread.
var pDisplay;
var isPad = (navigator.userAgent.match(/iPad/i) != null || navigator.userAgent.match(/android/i) != null), isAndroid = navigator.userAgent.match(/android/i) != null, viewportScale = false, exitPage, isMac = navigator.platform.indexOf('Mac') >= 0;
isPad = (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
if (false && isPad) {
    window.onerror = function (msg, url, line) {
        console.error("Error! " + msg);
        console.error("script " + url.split("/")[url.split("/").length - 1] + " line " + line);
    }
}

// XML IS READ. 
// All function have been loaded, jQuery is up, book is ready to be build
//
// Very first function will get xml, whether it be from a local .js included file, or from a server side .xml file.
// EITHER WAY, the xml will be passed off, parsed and all, to xmlLoaded();
$(document).ready(function () {
    var test = document.createElement('div');
    test.setAttribute('id', 'screen-middle');
    document.body.appendChild(test);
    var xmlParsed = "";
    if (typeof (xml) === "undefined") {
        $.ajax({
            type: "GET",
            url: "MainXML.xml",
            dataType: "xml",
            timeout: 5000,
            success: xmlLoaded,
            error: function (xhr, ajaxOptions, thrownError) {
                console.error("ERROR - " + thrownError);
            }
        });
    } else {
        xml = $.parseXML(xml);
        xmlLoaded(xml);
    }
});
// At this point, I do not have to worry about whether this is a local view or a serverside view. ALL EVENTS are handled the same from here on out.
//
// Unlike before, I will be parsing the xml DIRECTLY to objects and array as needed. This is the ONLY SPOT where xml is interpreted.
// After the xml is interpreted, I am clear the xml global var to insure I dont rely on it later.
//
// BOOK STRUCTURE...
//
// GlOBALS
// var curPage = 1, book = [object, object], bufferArr = [buffer(src), buffer(src), createMouseEvents()]
function rgb2hex(rgb) {
    if (rgb) {
        rgb = rgb.split(",");
        function hex(x) {
            return ("0" + parseInt(x).toString(16)).slice(-2);
        }

        return "#" + hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);
    } else {
        return false;
    }
}
function ticksToMili(tics) {
    return (tics / 60) * 1000;
}

function capitaliseFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function xmlLoaded(curXML) {
    var curInfo, curPages;

    if (isPad) {
        screenWidth = window.screen.width;
        screenHeight = window.screen.height;
        deviceTopBar = 97;
    }
    function baseXML() {
        curInfo = curXML.getElementsByTagName("Info")[0];
        curPages = curXML.getElementsByTagName("Pages")[0].getElementsByTagName("Page");
        pageNumberingStr = false;


        pageNumberingStr = getValue(curInfo, "PageNumbering", true);

        if (pageNumberingStr) {
            pageNumberingStr = pageNumberingStr.split(",")
        }
        for (key in pageNumberingStr) {
            pageNumberingStr[key] = pageNumberingStr[key].toUpperCase();
        }

        //pageNumberingStr = false;
    }

    baseXML();


    function presetImages() {
        book.presetImages = {};
        book.presetImages.radio_active = new Image();
        book.presetImages.radio_active.src = dependenciesLoc + 'presets/icons/radio_active.png';
        book.presetImages.radio_inactive = new Image();
        book.presetImages.radio_inactive.src = dependenciesLoc + 'presets/icons/radio_inactive.png';
        book.presetImages.radio_hover = new Image();
        book.presetImages.radio_hover.src = dependenciesLoc + 'presets/icons/radio_hover.png';
        book.presetImages.checkbox_active = new Image();
        book.presetImages.checkbox_active.src = dependenciesLoc + 'presets/icons/checkbox_active.png';
        book.presetImages.checkbox_inactive = new Image();
        book.presetImages.checkbox_inactive.src = dependenciesLoc + 'presets/icons/checkbox_inactive.png';
        book.presetImages.checkbox_hover = new Image();
        book.presetImages.checkbox_hover.src = dependenciesLoc + 'presets/icons/checkbox_hover.png';
    }

    presetImages()

    function addElem(parent, typeChild, attributeArr, inner) {
        // UTILITY class. Adds HTML elements with one or multiple attributes
        var newElem = document.createElement(typeChild);
        for (i = 0; i < attributeArr.length; i++) {
            newElem.setAttribute(attributeArr[i][0], attributeArr[i][1]);
        }
        parent.appendChild(newElem);
        if (inner != undefined) {
            newElem.innerHTML = inner;
        }
        var retElem = document.getElementById(attributeArr[0][1]);
        return retElem;
    }

    function elements1() {
        body = document.body;
        addElem(body, "div", [["id", "background"], ["class", "bgCenter"]]);
        addElem(document.getElementById("background"), "div", [["id", "backgroundImg"]]);
        addElem(body, "div", [["id", "main"], ["class", "bgCenter"]]);
        var main = addElem(document.getElementById("main"), "div", [["id", "mainC"]]);
        addElem(main, "div", [["id", "titleC"], ["class", "noSelect"]]);
        addElem(document.getElementById("titleC"), "div", [["id", "bullet"]]);
        addElem(document.getElementById("titleC"), "div", [["id", "textC"]], "<p id='textAct'></p>");
        addElem(main, "div", [["id", "navC"], ["class", "noSelect"]]);
        bookC = addElem(main, "div", [["id", "bookC"], ["class", "center"]]);
        addElem(main, "div", [["id", "audioDiv"], ["class", "noSelect"]]);
        addElem(main, "div", [["id", "logoCont"], ['touchstart', 'event.preventDefault()']]);
        addElem(document.getElementById("logoCont"), "div", [["id", "logo"], ["class", "noSelect bgCenter"]]);

        addElem(main, "div", [["id", "leftSideNav"], ["class", "sideNav"]], "<div class='VCmiddle'><div class='VCcenter' id='gutterPrev'></div>");
        addElem(main, "div", [["id", "rightSideNav"], ["class", "sideNav"]], "<div class='VCmiddle'><div class='VCcenter' id='gutterNext'></div>");

        var shade = addElem(bookC, "div", [["id", "shade"]]);
        shade.innerHTML = '<div id=tapPromptCentered><img id=tapPromptAct src=' + dependenciesLoc + '/presets/ipadIcons/tap-prompt.png></img></div>';
        navC = document.getElementById("navC");
    }

    elements1();

    // loging pallet bottom left
    function loginElements() {
        addElem(mainC, "div", [["id", "loginCont"]]);
        var loginCont = document.getElementById("loginCont");
        addElem(loginCont, "div", [["id", "loginIcon"]]);
        var loginIcon = document.getElementById("loginIcon");
        addElem(loginCont, "div", [["id", "loginFieldCont"]], loginContHTML);

        var loginButton = document.getElementById('userLoginButton');
        var loginCreate = document.getElementById('userCreateButton');
        var loginLogout = document.getElementById('userLogoutButton');
        addElem(loginCont, "div", [["id", "loginFieldExit"]]);
        var loginExit = document.getElementById("loginFieldExit");
        addElem(body, "p", [["id", "loginSuccessfulName"]]);
        book.login = {
            status: 'closed',
            dimensions: [33, 25],
        };
        $('#loginCont').css({'height': book.login.dimensions[0], 'width': book.login.dimensions[1]});

        book.login.loggedIn = false;
        book.login.toggle = function () {
            var bookLoginStat = book.login.status;
            if (bookLoginStat == 'open') {
                book.login.close();
            } else if (bookLoginStat == 'closed') {
                book.login.open();
            } else if (bookLoginStat == 'closing' || bookLoginStat == 'opening') {
                console.warn('book login area in animation, function canceled');
            }
        }
        book.login.close = function () {
            if (book.login.status == 'open') {
                book.login.status = 'opening';
                $('#loginIcon').css({'opacity': 0, 'display': 'block'});
                $('#loginIcon').clearQueue();

                $('#loginFieldCont').css({'opacity': 1});
                $('#loginFieldCont').clearQueue();

                $('#loginCont').css({'height': 325, 'width': 200});
                $('#loginCont').clearQueue();

                $('#loginFieldExit').animate({'opacity': 0}, 250);
                $('#loginFieldCont').animate({'opacity': 0}, 250, function () {
                    $('#loginFieldExit').css({'visibility': 'hidden'});
                    $('#loginCont').animate({
                        'height': book.login.dimensions[0],
                        'width': book.login.dimensions[1]
                    }, 250);
                    $('#loginIcon').animate({'opacity': 1}, 250, function () {
                        $('#loginFieldCont').css({'display': 'none'});
                        book.login.status = 'closed';
                    });
                });
            }
        }
        book.login.open = function () {
            if (book.login.status == 'closed') {
                book.login.status = 'closing';
                $('#loginIcon').css({'opacity': 1});
                $('#loginIcon').clearQueue();

                $('#loginFieldCont').css({'opacity': 0, 'display': 'block'});
                $('#loginFieldCont').clearQueue();

                $('#loginCont').css({'height': book.login.dimensions[0], 'width': book.login.dimensions[1]});
                $('#loginCont').clearQueue();

                $('#loginIcon').animate({'opacity': 0}, 250, function () {
                    $('#loginIcon').css({'display': 'none'});
                    $("#loginFieldExit").css({"visibility": "visible", "opacity": "0"});
                    $('#loginFieldExit').animate({'opacity': 1}, 250);
                    $('#loginFieldCont').animate({'opacity': 1}, 250);
                    $('#loginCont').animate({'height': 325, 'width': 200}, 250, function () {
                        book.login.status = 'open';
                    });
                });
            }
        }
        book.login.readerInfo = {};
        book.login.trashCookie = function () {
            if (document.cookie) {
                document.cookie += '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
            }

        }
        book.login.attempt = function () {
            var loginFirstName = document.getElementById('readerLoginFirstName').value.toLowerCase();
            var loginLastName = document.getElementById('readerLoginLastName').value.toLowerCase();
            var loginBirthDay = document.getElementById('readerLoginBirthDay').value;
            var loginBirthMonth = document.getElementById('readerLoginBirthMonth').value;
            var loginBirthYear = document.getElementById('readerLoginBirthYear').value;
            var loginBirth = loginBirthYear + '-' + loginBirthMonth + '-' + loginBirthDay
            $.ajax({
                    type: "GET",
                    url: "../../../readerScripts/checkReader.php",
                    data: {readerFirstName: loginFirstName, readerLastName: loginLastName, readerBirth: loginBirth}
                })
                .done(function (msg) {
                    var isError = msg.split(':');
                    if (isError[0] == "error") {
                        $("#loginErrorMessage")[0].innerHTML = "Can't find reader!";
                        book.login.trashCookie();
                    } else if (msg == "logged in!") {
                        book.login.loggedIn = true;
                        var reader = book.login.readerInfo;
                        reader.firstName = loginFirstName;
                        reader.lastName = loginLastName;
                        reader.birthDate = loginBirth;

                        if ($("#remember_me")[0].checked) {
                            document.cookie = "readerFirstName=" + reader.firstName + ",readerLastName=" + reader.lastName + ",readerBirthDate=" + reader.birthDate;
                        } else {
                            book.login.trashCookie();
                        }

                        book.login.close();
                        $("#userLogoutButton").css("display", "inline-block");
                        $(".loginCreateButtons").css("display", "none");
                        $("#loginSuccessfulName")[0].innerHTML = "Hello " + capitaliseFirstLetter(loginFirstName) + " " + capitaliseFirstLetter(loginLastName);
                        $("#loginErrorMessage")[0].innerHTML = "";

                        book.login.loadFromServer();
                    }
                });
        }
        book.login.create = function () {
            var loginFirstName = document.getElementById('readerLoginFirstName').value.toLowerCase();
            var loginLastName = document.getElementById('readerLoginLastName').value.toLowerCase();
            var loginBirthDay = document.getElementById('readerLoginBirthDay').value;
            var loginBirthMonth = document.getElementById('readerLoginBirthMonth').value;
            var loginBirthYear = document.getElementById('readerLoginBirthYear').value;
            var loginBirth = loginBirthYear + '-' + loginBirthMonth + '-' + loginBirthDay
            $.ajax({
                    type: "GET",
                    url: "../../../readerScripts/createReader.php",
                    data: {readerFirstName: loginFirstName, readerLastName: loginLastName, readerBirth: loginBirth}
                })
                .done(function (msg) {
                    var isError = msg.split(':');
                    if (isError[0] == "error") {
                        $("#loginErrorMessage")[0].innerHTML = "Reader already exists!";
                    } else if (msg == "reader created") {
                        book.login.attempt();
                    }
                })
        }
        book.login.checkIfPrevRead = function () {
            var reader = book.login.readerInfo;
            $.ajax({
                    type: "GET",
                    url: "../../../readerScripts/checkBook.php",
                    data: {
                        readerFirstName: reader.firstName,
                        readerLastName: reader.lastName,
                        readerBirth: reader.birthDate,
                        bookID: bookID
                    }
                })
                .done(function (msg) {
                    var msgSplit = msg.split('|');
                    if (msgSplit[0] == "reader has not yet read book, creating file") {
                        console.log("new book " + reader.firstName + "? Good for you!");
                    } else if (msgSplit[0] == 'reader has read book') {
                        console.log("An old favorite, we'll load any of your work");
                    }
                });
        }
        book.login.saveToServer = function () {
            var saveObj = {};
            saveObj = [];
            for (var i = 0; i < book.length; i++) {
                saveObj[i] = {};
                var cur = book[i];
                for (var w = 0; w < cur.workspaceKey.length; w++) {
                    var workspaceName = cur.workspaceKey[w];
                    var curW = cur.workspaces[workspaceName];
                    if (curW.drawingsOnWorkspace.length > 0) {
                        saveObj[i][workspaceName] = {};
                        saveObj[i][workspaceName].drawings = curW.drawingsOnWorkspace;
                    }
                }
            }
            var saveString = "var customBook =" + JSON.stringify(saveObj);
            var reader = book.login.readerInfo;
            $.ajax({
                    type: "GET",
                    url: "../../../readerScripts/saveBook.php",
                    data: {
                        readerFirstName: reader.firstName,
                        readerLastName: reader.lastName,
                        readerBirth: reader.birthDate,
                        bookID: bookID,
                        saveString: saveString
                    }
                })
                .done(function (msg) {
                    //console.log(msg);
                })
        }
        book.login.logout = function () {
            book.login.loggedIn = false;
            $("#userLogoutButton").css("display", "none");
            $(".loginCreateButtons").css("display", "inline-block");
            $("#remember_me")[0].checked = false;
            $("#readerLoginBirthDay")[0].selectedIndex = 0;
            $("#readerLoginBirthMonth")[0].selectedIndex = 0;
            $("#readerLoginBirthYear")[0].selectedIndex = 0;
            $("#readerLoginFirstName")[0].value = '';
            $("#readerLoginLastName")[0].value = '';
            $("#loginSuccessfulName")[0].innerHTML = '';
            $("#loginErrorMessage")[0].innerHTML = "";
        }
        book.login.loadFromServer = function () {
            var reader = book.login.readerInfo;
            $.ajax({
                    type: "GET",
                    url: "../../../readerScripts/loadBook.php",
                    data: {
                        readerFirstName: reader.firstName,
                        readerLastName: reader.lastName,
                        readerBirth: reader.birthDate,
                        bookID: bookID
                    }
                })
                .done(function (msg) {
                    if (msg.substring(0, 3) == 'var') {
                        window.eval(msg);
                        for (var p = 0; p < customBook.length; p++) {
                            var customP = customBook[p];
                            for (var w in customP) {
                                var workspaceName = w;
                                var customW = customP[w];
                                if (customW.drawings) {
                                    var bookSpot = book[p].workspaces[workspaceName];
                                    bookSpot.drawingsOnWorkspace = customW.drawings;
                                    bookSpot.redraw();
                                }
                            }
                        }
                    } else {
                        console.error(msg);
                    }
                })
        }

        if (document.cookie) {
            var cook = document.cookie.split(';')[0].split(',');
            var readerObj = {};
            for (var i = 0; i < cook.length; i++) {
                var curCook = cook[i].split('=');
                readerObj[curCook[0]] = curCook[1];
            }
            if (readerObj.readerFirstName && readerObj.readerLastName && readerObj.readerBirthDate) {
                $("#remember_me")[0].checked = true;
                var dateSplit = readerObj.readerBirthDate.split('-');
                $("#readerLoginBirthYear")[0].selectedIndex = 2013 - Number(dateSplit[0]);
                $("#readerLoginBirthMonth")[0].selectedIndex = Number(dateSplit[1]);
                $("#readerLoginBirthDay")[0].selectedIndex = Number(dateSplit[2]);
                $("#readerLoginFirstName")[0].value = readerObj.readerFirstName.toLowerCase();
                $("#readerLoginLastName")[0].value = readerObj.readerLastName.toLowerCase();

                book.login.attempt();
            }
        } else {
            $("#userLogoutButton").css("display", "none");
        }

        window.setTimeout(function () {
            loginIcon.addEventListener('mouseup', book.login.open);
            loginExit.addEventListener('mouseup', book.login.close);
            loginButton.addEventListener('click', book.login.attempt);
            loginLogout.addEventListener('click', book.login.logout);
            loginCreate.addEventListener('click', book.login.create);
        }, 1);
    }

    loginElements();

    function drawingTools() {
        // drawing tools
        var nukeWarning = addElem(bookC, "div", [["id", "nukeWarning"], ["class", ".noSelect"]]);
        var plateCont = addElem(body, "div", [["id", "plateCont"]]);
        var plateMin = addElem(plateCont, "div", [["id", "plateMin"]]);
        var arrowStickCont = addElem(plateMin, "div", [["id", "arrowStickCont"]]);
        addElem(arrowStickCont, "div", [["id", "arrowStickLeft"], ["class", "arrowStick"]]);
        addElem(arrowStickCont, "div", [["id", "arrowStickRight"], ["class", "arrowStick"]]);
        var plateMax = addElem(plateCont, "div", [["id", "plateMax"]]);
        var subChoices = addElem(plateMax, "div", [["id", "subChoices"]]);
        var subCol1 = addElem(subChoices, "div", [["id", "subCol1"], ["class", "subCol"]]);
        var subCol2 = addElem(subChoices, "div", [["id", "subCol2"], ["class", "subCol"]]);

        // pushed to production, drawing tools removed.
        //$("#plateCont").css({"display":"none","pointer-events":"none"});


        plateHeight = 'close';
        function togglePlate() {
            if (plateHeight == 'close') {
                animPlate('half');
            } else {
                animPlate('close');
            }
        }

        plateMin.addEventListener('mouseup', togglePlate);

        book.drawingTools = {};
        book.drawingTools.status = false;
        book.drawingTools.cur = false;
        function tool(name, displayName, choices, subValues) {
            var THIS = this;
            this.name = name;
            this.displayName = displayName || name;
            this.choices = choices;
            this.subValues = subValues;

            this.elem = addElem(plateMax, 'div', [['id', this.name], ['class', 'plateChoice']]);
            this.icon = addElem(this.elem, 'img', [['id', this.name + '-icon'], ['class', 'plateChoiceIcon'], ['src', dependenciesLoc + 'presets/icons/' + this.name + '.png']]);
            this.title = addElem(this.elem, 'p', [['id', this.name + '-title'], ['class', 'plateChoiceName']], this.displayName);
            this.underline = addElem(this.elem, 'div', [['id', this.name + '-underline'], ['class', 'plateChoiceUnderline']]);
            this.hoverEnter = function () {
                if (book.drawingTools.cur != this.name) {
                    $(this.underline).clearQueue();
                    $(this.underline).animate({"width": 60, "backgroundColor": "#00AA", "color": "#0A0"}, 100);
                }
            }
            this.hoverLeave = function () {
                if (book.drawingTools.cur != this.name) {
                    $(this.underline).clearQueue();
                    $(this.underline).animate({"width": 40, "backgroundColor": "#000000", "color": "#000"}, 100);
                }
            }
            this.select = function () {
                var prevName = book.drawingTools.cur
                var prevTool = book.drawingTools[prevName];
                if (prevName == 'nuke') {
                    $("#clearInputLeft").trigger("click");
                }

                if (this.name == 'navigation' || this.name == 'nav') {
                    book.drawingTools.cur = false;
                    animPlate('close');
                } else {
                    book.drawingTools.cur = this.name;
                }

                if (prevTool) {
                    prevTool.hoverLeave();
                }
                $(this.underline).clearQueue();
                $(this.underline).animate({"width": 80, "backgroundColor": "#00FF00", "color": "#0F0"}, 100);
                if (this.choices) {
                    if (plateHeight == 'half') {
                        animPlate('full');
                    }
                    $("#subChoices #color").css({"display": "none"});
                    $("#subChoices #thickness").css({"display": "none"});
                    $("#subChoices #opacity").css({"display": "none"});
                    $("#subChoices #shape").css({"display": "none"});
                    $("#subChoices #clear").css({"display": "none"});

                    var choice = this.choices;
                    if (choice.left.length == 1) {
                        $("#subCol1 > #" + choice.left[0]).css({"display": "inline-block"});
                    }
                    if (choices.right.length == 1) {
                        var cur = $("#subCol2 > #" + choice.right[0]);
                        var totHeight = 130;
                        totHeight -= parseFloat(cur.css("height"));
                        $(cur).css({"display": "inline-block", "margin": totHeight / 2 + " 10"});
                        document.getElementById(choice.right[0] + 'Slider').value = subValues[choice.right[0]];
                    } else if (choices.right.length == 2) {
                        var first = $("#subCol2 > #" + choice.right[0])
                        var second = $("#subCol2 > #" + choice.right[1])
                        var totHeight = 130;
                        totHeight -= parseFloat($(first).css("height")) + parseFloat($(second).css("height"));
                        $(first).css({"display": "inline-block", "margin": totHeight / 2 + " 10 0 10"});
                        $(second).css({"display": "inline-block", "margin": totHeight / 2 + " 10 0 10"});
                    }
                    var shapeValue;
                    if (subValues.shape == 'square') {
                        $(".shapeAct")[1].click();
                        shapeValue = '0%';
                    } else {
                        $(".shapeAct")[0].click();
                        shapeValue = '50%';
                    }

                    $('.colorSquare')[subValues.color].click();
                    document.getElementById('thicknessSlider').value = subValues.thickness;
                    document.getElementById('opacitySlider').value = subValues.opacity * 100;
                    var thicknessMargins = (90 - subValues.thickness) / 2;
                    $("#choiceDisplay").css({
                        "height": subValues.thickness,
                        "width": subValues.thickness,
                        "margin": thicknessMargins,
                        "opacity": subValues.opacity,
                        "border-radius": shapeValue
                    });
                } else {
                    animPlate('close');
                }
                book[window.curPage - 1].redraw();
                book[window.curPage].redraw();
            }
            this.vals = {};
            if (choices.left) {
                var totChoices = choices.left.concat(choices.right);
                for (var c = 0; c < totChoices.length; c++) {
                    var cur = totChoices[c];
                    this.vals[cur] = false;
                }
            }
            $(this.elem).mouseenter(function () {
                THIS.hoverEnter()
            });
            $(this.elem).mouseleave(function () {
                THIS.hoverLeave()
            });
            $(this.elem).mouseup(function () {
                THIS.select()
            });
        }

        drawingTools = {
            pencil: {
                name: 'pencil',
                display: 'pencil',
                choices: {
                    left: [
                        'color',
                    ],
                    right: [
                        'thickness',
                        'opacity',
                    ],
                },
                subValues: {
                    color: 4,
                    thickness: 40,
                    opacity: 1,
                    shape: 'circle',
                }

            },
            pen: {
                name: 'pen',
                display: 'pen',
                choices: {
                    left: [
                        'color',
                    ],
                    right: [
                        'thickness',
                    ],
                },
                subValues: {
                    color: 0,
                    thickness: 20,
                    opacity: 1,
                    shape: 'circle',
                }
            },
            marker: {
                name: 'marker',
                display: 'marker',
                choices: {
                    left: [
                        'color',
                    ],
                    right: [
                        'thickness',
                        'opacity',
                    ],
                },
                subValues: {
                    color: 2,
                    thickness: 40,
                    opacity: 0.8,
                    shape: 'square',
                }
            },
            eraser: {
                name: 'eraser',
                display: 'eraser',
                choices: {
                    left: [
                        'shape',
                    ],
                    right: [
                        'thickness',
                        'clear'
                    ],
                },
                subValues: {
                    color: 0,
                    thickness: 80,
                    opacity: 1,
                    shape: 'circle',
                }
            },
            navigation: {
                name: 'navigation',
                display: 'nav',
                choices: false,
            },
        };
        drawingToolsSubs = {
            color: {
                position: 'left',
                name: 'color',
                html: '',
                height: 120,
                width: 120,
            },
            shape: {
                position: 'left',
                name: 'shape',
                html: '',
            },
            thickness: {
                position: 'right',
                name: 'thickness',
                html: '',
            },
            opacity: {
                position: 'right',
                name: 'opacity',
                html: '',
            },
            clear: {
                position: 'right',
                name: 'clear',
                html: '',
            }
        }

        // inner html for sub choices
        // --COLOR
        var colorHTML = '';
        var firstHTML = "<div class='colorSquare' chosen='false' slot='";
        var secondHTML = "' style='background-color:RGB(";
        var closeHTML = ")'></div>";
        var colorArr = ['0,0,0', '137,103,172', '59,77,129', '228,100,37', '255,255,255', '179,38,42', '90,173,197', '145,190,74'];
        for (var c = 0; c < colorArr.length; c++) {
            colorHTML += firstHTML + c + secondHTML + colorArr[c] + closeHTML;
        }
        drawingToolsSubs.color.html = colorHTML;

        // --THICKNESS
        drawingToolsSubs.thickness.html = '<div id=thicknessInputLeft class=thicknessTable><input type=range id=thicknessSlider min=3 max=80></input><p id=thicknessLabel>Thickness<p></div>';

        // --CLEAR
        drawingToolsSubs.clear.html = '<input id=clearInputLeft type=button value="Clear Drawing" ></input>';

        // --OPACITY
        drawingToolsSubs.opacity.html = '<div id=opacityInputLeft class=opacityTable><input type=range id=opacitySlider min=10 max=100></input><p id=opacityLabel>Opacity<p></div>';

        // --SHAPE
        drawingToolsSubs.shape.html = '<div class=shapeAct id=circle-shape chosen=false></div><div class=shapeAct id=square-shape chosen=false></div><p id=shapeLabel>Shape</p>';


        for (var t in drawingTools) {
            var curTool = drawingTools[t];
            var curName = curTool.name;
            book.drawingTools[curName] = new tool(curName, curTool.display, curTool.choices, curTool.subValues);
        }
        for (var t in drawingToolsSubs) {
            var curSub = drawingToolsSubs[t];
            if (curSub.position == 'left') {
                addElem(subCol1, "div", [["id", curSub.name], ["class", "subChoice"], ["val", false]], curSub.html);
            } else {
                addElem(subCol2, "div", [["id", curSub.name], ["class", "subChoice"], ["val", false]], curSub.html);
            }
        }

        // --DISPLAY
        var subCol3 = addElem(subChoices, "div", [["id", "subCol3"], ["class", "subCol"]]);
        var choiceDisplay = addElem(subCol3, "div", [["id", "choiceDisplay"]]);

        $(".colorSquare").mouseleave(function () {
            if (this.getAttribute('chosen') == 'false') {
                $(this).clearQueue();
                $(this).animate({"borderColor": "transparent"}, 150);
            }
        });
        $(".colorSquare").mouseenter(function () {
            if (this.getAttribute('chosen') == 'false') {
                $(this).clearQueue();
                $(this).animate({"borderColor": "#4C4C4C"}, 150);
            }
        });
        $(".shapeAct").mouseenter(function () {
            if (this.getAttribute('chosen') == 'false') {
                $(this).clearQueue();
                $(this).animate({"background-color": "green", "opacity": 0.3}, 200);
            }
        });
        $(".shapeAct").mouseleave(function () {
            if (this.getAttribute('chosen') == 'false') {
                $(this).clearQueue();
                $(this).animate({"background-color": "white", "opacity": 1}, 200);
            }
        });


        $(".colorSquare").click(function () {
            var colorSlot = this.getAttribute('slot');
            var colorCho = this.style.backgroundColor
            var colors = document.getElementsByClassName('colorSquare');
            for (var c = 0; c < colors.length; c++) {
                if (c != colorSlot) {
                    var cur = colors[c];
                    cur.setAttribute('chosen', 'false');
                    $(cur).css({"borderColor": "transparent"});
                }
            }

            $(this).animate({"borderColor": "#303030"}, 400);
            this.parentNode.setAttribute('val', colorCho);
            this.setAttribute('chosen', 'true');
            $(choiceDisplay).css({"background-color": colorCho});

            // set new value
            book.drawingTools[book.drawingTools.cur].subValues.color = colorSlot;
        });
        document.getElementById("thicknessSlider").addEventListener('change', function (e) {
            var thickVal = this.value;
            $(choiceDisplay).css({"height": thickVal, "width": thickVal, 'margin': (90 - this.value) / 2});

            // set new value
            book.drawingTools[book.drawingTools.cur].subValues.thickness = thickVal;
        }, false);
        document.getElementById("opacitySlider").addEventListener('change', function (e) {

            var opVal = this.value / 100;
            $(choiceDisplay).css({"opacity": opVal});

            // set new value
            book.drawingTools[book.drawingTools.cur].subValues.opacity = opVal;
        }, false)
        $(".shapeAct").click(function () {
            var shapes = document.getElementsByClassName('shapeAct');
            for (var s = 0; s < shapes.length; s++) {
                var shape = shapes[s];
                shape.setAttribute('chosen', 'false');
                $(shape).css({"background-color": "white", "opacity": 1});
            }
            this.setAttribute('chosen', 'true');
            $(this).css({"background-color": "green", "opacity": 0.3});
            $(this).animate({"background-color": "green", "opacity": 1}, 250);
            var shapeCho = this.id.split('-')[0];
            if (shapeCho == 'circle') {
                $(choiceDisplay).css({"border-radius": '50%'});
            } else if (shapeCho == 'square') {
                $(choiceDisplay).css({"border-radius": '0%'});
            }

            // set new value
            book.drawingTools[book.drawingTools.cur].subValues.shape = shapeCho;
        });
        $("#clearInputLeft").click(function () {
            var curVal = book.drawingTools.cur;
            if (curVal == 'nuke') {
                $(this).css({"font-size": 12, "font-weight": 500});
                $(this).css("background-color", "RGBA(0,200,0,0.5)");
                book.drawingTools.cur = 'eraser';
                this.value = 'Clear Drawings';
            } else if (curVal == 'eraser') {
                $(this).css({"font-size": 20, "font-weight": 900});
                $(this).css("background-color", "RGBA(255,0,0,1)");
                book.drawingTools.cur = 'nuke';
                this.value = 'Cancel';
            }
        });
        drawingToolsDefault = getValue(curInfo, "ShowDrawingTools", true) || false;
        drwaingToolsDims = [300, 300];
    }

    drawingTools();

    function elements2() {
        //	LEVEL 2 ELEMENTS. [nav(Prev,Goto,Next),bookC(pages),audioDiv(controls)]
        addElem(navC, "div", [["id", "prev"], ["class", "bgCenter"]]);
        addElem(navC, "div", [["id", "goto"]], '<p id=gotoCover>1</p><select id=gotoAct name=goto style="background-color:white;" onchange=gotoChange(this);><option></option></select>');
        addElem(navC, "div", [["id", "next"], ["class", "bgCenter"]]);


        if (isFirefox || isPad) {
            document.getElementById('gotoCover').style.top = '-4';
        }
        document.getElementById("audioDiv").innerHTML = "<audio controls id='audioController'></audio>";
        myAudio = document.getElementsByTagName('audio')[0];
        //myAudio.addEventListener('canplaythrough', canplay, false);
        //myAudio.addEventListener('ended', audioEnded);
        addElem(bookC, "div", [["id", "dialogC"]]);
        book.dialog = {};
        book.dialog.container = document.getElementById('dialogC');
        book.dialog.container.style.visibility = 'hidden';
        book.dialog.open = false;
    }

    elements2();

    function info() {
        // INFO
        // set webpage title
        var prjTitle = getValue(curInfo, "PrjName");
        document.title = prjTitle;
        document.getElementById("textAct").innerHTML = getValue(curInfo, "PrjNameLong");
        // set bullet color
        //$("#bullet").css("background-color", getValue(curInfo, "BulletColor"));
        $("#bullet").css("background-color", "white");
        // set the body background
        $(document.body).css("background-color", rgb2hex(getValue(curInfo, "BrowserBackgroundColor")));
        pDisplay = getValue(curInfo, "PageDisplay", true);
        if (pDisplay) {
            pDisplay = pDisplay.toLowerCase();
            if (pDisplay == 'single') {
                pDisplay = 'Single';
            } else if (pDisplay == 'composite') {
                pDisplay = 'BlockSpread';
            } else if (pDisplay == 'double') {
                pDisplay = 'SingleSpread';
            }
        } else {
            pDisplay = getValue(curInfo, "DoublePageDisplay");
            if (pDisplay) {
                pDisplay = 'SingleSpread';
            } else {
                pDisplay = 'Single';
            }
        }

        // bpage background color
        pageColor = rgb2hex(getValue(curInfo, "BookBackgroundColor"));
        book.highlightLinkColor = "RGBA(" + (getValue(curInfo, "HighlightLinkColor", true) || "128,255,255");
        book.highlightLinkColor += "," + ((getValue(curInfo, "HighlightLinkTransparency", true) / 100) || 1) + ")";
        book.minLinkHighlightTime = ticksToMili(getValue(curInfo, "AutoHighlightLinksTime", true)) || 1000;
        book.highlighterWaitAtEnd = ticksToMili(getValue(curInfo, "WaitAfterHighlighterSeries", true) || 0);
        book.lastPageDouble = false;

        maxDim[0] = parseInt(getValue(curInfo, "SinglePageHeight", true));
        maxDim[1] = parseInt(getValue(curInfo, "SinglePageWidth", true));
        if (!maxDim[0]) {
            maxDim[0] = parseInt(getValue(curPages[0], "PageHeight"));
        }
        if (!maxDim[1]) {
            maxDim[1] = parseInt(getValue(curPages[0], "PageWidth"));
        }
        if (pDisplay == 'BlockSpread') {
            maxDim[1] *= 2;
            var last_bg_left = getValue(curPages[curPages.length - 1], "LeftBackground");
            var last_bg_right = getValue(curPages[curPages.length - 1], "RightBackground");
            if (last_bg_left != '' && last_bg_right != '') {
                book.lastPageDouble = true;
            } else {
                book.lastPageDouble = false;
            }
        }
    }

    info();

    for (var key = 0; key < curPages.length; key++) {
        bufArr[key] = [];
        bufArr[key + "load"] = false;
        bufArr[key + 'at'] = 0;
        bufArr.length++;

        var curPage = curPages[key];

        book[key] = new Page(key, curPages[key]);


        var xmlObjArr = curPage.getElementsByTagName("Objects")[0].getElementsByTagName("Object");
        for (objKey = 0; objKey < xmlObjArr.length; objKey++) {
            // initial local var setup, dumping from curXmlObj to tmpReturn
            var curXmlObj = xmlObjArr[objKey];
            var objType = getValue(curXmlObj, "ObjType", true);
            if (objType == 'dialog') {
                var tmpObj = new Dialog(curXmlObj, key);
            } else {
                var tmpObj = new PObject(curXmlObj, key);
            }
        }
        var xmlLnkArr = curPage.getElementsByTagName("Links")[0].getElementsByTagName("Link");
        for (lnkKey = 0; lnkKey < xmlLnkArr.length; lnkKey++) {
            // Same as objects above. Dumping from curXmlLnk to local tmpReturn
            var curXmlLnk = xmlLnkArr[lnkKey];
            // Setting up points for point in poly format. 
            var tmpTriggers = curXmlLnk.getElementsByTagName("Trigger");


            for (var t = 0; t < tmpTriggers.length; t++) {
                var triggers = tmpTriggers[t];
                var linkType = getValue(curXmlLnk, "LinkType", true) || "graphic";

                if (linkType == 'graphic' || linkType == 'page') {
                    var tmpLnk = new Graphic(curXmlLnk, triggers, key);
                } else if (linkType == 'button') {
                    var tmpLnk = new Button(curXmlLnk, triggers, key);
                } else {
                    console.warn('unknown link type ' + linkType);
                }
            }
            // Pushing all audio files into buffer arr
            //   NOTE do animation thing first.
        }
    }

    function elementSize() {
        $(".pDiv").css("background-color", rgb2hex((getValue(curInfo, "BookBackgroundColor") || '255,255,255')));
        $(".dup").css("background-color", rgb2hex((getValue(curInfo, "BookBackgroundColor") || '255,255,255')));


        // globals are faster than object properties
        bookLength = book.length;


        // set bookC height and width to display two pages at once.
        //

        maxDim[0] = parseFloat(maxDim[0]);
        maxDim[1] = parseFloat(maxDim[1]);
        halfWidth = maxDim[1] / 2;
        halfHeight = maxDim[0] / 2;
        bookMarginLeft = 10;
        shadowOffset = 10;


        if (pDisplay != 'SingleSpread') {
            maxDim[1] /= 2;
        }


        var tmpNavWidth = parseFloat($("#navC").css("width"));
        var tmpNavHoriMargins = parseFloat($("#navC").css("margin-right")) * 2;
        var tmpNavHeight = parseFloat($("#navC").css("height"));
        var tmpNavTopMargin = parseFloat($("#navC").css("margin-top"));
        var tmpNavBottomMargin = parseFloat($("#navC").css("margin-bottom"));
        var tmpBulletWidth = parseFloat($("#bullet").css("width"));
        var tmpBulletRightMargin = parseFloat($("#bullet").css("margin-right"));
        var tmpTitleHeight = parseFloat($("#titleC").css("height"));
        var tmpTitleLeftMargin = parseFloat($("#titleC").css("margin-left"));
        var tmpTitleVertMargins = parseFloat($("#titleC").css("height"));
        var tmpLogoHeight = parseFloat($("#logo").css("height"));
        var tmpLogoTopMargin = parseFloat($("#logo").css("margin-top"));
        var tmpLogoBottomMargin = parseFloat($("#logo").css("margin-bottom"));

        var tmpNavTotWidth = tmpNavWidth + tmpNavHoriMargins;
        var tmpTitleTotWidth = maxDim[1] * 2 - tmpNavTotWidth;
        var tmpBulletTotWidth = tmpBulletWidth + tmpBulletRightMargin;
        var tmpNavVertMargins = tmpNavTopMargin + tmpNavBottomMargin;
        var tmpNavTotHeight = tmpNavHeight + tmpNavVertMargins;
        var tmpTextCTotWidth = tmpTitleTotWidth - tmpBulletTotWidth;
        var tmpLogoTotMargin = tmpLogoTopMargin + tmpLogoBottomMargin;
        var tmpLogoTotHeight = tmpLogoHeight + tmpLogoTotMargin;
        var tmpMainCTotHeight = tmpNavTotHeight + tmpLogoTotHeight + maxDim[0];
        var tmpMainCTotWidth = (bookMarginLeft * 2) + (maxDim[1] * 2);

        var spriteStartFontSize = (maxDim[1] * 2) / 4;
        var spriteStartMargins = (maxDim[0] * 0.85) - spriteStartFontSize;
        if (spriteStartMargins < 0) {
            spriteStartFontSize = maxDim[0] * 0.85;
            spriteStartMargins = 0;
        } else {
            spriteStartMargins /= 2;
        }

        bookHeight = tmpMainCTotHeight;
        bookWidth = tmpMainCTotWidth;

        $("#main").css({"height": tmpMainCTotHeight + (15), "width": tmpMainCTotWidth + (20)});
        $("#mainC").css({"height": tmpMainCTotHeight, "width": tmpMainCTotWidth, "left": 10});
        $("#bookC").css({"height": maxDim[0], "width": maxDim[1] * 2});
        $("#spriteStart").css({"font-size": spriteStartFontSize, "margin-top": spriteStartMargins});
        $("#titleC").css({"width": tmpTitleTotWidth});
        $("#textC").css({"width": tmpTextCTotWidth});

        if (pDisplay == 'Single') {
            maxDim[1] *= 2;
        }

        pUnit = maxDim[1];
        bookOffsets = $('#bookC').offset();

        if (isPad) {

            addElem(body, "div", [["id", "ipadViewportFix"], ["class", "bgCenter"]]);
            var vpf = document.getElementById("ipadViewportFix");
            vpf.style.position = 'fixed';
            vpf.style.top = 0;
            vpf.style.left = 0;
            vpf.style.height = tmpMainCTotHeight + 15;
            vpf.style.width = tmpMainCTotWidth + 10 + 150;
            vpf.style.zIndex = '-1';


            $("#logoCont").css({'position': 'relative', 'float': 'right'});
            $("#navC").css({'position': 'relative', 'float': 'right', 'left': '0', 'margin-right': '9px'});
            addElem(body, "div", [["id", "leftGutter"], ["class", "gutter"]], '<div style="position:fixed;top:50%"><img src="presets/gutterLeft.png" height=55 width=55 id=leftGutterImage class=gutterImage></img></div>');
            addElem(body, "div", [["id", "rightGutter"], ["class", "gutter"]], '<div style="position:fixed;top:50%"><img src="presets/gutterRight.png" height=55 width=55 id=leftGutterImage style="left:15;" class=gutterImage></img></div>');
            $(".gutter").css({
                'position': 'fixed',
                'top': '0',
                'height': '100%',
                'width': '85px',
                'opacity': 0,
                'background-color': 'rgba(17,17,17,0.5)'
            });
            $("#leftGutter").css({'left': 0});
            $("#rightGutter").css({'right': 0});
            $(".gutterImage").css({'position': 'relative', 'top': '-27', 'left': '10', 'display': 'none'});


            if (document.head.firstChild.name != 'viewport') {
                var viewport = document.createElement('meta');
                viewport.name = 'viewport';
                viewport.content = 'width=device-width,initital-scale=1,user=-scalable=no';
                document.head.insertBefore(viewport, document.head.firstChild);
            }
            window.addEventListener('orientationchange', rescale);
            rescale();
        }
        if (!isPad) {
            vertCenterBook(window.innerHeight);
        }
        loadAssets();
    }

    elementSize();

    tester();
}
function Dialog(curXmlObj, key) {
    var scope = this;
    this.name = getValue(curXmlObj, 'ObjName');
    this.ident = 'page ' + (key + 1) + ' - ' + this.name
    this.background = getValue(curXmlObj, 'ObjBackgroundImage');
    this.height = parseInt(getValue(curXmlObj, 'Height'));
    this.width = parseInt(getValue(curXmlObj, 'Width'));


    this.dialogWin = document.createElement('div');
    this.dialogWin.setAttribute('id', this.ident + ' - win');
    this.dialogWin.setAttribute('class', 'dialogWindow');
    book.dialog.container.appendChild(this.dialogWin);

    this.dialogTop = document.createElement('div');
    this.dialogTop.setAttribute('id', this.ident + ' - top');
    this.dialogTop.setAttribute('class', 'dialogTop');
    this.dialogWin.appendChild(this.dialogTop);

    this.elem = document.createElement('div');
    this.elem.setAttribute('id', this.ident);
    this.elem.setAttribute('class', 'dialog');
    this.dialogWin.appendChild(this.elem);


    this.buttonsXML = curXmlObj.getElementsByTagName("Button");
    this.buttons = [];
    for (var b = 0; b < this.buttonsXML.length; b++) {
        var bXML = this.buttonsXML[b];
        this.buttons.push(new DialogButton(bXML));
    }
    function DialogButton(bXML) {
        var button = this;
        this.name = getValue(bXML, 'ButtonName');
        this.associatedLink = getValue(bXML, 'SendClickTo', true);
        this.rect = splitAndFloat(getValue(bXML, 'ButtonRect'), ',');
        this.left = this.rect[0];
        this.top = this.rect[1];
        this.right = this.rect[2];
        this.bottom = this.rect[3];
        this.height = this.bottom - this.top;
        this.width = this.right - this.left;
        this.closeOnClick = getValue(bXML, 'CloseOnClick');

        this.elem = document.createElement('div');
        this.elem.setAttribute('id', scope.ident + ' - button ' + this.name);
        this.elem.setAttribute('class', 'dialogButton');
        this.elem.setAttribute('ident', this.name);
        scope.elem.appendChild(this.elem);

        $(this.elem).css({
            'position': 'absolute',
            'top': this.top,
            'left': this.left,
            'height': this.height,
            'width': this.width,
        });
        if (this.closeOnClick) {
            $(this.elem).click(function () {
                if (button.associatedLink) {
                    var lnkName = button.associatedLink;
                    var loc = book[key].linkKey[lnkName];
                    var lnk = book[key][loc.type][loc.pos];
                    curSequence = new sequence(lnk.targets, book[key], lnkName);
                    curSequence.start();
                }
                scope.close();
            });
        }
    }


    $(this.dialogTop).mousedown(function (e) {
        var windowLoc = $(".dialogWindow").offset();
        book.dialog.dragOffsets = [e.clientX - windowLoc.left, e.clientY - windowLoc.top];
        book.dialog.dragging = scope;
    });


    // left is not accounting for pDisplay
    $(this.dialogWin).css({
        'height': this.height,
        'width': this.width,
        'top': (maxDim[0] / 2) - (this.height / 2),
        'left': (maxDim[1] - ((maxDim[1] / 2) * (1))) - (this.width / 2),
        'position': 'absolute',
        'z-index': 101,
        'border': '8px solid white',
        'border-top': '32px solid white',
    });

    $(this.elem).css({
        'background-image': 'url(images/' + this.background + ')',
        'background-size': '100% 100%',
        'height': this.height,
        'width': this.width,
        'position': 'absolute',
        'top': 0,
        'left': 0,
        'z-index': 102,
    });


    this.open = function () {
        $('#dialogC .dialogWindow').css({
            'visibility': 'hidden',
        });
        $(this.dialogWin).css({
            'visibility': 'visible',
        });
        book.dialog.container.style.visibility = 'visible';
        book.dialog.open = true;
    }
    this.close = function () {
        $('#dialogC .dialogWindow').css({
            'visibility': 'hidden',
        });
        book.dialog.container.style.visibility = 'hidden';
        book.dialog.open = false;
    }

    book[key].dialogKey[this.name] = book[key].dialogs.length;
    book[key].dialogs.push(this);
}
function Button(curXmlLnk, triggers, key) {
    this.name = getValue(curXmlLnk, "Name").toString();
    this.type = getValue(curXmlLnk, "ButtonStyle").toString();
    if (this.type == 'radiobutton') {
        this.parentName = getValue(curXmlLnk, "ParentButton");
    } else {
        this.parentName = this.name;
    }
    this.isParent = false;
    this.parentObj = false;
    if (this.name == this.parentName) {
        this.isParent = true;
        this.parentObj = this;
        this.childFlash = false;
    } else {
        this.parentObj = book[key].buttons[book[key].buttonKey[this.parentName]];
    }
    this.linkType = 'button';
    this.rect = splitAndInt(getValue(curXmlLnk, "ButtonRect"), ',');
    this.top = this.rect[0];
    this.left = this.rect[1];
    this.right = this.rect[2];
    this.bottom = this.rect[3];
    this.height = this.bottom - this.top;
    this.width = this.right - this.left;
    this.inner = this.name;

    this.width = Math.max(this.width, 22);
    this.height = Math.max(this.height, 22);

    this.pts = [];
    this.pts.push({x: this.rect[1], y: this.rect[0]});
    this.pts.push({x: this.rect[1] + 22, y: this.rect[0]});
    this.pts.push({x: this.rect[1] + 22, y: this.rect[0] + 22});
    this.pts.push({x: this.rect[1], y: this.rect[0] + 22});
    this.origPts = this.pts;

    this.pinnedTo = '';
    this.lineDraw = 'none';

    var b = {};
    b.height = b.width = 22;
    b.img = new Image();

    this.bubble = b;


    if (triggers) {
        // Types of links (click drop)
        this.action = getValue(triggers, "TriggerType");
        var splitReturn = this.action.split(",");
        if (!splitReturn[1]) {
            splitReturn[1] = "any"
        }
        this.requires = splitReturn[1].toString();
    }
    var xmlTargs = triggers.getElementsByTagName("Target");
    var targReturn = [];

    if (xmlTargs && xmlTargs[0] && xmlTargs[0].childNodes && xmlTargs[0].childNodes[0] != undefined) {
        for (targ in xmlTargs) {
            var curTarg = xmlTargs[targ];
            if (typeof curTarg == "object") {
                var targType = getValue(curTarg, "Type");
                var targAction = getValue(curTarg, "Action");
                var targDest = getValue(curTarg, "Destination");
                var returnArr = [];
                returnArr.push(targType);
                returnArr.push(targAction);
                returnArr.push(targDest);
                if (targType == "Audio") {
                    if (!spriteKey) {
                        bufArr[key].push(targDest + ".audio");
                    }
                    book[key].auds[targDest] = {};
                }
                targReturn.push(returnArr);
            }
        }
    }
    if (targReturn.length != 0) {
        this.targets = targReturn;
    }

    this.flash = false;
    this.font = {};
    this.font.name = getValue(curXmlLnk, "ButtonTextFont");
    this.font.size = getValue(curXmlLnk, "ButtonTextSize");
    this.font.style = getValue(curXmlLnk, "ButtonTextStyle");
    this.font.color = rgb2hex(getValue(curXmlLnk, "ButtonTextColor"));
    this.initialHighlight = (getValue(curXmlLnk, "InitialHighlight") == 'true');
    this.autoHighlight = false;
    this.enabled = (getValue(curXmlLnk, "InitialStatus") == 'enabled');

    this.on = function () {
        var button = this;
        var flashTime = 75;
        if (this.state == 'on') {
            this.parentObj.childFlash = true;

            f = 4;
            for (var i = 0; i < f; i++) {
                if (i % 2) {
                    window.setTimeout(function () {
                        button.state = 'on';
                        book[key].redraw();
                    }, flashTime * i);
                } else {
                    window.setTimeout(function () {
                        button.state = 'off';
                        book[key].redraw();
                    }, flashTime * i);
                }
            }
            window.setTimeout(function () {
                button.parentObj.childFlash = false;
            }, f * flashTime);
        } else {
            //book[key].toggleButtons(this.parentName);
            this.state = 'on';
            book[key].redraw();
        }
    }
    this.hover = function () {
        if (this.state == 'hover') {
        } else {
            this.state = 'hover';
            buttonHoverName = this.name;
            book[key].redraw();
        }
    }
    this.off = function () {
        if (this.state == 'off') {
        } else {
            this.state = 'off';
            book[key].redraw();
        }
    }
    this.state = 'on';
    this.off();


    book[key].buttonKey[this.name] = book[key].buttons.length;
    book[key].buttons.push(this);
}
function Graphic(curXmlLnk, triggers, key) {
    this.name = getValue(curXmlLnk, "Name").toString();
    this.linkType = 'graphic';
    // Points into PointInPoly format
    var tmpPts = getValue(curXmlLnk, "Points");
    if (tmpPts) {
        tmpPts = tmpPts.split(".");
        this.pts = [];
        for (pt in tmpPts) {
            this.pts.push({});
            var ptX = parseFloat(tmpPts[pt].split(",")[0]);
            var ptY = parseFloat(tmpPts[pt].split(",")[1]);
            this.pts[pt].x = ptX;
            this.pts[pt].y = ptY;
        }
        this.origPts = this.pts;
    } else {
        this.pts = false;
    }

    if (triggers) {
        // Types of links (click drop)
        this.action = getValue(triggers, "TriggerType");
        var splitReturn = this.action.split(",");
        if (!splitReturn[1]) {
            splitReturn[1] = "any"
        }
        this.requires = splitReturn[1].toString();
    }


    var xmlTargs = triggers.getElementsByTagName("Target");
    var targReturn = [];

    this.lineDraw = getValue(curXmlLnk, "LineDrawing", true);
    if (this.lineDraw && this.lineDraw != "none") {
        splitReturn[0] = 'startLine';
        splitReturn[1] = this.lineDraw;
        this.action = 'mouseDown';
    }
    if (xmlTargs && xmlTargs[0] && xmlTargs[0].childNodes && xmlTargs[0].childNodes[0] != undefined) {
        for (targ in xmlTargs) {
            var curTarg = xmlTargs[targ];
            if (typeof curTarg == "object") {
                var targType = getValue(curTarg, "Type");
                var targAction = getValue(curTarg, "Action");
                var targDest = getValue(curTarg, "Destination");
                var returnArr = [];
                returnArr.push(targType);
                returnArr.push(targAction);
                returnArr.push(targDest);
                if (targType == "Audio") {
                    if (!spriteKey) {
                        bufArr[key].push(targDest + ".audio");
                    }
                    book[key].auds[targDest] = {};
                }
                targReturn.push(returnArr);
            }
        }
    }
    if (targReturn.length != 0) {
        this.targets = targReturn;
    }
    //   NOTE redo this when you get to animation. Consider each target as a function, 

    // finding which action array to push links into
    var linkArrayName = false;
    if (splitReturn[0] == "click") {
        linkArrayName = "clicks";
    } else if (splitReturn[0] == "drop") {
        linkArrayName = "drops";
    } else if (splitReturn[0] == "startLine") {
        linkArrayName = "lineStarts";
    } else if (splitReturn[0] == "endLine") {
        linkArrayName = "lineEnds";
    } else if (splitReturn[0] == "Open Page" || splitReturn[0] == "Open Page First Time") {
        if (book[key].pageOpens)
            var firsttime = false;
        var everytime = false;
        for (var pl = 0; pl < book[key].pageOpens.length; pl++) {
            if (book[key].pageOpens[pl].action == "Open Page First Time") {
                firsttime = true;
            } else if (book[key].pageOpens[pl].action == "Open Page") {
                everytime = true;
            }
        }
        if (splitReturn[0] == "Open Page" && everytime) {
            console.error('multiple Open Page links, only the first in XML will work');
            linkArrayName = 'dumped';
        } else if (splitReturn[0] == "Open Page First Time" && firsttime) {
            console.error('multiple Open Page First Time links, only the first in XML will work');
            linkArrayName = 'dumped';
        } else {
            linkArrayName = "pageOpens";
        }
    } else {
        console.error("ERROR - unknown TriggerType (page " + key + ")  -- " + splitReturn[0]);
    }
    // getting the length of said array
    var idInActionArr = 'unknown';
    if (linkArrayName) {
        idInActionArr = book[key][linkArrayName].length;
    }
    // Pinning
    this.pinnedTo = getValue(curXmlLnk, "PinnedTo", true);
    if (this.pinnedTo) {
        this.pinnedTo = this.pinnedTo.toString();
    }
    this.autoHighlight = Boolean(getValue(curXmlLnk, "AutoHighlightLink", true));
    var initStatus = getValue(curXmlLnk, "InitialStatus", true) || 'enabled';
    if (initStatus == 'enabled') {
        this.enabled = true;
    } else {
        this.enabled = false;
    }
    if (this.pinnedTo) {
        var objIfExists = book[key].objs[this.pinnedTo];
        if (objIfExists) {
            book[key].objs[this.pinnedTo].carryLink = idInActionArr;
            book[key].objs[this.pinnedTo].carryType = linkArrayName;
        } else {
            console.error("Link " + this.name + " cannot be pinned to object " + this.pinnedTo + "... Object does not exist -- Error on page " + key);
        }
    }


    if (linkArrayName) {
        // Adding link to linkKey object, for easy lookup later
        book[key].linkKey[this.name] = {};
        var keyForLink = book[key].linkKey[this.name];
        keyForLink.pos = book[key][linkArrayName].length;
        keyForLink.type = linkArrayName;

        // Adding link to action array
        book[key][linkArrayName].push(this);
    }
}
function Page(key, curXmlPage) {
    var divElem = document.createElement("div");
    var canElem = document.createElement("canvas");
    var bufElem = document.createElement("canvas");
    var loadCont = document.createElement("div");

    // Canvas (draw and buf) elements
    divElem.setAttribute("id", "div" + key);
    divElem.setAttribute("class", "pDiv");
    canElem.setAttribute("height", maxDim[0] * resMult);
    canElem.setAttribute("width", maxDim[1] * resMult);
    canElem.setAttribute("id", "can" + key);
    canElem.setAttribute("class", "can");
    bufElem.setAttribute("height", maxDim[0] * resMult);
    bufElem.setAttribute("width", maxDim[1] * resMult);
    bufElem.setAttribute("id", "buf" + key);
    bufElem.setAttribute("class", "buf");
    bookC.appendChild(divElem);
    divElem.appendChild(canElem);
    canElem.style.height = maxDim[0];
    canElem.style.width = maxDim[1];
    divElem.appendChild(bufElem);

    loadCont.setAttribute("id", "loadC" + key);
    loadCont.setAttribute("class", "loadC");
    divElem.appendChild(loadCont);


    if (pDisplay == 'BlockSpread' && key !== 0) {
        dupDiv = document.createElement("div");
        dupDiv.setAttribute("id", "dup" + key);
        dupDiv.setAttribute("class", "dupDiv");
        bookC.appendChild(dupDiv);
        var dupElem = document.createElement("canvas");
        dupElem.setAttribute("height", maxDim[0] * resMult);
        dupElem.setAttribute("width", maxDim[1] * resMult);
        dupElem.setAttribute("id", "dup" + key);
        dupElem.setAttribute("class", "dup");
        dupDiv.appendChild(dupElem);
        dupElem.style.height = maxDim[0];
        dupElem.style.width = maxDim[1];
        this.DUP = dupDiv;
        this.DUPCAN = dupElem;
        $(this.DUP).css({"height": maxDim[0], "width": maxDim[1]});
        $(this.DUPCAN).css({"left": -maxDim[1] / 2, "position": "absolute"});
    }

    this.DIV = divElem;
    $(this.DIV).css({"height": maxDim[0], "width": maxDim[1]});
    this.CAN = canElem;
    this.BUF = bufElem;
    this.change = false;
    this.activeClones = 0;
    this.reload = function () {
        for (var obj = 0; obj < this.objKey.length; obj++) {
            curObj = this.objs[this.objKey[obj]];
            if (curObj.type == 'video') {
                curObj.vis = curObj.initVis;
                curObj.elem.style.visibility = curObj.vis;
            } else {
                if (curObj.cloneID) {
                    // delete clone from objs
                    delete this.objs[this.objKey[obj]];
                    // delete clone name from objKey
                    this.objKey.splice(obj, 1);
                    // array is now one item shorter, -- loop var to compensate
                    obj--;
                    // One less clone
                    this.activeClones--;
                } else {
                    if (curObj.anim) {
                        curObj.anim.AT = false;
                    }
                    curObj.vis = curObj.initVis;
                    curObj.top = curObj.initTop;
                    curObj.left = curObj.initLeft;
                    curObj.width = curObj.initWidth;
                    curObj.height = curObj.initHeight;
                }
            }
        }
        for (lnk in this.clicks) {
            this.clicks[lnk].pts = this.clicks[lnk].origPts;
        }
        for (lnk in this.drops) {
            this.drops[lnk].pts = this.drops[lnk].origPts;
        }
        for (lnk in this.lineEnds) {
            this.lineEnds[lnk].pts = this.lineEnds[lnk].origPts;
        }
        this.redraw();
    }
    this.redraw = function () {

        var pageElem = this;
        // Clear the buffer canvase
        this.BUF.width = this.BUF.width;
        var btx = this.BUF.getContext('2d');
        var resetTop = 0;
        var resetLeft = 0;
        for (obj in this.objKey) {
            var curObj = this.objs[this.objKey[obj]];
            if (curObj.type == 'video') {
                if (isPad) {
                    curObj.elem.controls = true;
                } else {
                    curObj.elem.controls = false;
                }

                $("#" + curObj.name).css({
                    "top": curObj.top,
                    "left": curObj.left,
                    "height": curObj.height,
                    "width": curObj.width,
                    "visibility": curObj.vis
                });

            } else if (curObj.type == 'highlighter' && curObj.vis == 'show') {
                drawHighlighter(curObj);
            } else if (curObj.type == "drawing" && curObj.drawn == true) {
                curObj.draw(true);
            } else {
                // Redraw / Move each object
                drawObj(curObj);

                // if object has been moved
                var leftDif = curObj.initLeft - curObj.left;
                var topDif = curObj.initTop - curObj.top;
                leftDif /= resMult;
                topDif /= resMult;
                if (leftDif != 0 || topDif != 0) {
                    // Carry pinned links
                    var curCarry = curObj.carryLink;
                    var curType = curObj.carryType;
                    if (curType) {
                        var curPts = this[curType][curCarry].origPts;
                        for (var p = 0; p < curPts.length; p++) {
                            this[curType][curCarry].pts[p].x = curPts[p].x - leftDif;
                            this[curType][curCarry].pts[p].y = curPts[p].y - topDif;
                        }
                    }
                }
            }
        }
        for (line in this.linesOnPage) {
            drawLine(this.linesOnPage[line]);
        }
        if (this.highlightedLink) {
            var defaultHighlightColor = 'RGBA(128,255,255,0.5)';
            btx.fillStyle = (book.highlightLinkColor || defaultHighlightColor);
            var pts = this.highlightedLink;
            btx.moveTo(pts[0].x * resMult, pts[0].y * resMult);
            for (var p = 1; p < pts.length; p++) {
                btx.lineTo(pts[p].x * resMult, pts[p].y * resMult);
            }
            btx.closePath();
            btx.fill();
        }
        for (button in this.buttons) {
            var button = this.buttons[button];
            var state = button.state;
            var stateName = false;
            var img = false;
            if (state == 'on') {
                stateName = 'active';
            } else if (state == 'off') {
                stateName = 'inactive';
            } else if (state == 'hover') {
                stateName = 'hover';
            }
            var typeName = false;
            if (button.type == 'radiobutton') {
                typeName = 'radio';
            } else if (button.type == 'checkbox') {
                typeName = 'checkbox';
            }
            var fileName = typeName + '_' + stateName;
            img = book.presetImages[fileName];
            btx.drawImage(img, button.left, button.top, 22, 22);

            var text = ' ' + button.inner;
            var font = button.font;
            btx.font = font.size + 'pt ' + font.name;
            var pos = [button.left + 22, (button.top + 22) - ((font.size * 1.3333) / 4)];
            btx.fillText(text, pos[0], pos[1]);
        }
        function moveLink(curLink) {

        }

        function drawHighlighter(hi) {
            btx.fillStyle = hi.color;
            btx.fillRect(hi.left, hi.top, hi.width, hi.height);
        }

        function drawLine(curLine) {
            btx.beginPath();
            btx.moveTo(curLine[0][0], curLine[0][1]);
            btx.lineTo(curLine[1][0], curLine[1][1]);
            btx.stroke();
        }

        function drawObj(curObj) {
            var curElem = curObj.elem;
            btx.translate(-resetLeft, -resetTop);
            resetLeft = 0;
            resetTop = 0;
            // object has animation and object IS animating
            if (curObj.anim && curObj.anim.AT) {
                var curData = curObj.anim[curObj.anim.active].data[curObj.anim.AT];
                btx.restore();
                // log(curObj);
                if (curData) {
                    btx.globalAlpha = curData.opacity;
                    resetLeft += curData.left;
                    resetLeft += curData.width / 2;
                    resetTop += curData.top;
                    resetTop += curData.height / 2;

                    btx.translate(resetLeft, resetTop);
                    btx.rotate(curData.rot);
                    curObj.left = curData.left;
                    curObj.top = curData.top;
                    curObj.height = curData.height;
                    curObj.width = curData.width;
                    try {
                        btx.drawImage(curElem, -1 * (curData.width / 2), -1 * (curData.height / 2), curData.width, curData.height);
                    }
                    catch (e) {
                    }
                    btx.rotate(-1 * curData.rot);
                } else {
                    console.error(curObj);
                    console.error(curObj + "'s animation data is undefined");
                }
            } else {
                var offsets = [0, 0];
                if (curObj.movement) {
                    var curMove = curObj.movement;
                    var pos = absPos;
                    var midway = [maxDim[1] / 2, maxDim[0] / 2];
                    var sway = [(pos[0] - midway[0]) / midway[0], (pos[1] - midway[1]) / midway[1]];
                    if (curMove.cause == 'mouse') {
                        offsets[0] = curMove.hori * sway[0];
                        offsets[1] = curMove.vert * sway[1];
                        if (curMove.inverted) {
                            offsets[0] *= -1;
                            offsets[1] *= -1;
                        }
                    }
                }

                // NOTE if we want to add obj init opacity, reset it here
                btx.restore();
                btx.globalAlpha = 1;
                if (curObj.vis == "show" && curElem) {
                    try {
                        btx.drawImage(curElem, curObj.left + offsets[0], curObj.top + offsets[1], curObj.width, curObj.height);
                    }
                    catch (e) {
                    }
                }
            }
        }

        // Clear shown canvas
        this.CAN.width = this.CAN.width;
        var ctx = this.CAN.getContext('2d');
        ctx.drawImage(this.BUF, 0, 0);
        if (this.DUPCAN) {
            this.DUP.width = this.DUP.width;
            var dtx = this.DUPCAN.getContext('2d');
            dtx.drawImage(this.BUF, 0, 0);
        }

        // Check if drawing tools are in use (this.drawingTools.cur) and draw workspaces
        var curTool = this.drawingTools.cur;
        if (curTool && curTool !== 'navigation') {
            var workspaces = this.workspaces;
            for (var i in workspaces) {
                var curSpace = workspaces[i];
                var elem = curSpace.elem;
                var viz = 'hidden';
                if (curSpace.enabled) {
                    viz = 'visible';
                }
                $(elem).css({
                    "top": curSpace.top,
                    "left": curSpace.left,
                    "height": curSpace.height,
                    "width": curSpace.width,
                    'visibility': viz
                });
                curSpace.redraw();
            }
        }
    }
    this.toggleButtons = function (parentName, except) {
        for (var b = 0; b < this.buttons.length; b++) {
            var cur = this.buttons[b];
            if (cur.parentName == parentName) {
                if (cur.name != except) {
                    cur.off();
                }
            }
        }
    }

    this.loadCont = loadCont;
    this.loaded = false;
    this.progressgraph = false;

    this.dialogs = [];
    this.dialogKey = {}
    this.objs = [];
    this.objKey = [];
    this.buttons = [];
    this.buttonKey = {};
    this.workspaces = [];
    this.workspaceKey = [];
    this.auds = [];
    this.highlightedLink = false;
    this.clicks = [];
    this.drops = [];
    this.lineStarts = [];
    this.lineEnds = [];
    this.pageOpens = [];
    this.linesOnPage = [];
    this.drawingsOnPage = [];
    this.linkKey = {};
    this.ident = key + 1;

    this.dumped = [];

    this.drawingTools = drawingToolsDefault;
    this.objMovement = false;
}
function PObject(curXmlObj, key) {
    var tmpReturn = {};
    var tmpPos = getValue(curXmlObj, "ObjInitTopLeft", true);
    // this will act as holding cell for all page objects.
    this.name = getValue(curXmlObj, "ObjName");

    if (typeof badImages != 'undefined' && badImages[this.name]) {
        console.error("Object " + this.name + " not found, skipping");
    } else {
        tmpFileName = getValue(curXmlObj, "ObjFileName", true) || this.name;
        this.name = this.name;
        this.type = getValue(curXmlObj, "ObjType", true) || 'image';

        this.locInKey = objKey;
        this.fileName = tmpFileName;

        var tmpRect = getValue(curXmlObj, "ObjInitRect", true);
        if (tmpRect) {
            var rectSplit = splitAndFloat(tmpRect, ',');
            this.left = rectSplit[0];
            this.top = rectSplit[1];
            this.right = rectSplit[2];
            this.bottom = rectSplit[3];
            this.height = this.bottom - this.top;
            this.width = this.right - this.left;
        } else if (tmpPos) {
            this.height = Number(getValue(curXmlObj, "ObjInitHeight") * resMult);
            this.width = Number(getValue(curXmlObj, "ObjInitWidth") * resMult);
            var posSplit;
            if (tmpPos) {
                posSplit = tmpPos.split(',');
            }
            this.top = Number(posSplit[0] || 0) * resMult;
            this.left = Number(posSplit[1] || 0) * resMult;
        } else {
            console.error('cannot read object position or initial rect');
        }
        this.top = parseFloat(this.top);
        this.left = parseFloat(this.left);
        this.height = parseFloat(this.height);
        this.width = parseFloat(this.width);

        this.layer = Number(getValue(curXmlObj, "ObjLayer"));
        this.initVis = getValue(curXmlObj, "ObjInitVis", true) || 'hide';
        this.carryLink = false;
        this.carryType = false;

        this.initHeight = this.height;
        this.initWidth = this.width;
        this.initTop = this.top;
        this.initLeft = this.left;

        var curMob = getValue(curXmlObj, "ObjMobility", true);
        if (curMob) {
            if (curMob == "static") {
                this.mobility = false;
            } else {
                if (curMob == "draggable" || curMob == "dragable") {
                    this.mobility = 'drag';
                } else if (curMob == "cloneable" || curMob == "clonable") {
                    this.mobility = 'clone';
                }
                this.animating = false;
            }
        }
        this.vis = this.initVis || this.enabled;


        // Movement handled here
        this.movement = getValue(curXmlObj, "ObjMovement", true);
        if (this.movement) {
            book[key].objMovement = true;
            this.movement = {};
            var curXmlMove = curXmlObj.getElementsByTagName("ObjMovement")[0];
            var curMove = this.movement;
            curMove.hori = Number(getValue(curXmlMove, "Hori"));
            curMove.vert = Number(getValue(curXmlMove, "Vert"));
            curMove.cause = getValue(curXmlMove, "Cause");
            curMove.interval = Number(getValue(curXmlMove, "Interval"));
            if (isNaN(curMove.interval)) {
                curMove.interval = false;
            }
            curMove.inverted = Boolean(getValue(curXmlMove, "Inverted"));
            curMove.type = getValue(curXmlMove, "Type");
            curMove.form = curMove.type[0];
            curMove.speed = curMove.type[1];
        }

        // Animation handled here
        var animParent = curXmlObj.getElementsByTagName("ObjAnimations");
        if (animParent[0]) {
            var animLength = 0;
            if (animParent[0]) {
                animLength = animParent[0].childNodes.length;
                this.anim = {};
            }
            for (k = 0; k < animLength; k++) {
                var animObj = animParent[0].childNodes[k];
                var xmlAnimData = getValue(animObj, "AnimationData");
                var xmlAnimName = getValue(animObj, "AnimationName");
                if (xmlAnimData != "") {
                    this.anim[xmlAnimName] = {};
                    var curAnim = this.anim[xmlAnimName];
                    var tmpAnimShape = getValue(animObj, "AnimationShape", true);
                    if (tmpAnimShape) {
                        if (tmpAnimShape == 'image' || tmpAnimShape == 'polygon' || tmpAnimShape == 'circle' || tmpAnimShape == 'square') {
                            // Image specific object
                            curAnim.endUp = Boolean(getValue(animObj, "FinishUnrotated"));
                            curAnim.type = "image";
                        } else if (tmpAnimShape == "graphic") {
                            // Graphic specific object
                            curAnim.width = getValue(animObj, "ObjLineWidth");
                            curAnim.color = rgb2hex(getValue(animObj, "ObjLineColor"));
                            curAnim.type = "graphic";
                        }
                    } else {
                        // No longer trapping for animation shape
                    }
                    // Global anim objs for both images and graphics
                    curAnim.data = [];
                    var xmlLineSplit;
                    if (xmlAnimData) {
                        xmlLineSplit = xmlAnimData.split(":");
                        if (xmlLineSplit.length == 1 && xmlAnimData.split(";").length > 1) {
                            xmlLineSplit = xmlAnimData.split(";");
                        }
                    } else {
                        break;
                    }
                    var returnLines = [];
                    // Parsing out the xml animation legs given
                    for (line = 0; line < xmlLineSplit.length; line++) {
                        var xmlElemSplit = xmlLineSplit[line].split("|");
                        if (xmlElemSplit[5]) {
                            var xmlElemPrev = false;
                            if (xmlLineSplit[line - 1]) {
                                xmlElemPrev = xmlLineSplit[line - 1].split("|")
                            }
                            var returnObj = {};
                            returnObj.top = parseInt(xmlElemSplit[0].split(",")[0]);
                            returnObj.left = parseInt(xmlElemSplit[0].split(",")[1]);
                            returnObj.height = xmlElemSplit[1];
                            if (returnObj.height.slice(-1) == "%") {
                                returnObj.height = (parseFloat(returnObj.height) / 100) * this.height;
                            }
                            returnObj.width = xmlElemSplit[2];
                            if (returnObj.width.slice(-1) == "%") {
                                returnObj.width = (parseFloat(returnObj.width) / 100) * this.width;
                            }
                            // These two lines change the TOP and LEFT to center center. This is what Ray is giving me, but I doubt he knows.
                            returnObj.top -= parseInt(returnObj.height / (2 * resMult));
                            returnObj.left -= parseInt(returnObj.width / (2 * resMult));

                            returnObj.top *= resMult;
                            returnObj.left *= resMult;
                            returnObj.opacity = xmlElemSplit[3];
                            if (returnObj.opacity.slice(-1) == "%") {
                                returnObj.opacity = (parseFloat(returnObj.opacity) / 100);
                            }
                            if (xmlElemPrev) {
                                returnObj.time = xmlElemPrev[5]
                            }
                            returnObj.rot = 0;
                            if (xmlElemPrev) {
                                returnObj.rot = parseFloat(xmlElemPrev[4]);
                            }
                            returnLines.push(returnObj);
                        }
                    }
                    // Adding all the inbetween frames from what is parsed
                    // NOTE if we add animation smoothing, it should be done here
                    var returnLinesFull = [];
                    var timeWatch = 0;
                    for (line in returnLines) {
                        var playTime = returnLines[line].time;
                        if (playTime) {
                            var frameRate = 40;
                            var start = returnLines[line - 1];
                            var end = returnLines[line];
                            var difTop = end.top - start.top;
                            var difLeft = end.left - start.left;
                            var difHeight = end.height - start.height;
                            var difWidth = end.width - start.width;
                            var difOpacity = Math.round(100 * (end.opacity - start.opacity)) / 100;
                            start.top = parseInt(start.top);
                            start.left = parseInt(start.left);
                            start.height = parseInt(start.height);
                            start.width = parseInt(start.width);
                            start.rot = parseFloat(end.rot);
                            var subCount = Math.floor(playTime * 1000 / frameRate);

                            for (i = 1; i <= subCount; i++) {
                                var step = i / subCount;
                                var returnObj = {};
                                returnObj.top = Math.round(start.top + (difTop * step));
                                returnObj.left = Math.round(start.left + (difLeft * step));
                                returnObj.width = Math.round(start.width + (difWidth * step));
                                returnObj.height = Math.round(start.height + (difHeight * step));
                                returnObj.opacity = start.opacity + (difOpacity * step);
                                returnObj.rot = Math.PI / 180 * (360 * Math.round(start.rot * (step) * 100) / 100);
                                returnLinesFull.push(returnObj);
                            }
                        }
                    }
                    curAnim.data = returnLinesFull;
                    this.anim.AT = false;
                    this.anim.active = false;
                    if (curAnim.data[0]) {
                        curAnim.data[0].rot = 0;
                    } else {
                        console.warn("problem with animation data on object " + this.name);
                        console.warn(this);
                    }
                }
            }
        }


        // construction
        if (this.type == 'image') {
            // god damn images are easy
            this.src = "images/" + tmpFileName + "." + getValue(curXmlObj, "ObjExt");
        } else if (this.type == 'video') {
            this.src = "videos/" + tmpFileName + "." + getValue(curXmlObj, "ObjExt");
            this.controller = getValue(curXmlObj, "ObjShowController");
            if (this.initVis == 'hide') {
                this.initVis = 'hidden';
                this.vis = 'hidden'
            } else if (this.vis && this.vis == 'show') {
                this.initVis = 'visible';
                this.vis = 'visible';
            }
            this.top /= resMult;
            this.left /= resMult;
            this.height /= resMult;
            this.width /= resMult;
        } else if (this.type == 'highlighter') {
            this.highlightStyle = getValue(curXmlObj, "HighlighterStyle").toLowerCase();
            this.audio = getValue(curXmlObj, "AudioFile", true) || false;
            this.waitAtEnd = getValue(curXmlObj, "WaitAtEnd");
            if (this.waitAtEnd) {
                this.waitAtEnd *= 1000;
            }
            var marks = splitAndFloat(getValue(curXmlObj, "Markers"), ',');
            marks.push(this.initWidth);
            var times = splitAndFloat(getValue(curXmlObj, "Timers"), ',');
            times.push(0);

            this.markers = [];
            this.timers = [];
            var lastTime = 0;
            for (var m = 0; m < Math.max(marks.length, times.length); m++) {
                var curMark = marks[m];
                var curTime = times[m];
                if (typeof curMark != "undefined") {
                    this.markers.push(curMark);
                }
                if (curTime) {
                    this.timers.push(curTime - lastTime);
                }
                lastTime = curTime;
            }
            this.color = "RGBA(" + getValue(curXmlObj, "Color") + ",";
            this.color += (getValue(curXmlObj, "Transparency") / 100) + ")";
            this.curMark = 0;
            this.timeout = false;
            this.pageInBook = key;
            this.clear = false;
            this.parentHighlighter = getValue(curXmlObj, "ParentHighlighter") || this.name;
            this.topHighlighter = false;
            if (this.name == this.parentHighlighter) {
                this.topHighlighter = true;
                this.markers.unshift(0);
                this.parentMarker = 0;
                this.waitForAudio = getValue(curXmlObj, "WaitForAudio", true);
                if (this.waitForAudio == 'false') {
                    this.waitForAudio = false;
                } else {
                    this.waitForAudio = true;
                }
                this.childLength = 1;
                this.childArr = [this];
                this.currentChild = 1;
                this.sequenceBlocking = getValue(curXmlObj, 'HighlighterExecution', true);
                if (this.sequenceBlocking == 'blocking') {
                    this.sequenceBlocking = true;
                } else if (this.sequenceBlocking == 'passive') {
                    this.sequenceBlocking = false;
                }
                this.parentObj = this;
            } else {
                this.parentObj = book[key].objs[this.parentHighlighter];
                this.sequenceBlocking = this.parentObj.sequenceBlocking;
                this.parentObj.childLength++;
                this.parentObj.childArr.push(this);
            }


            this.next = function () {
                var startMark = 0;
                var objThis = this;
                if (this.curMark < this.markers.length + startMark) {
                    var lastWidth = this.curWidth || 0;
                    var mark = this.markers[this.curMark];
                    actWait = objThis.parentObj.timers[objThis.parentObj.parentMarker] || 0;
                    this.curWidth = mark;
                    this.curMark++;
                    objThis.parentObj.parentMarker++;
                    var bookSpot = this.pageInBook;
                    if (this.highlightStyle == "cumulative") {
                        this.width = mark;
                    } else {
                        var actWidth = this.curWidth - lastWidth;
                        this.width = actWidth;
                        this.left = this.initLeft + lastWidth;
                    }
                    this.width *= resMult;
                    book[bookSpot].redraw();
                    this.nextTimeout = window.setTimeout(function () {
                        if (!objThis.clear) {
                            objThis.next();
                        }
                    }, actWait);
                } else {
                    objThis.vis = objThis.initVis;
                    if (objThis.parentObj.currentChild >= objThis.parentObj.childLength) {
                        // end of all child highlighters, continue with sequence if blocking.
                        curSequence.openHighlight = false;
                        if (objThis.sequenceBlocking) {
                            this.waitAtEndTimeout = window.setTimeout(function () {
                                if (!objThis.clear) {
                                    curSequence.next();
                                }
                            }, objThis.waitAtEnd);
                        }
                    } else {
                        // more child highlighters
                        objThis.parentObj.currentChild++;
                        var childAct = objThis.parentObj.childArr[objThis.parentObj.currentChild - 1];
                        childAct.start();
                    }
                }
            }
            this.start = function (start) {
                if (!start) {
                    start = 0;
                }
                var obj = this;
                obj.vis = 'show';
                obj.left = obj.initLeft * resMult;
                obj.top = obj.initTop * resMult;
                obj.height = obj.initHeight * resMult;
                obj.width = obj.initWidth * resMult;
                obj.curMark = 0;
                obj.curWait = 0;
                obj.curWidth = 0;
                obj.clear = false;
                curSequence.openHighlight = obj;
                if (obj.curwait) {
                    window.cleartimeout(obj.curwait);
                }
                obj.next(start);
            }
        } else if (this.type == 'workspace') {
            this.enabled = getValue(curXmlObj, "ObjInitStatus", true);
            if (this.enabled == 'enabled') {
                this.enabled = true;
                this.initVis = 'show';
            } else {
                this.initVis = 'hide';
                this.enabled = false;
            }

            this.pts = [];
            this.pts.push({x: this.left, y: this.top});
            this.pts.push({x: this.left + this.width, y: this.top});
            this.pts.push({x: this.left + this.width, y: this.top + this.height});
            this.pts.push({x: this.left, y: this.top + this.height});
            this.pageIdent = key;
            this.id = "page-" + key + '-workspace-' + this.name;
            var workspaceElem = document.createElement('canvas');
            workspaceElem.setAttribute("height", this.height * resMult);
            workspaceElem.setAttribute("width", this.width * resMult);
            workspaceElem.setAttribute("id", this.id);
            workspaceElem.setAttribute("class", "workspace");
            divElem.appendChild(workspaceElem);
            this.elem = document.getElementById(this.id);
            this.drawingsOnWorkspace = [];
            this.redraw = function () {
                this.elem.width = this.width;
                var ctx = this.elem.getContext('2d');
                // Draw lines in workspaces
                if (this.drawingsOnWorkspace.length) {
                    for (var i = 0; i < this.drawingsOnWorkspace.length; i++) {
                        ctx.beginPath();
                        var curDrawing = this.drawingsOnWorkspace[i];

                        // composite
                        if (curDrawing.type == 'eraser') {
                            curDrawing.GCO = 'destination-out';
                        } else if (curDrawing.type == 'highlighter') {
                            curDrawing.GCO = 'darker';
                        } else {
                            curDrawing.GCO = 'source-over';
                        }

                        var curPoints = curDrawing.points;
                        ctx.globalCompositeOperation = curDrawing.GCO;
                        ctx.strokeStyle = curDrawing.color;
                        ctx.lineWidth = curDrawing.thickness;
                        ctx.lineJoin = curDrawing.shape;
                        ctx.lineCap = curDrawing.shape;
                        var lastPoints = curPoints[0];
                        ctx.moveTo(curPoints[0][0], curPoints[0][1]);
                        for (var p = 1; p < curPoints.length; p++) {
                            var point = curPoints[p];
                            ctx.lineTo(point[0], point[1]);
                        }
                        ctx.stroke();
                    }
                }
            }
            this.reload = function () {
                this.elem.width = this.width;
                this.drawingsOnWorkspace = [];
            }
        } else if (this.type == 'drawing') {
            this.color = rgb2hex(getValue(curXmlObj, "Color"));
            var solid_or_dashed = getValue(curXmlObj, "SolidOrDashes");
            if (solid_or_dashed == "dashes") {
                this.solid = false;
            } else {
                this.solid = true;
            }
            this.lineWidth = getValue(curXmlObj, "LineWidth");
            this.origLoc = getValue(curXmlObj, "OrigLoc");
            this.tool = getValue(curXmlObj, "DrawnWith");
            var drawingPts = getValue(curXmlObj, "Points");
            this.pts = [];

            drawingPts = drawingPts.replace('  ', ' |');
            drawingPts = drawingPts.split(' ');
            var drawingTime = getValue(curXmlObj, "Times").split(' ');

            for (var p = 0; p < drawingPts.length; p++) {
                if (drawingPts[p] == "") {
                    drawingPts.splice(p, 1);
                    p--;
                }
            }
            // points are now good

            if (drawingPts.length != drawingTime.length) {
                console.error('Drawing fucked up');
            } else {

            }

            var lasttime = drawingTime[0];
            for (var p = 0; p < drawingTime.length; p++) {
                this.pts[p] = {};
                if (drawingPts[p] == "|") {
                    this.pts[p].x = "wait";
                    this.pts[p].y = "wait";
                } else {
                    var pts = drawingPts[p].split(',');
                    this.pts[p].x = Number(pts[0]);
                    this.pts[p].y = Number(pts[1]);
                }
                this.pts[p].t = Number(drawingTime[p] - lasttime);
                lasttime = drawingTime[p];
            }
            this.drawn = false;
            this.draw = function (instant) {
                if (this.drawn) {
                    this.drawn = false;
                    book[key].redraw();
                }
                this.drawn = true;
                var can = book[key].CAN;
                var ctx = can.getContext('2d');
                ctx.strokeStyle = this.color;
                ctx.lineJoin = "round";
                ctx.lineWidth = this.lineWidth;
                ctx.moveTo(this.pts[0].x, this.pts[0].y);
                ctx.beginPath();

                var p = 0;
                var THIS = this;
                this.next = function () {
                    p++;
                    var pts = this.pts[p];
                    if (pts) {
                        if (pts.x == "wait") {
                            ctx.moveTo(this.pts[p + 1].x, this.pts[p + 1].y);
                        } else {
                            ctx.lineTo(pts.x, pts.y);
                            ctx.stroke();
                        }
                        window.setTimeout(function () {
                            THIS.next();
                        }, pts.t);
                    } else {
                        console.log("drawing over");
                    }
                }
                this.all = function () {
                    for (var p = 0; p < this.pts.length; p++) {
                        if (this.pts[p].x == "wait") {
                            ctx.moveTo(this.pts[p + 1].x, this.pts[p + 1].y);
                        } else {
                            ctx.lineTo(this.pts[p].x, this.pts[p].y);
                            ctx.stroke();
                        }
                    }
                }
                if (instant) {
                    var start = new Date().getMilliseconds();
                    this.all();
                    var end = new Date().getMilliseconds();
                    console.log(start - end);
                } else {
                    this.next();
                }
                ctx.closePath();
            }

        }


        // assignment
        if (this.type == 'workspace') {
            // Pushing tmpReturn into book[current page][current object]
            book[key].workspaces[this.name] = this;
            // Adding all image names to objKey arr, for later use.
            book[key].workspaceKey.push(this);
        } else {
            // Pushing tmpReturn into book[current page][current object]
            book[key].objs[this.name] = this;
            // Adding all image sources to buffer array.
            bufArr[key].push(this.name + "." + this.type);
            // Adding all image names to objKey arr, for later use.
            book[key].objKey.push(this.name);
        }

    }
}


function getValue(parent, nodeName, silentError) {
    var tmpReturn = false;
    if (parent && parent.textContent) {
        try {
            tmpReturn = parent.getElementsByTagName(nodeName)[0].textContent;
        }
        catch (e) {
            if (!silentError) {
                /*
                 console.error("XML READ ERROR");
                 console.error("Cannot get value ");
                 console.error(nodeName);
                 console.error(" from parent element ");
                 console.error(parent);
                 */
                console.error("XML READ ERROR. Cannot get value " + nodeName + " from parent element " + parent);
                console.error(parent);
            }
        }
    }
    return tmpReturn;
}


function rescale() {
    $("#main").css({"height": 0, "width": 0});
    document.head.firstChild.content = 'width=device-width, initial-scale=1';
    var middle = $('#screen-middle').offset().left;
    window.setTimeout(function () {
        $("#main").css({"height": bookHeight + (15), "width": bookWidth + (10), 'opacity': 0});
        $("#main").animate({'opacity': 1}, 300);
        var curBookHeight = bookHeight + 15;
        var curBookWidth = (bookWidth + 10) + 150;
        var curScreenHeight, curScreenWidth;
        window.orientation = 90;
        if (window.orientation == 180 || window.orientation == 0) {
            curScreenHeight = screenHeight;
            curScreenWidth = screenWidth;
        } else {
            curScreenHeight = screenWidth;
            curScreenWidth = screenHeight;
        }
        curScreenHeight -= deviceTopBar;
        curScreenHeight = $('#screen-middle').offset().top * 2;
        curScreenWidth = $('#screen-middle').offset().left * 2;
        viewportScale = Math.min(Math.min(curScreenHeight / curBookHeight, curScreenWidth / curBookWidth), 1);
        console.log('SCREEN WIDTH ' + curScreenWidth);
        console.log('BOOK WIDTH ' + curBookWidth);
        console.log('SCREEN HEIGHT ' + curScreenHeight);
        console.log('BOOK HEIGHT ' + curBookHeight);
        console.log(viewportScale);
        document.head.firstChild.content = 'width=device-width, initial-scale=' + viewportScale + ', maximum-scale=' + viewportScale + ', minimum-scale=' + viewportScale + ', user-scalable=no';
        vertCenterBook(curScreenHeight);
        /*
         $("#background").css({"height":0,"width":0});
         $("#background").css({"height":"100%","width":"100%"});
         */
    }, 500);
}
function checkDrawingTools() {
    var pagesToCheck = [];
    var workspacesHit = false;
    if (pDisplay == 'Single') {
        pagesToCheck.push(curPage - 1);
    } else if (pDisplay == 'SingleSpread') {
        if (curPage == 1) {
            pagesToCheck.push(0);
        } else {
            pagesToCheck.push(curPage - 2);
            if (isEven(bookLength)) {
                if (curPage <= bookLength - 1) {
                    pagesToCheck.push(curPage - 1);
                }
            } else {
                if (curPage <= bookLength) {
                    pagesToCheck.push(curPage - 1);
                }
            }
        }
    } else if (pDisplay == 'BlockSpread') {
        // display work here.
    }
    for (var i = 0; i < pagesToCheck.length; i++) {
        var loc = pagesToCheck[i];
        var workspaces = book[loc].workspaceKey;
        for (var w = 0; w < workspaces.length; w++) {
            var workspace = book[loc].workspaces[workspaces[w]];
            if (workspace.enabled = 'true') {
                i = pagesToCheck.length;
                w = workspaces.length;
                workspacesHit = true;
            }
        }
    }
    if (workspacesHit) {
        if (!book.drawingTools.status) {
            book.drawingTools.status = true;
            animPlate('close');
            $("#plateCont").css("visibility", "visible");
        }
    } else {
        if (book.drawingTools.status) {
            book.drawingTools.status = false;
            $("#plateCont").css("visibility", "hidden");
            animPlate('close');
        }
    }
}






















</script>
		<script>function rand(min,max) {return Math.floor(Math.random()*(max-min+1)+min);}
var curFX;
function error(e,msg) {
	if (msg) {console.log(msg + " Error object follows...");}
	console.log(e);
}
function findBoundingRect(poly) {
	// top left bottom right
	var boundingRect = [pUnit,pUnit,0,0];
	for (pt in poly) {
		var x = poly[pt].x;
		var y = poly[pt].y;
		if (x>boundingRect[3]) {boundingRect[3] = x};
		if (x<boundingRect[1]) {boundingRect[1] = x};
		if (y>boundingRect[2]) {boundingRect[2] = y};
		if (y<boundingRect[0]) {boundingRect[0] = y};
	}
	return boundingRect;
}
function startFX(pageElem,lnkPoly,pt) {
	var rect = findBoundingRect(lnkPoly);
	var can = pageElem.CAN;
	var buf = pageElem.BUF;
	var img = false;
	try {
		img = can.getContext('2d').getImageData(0,0,maxDim[0],maxDim[1]);
	}
	catch (e){
		error(e,"Cannot use effect on a local computer running chrome. If this is a server, please allow cross-origin data.");
	}
	if (img) {
		// Pick an effect here
		// NOTE all effect WILL take the very same first args
		// ctx, btx, img, rect
		curFX = new Ripple(can,buf,lnkPoly,rect,pt,pageElem.CAN.height,pageElem.CAN.width);
	}
}
function Ripple(can,buf,poly,rect,pt,height,width) {
	var vertRatio = can.height / parseInt(can.style.height);
	var horiRatio = can.width / parseInt(can.style.width);
	// rect in top, left, bottom, right
	rect[0] *= vertRatio;
	rect[2] *= vertRatio;
	rect[1] *= horiRatio;
	rect[3] *= horiRatio;
	var ctx = can.getContext("2d");
	var btx = buf.getContext("2d");
	var tmpImageData = ctx.getImageData(rect[1],rect[0],rect[3]-rect[1],rect[2]-rect[0]);
	var imgInChunks = [];
	var cur = tmpImageData.data;
	for (var px = 0; px<tmpImageData.data.length; px+=4) {
		imgInChunks.push([[cur[px]],[cur[px+1]],[cur[px+2]],[cur[px+3]]]);
	}
	console.log("done");
	var circleTimer = window.setInterval(function() { 
		ctx.putImageData(tmpImageData, rect[1], rect[0]);
	},20);
}



</script>
		<script>var firstLoad = true, secondLoad = true, dragDropRect = true;
var testWait = 0;

function removeLoader() {
    if (spriteKey) {
        book.sprite.removeEventListener('load', removeLoader, false);
        book.sprite.removeEventListener('canplaythrough', removeLoader, false);
    }
    addUserControl();
}

function loadAssets() {
    /* firefox sucks
       function loadSprite() {
    // load sprite
    if (book.sprite) {
    // If sprite is loaded, set current time to new page.
    var pageKey = curPage - 1;
    if (pageKey == 0) {pageKey = 1}
    book.sprite.currentTime = spriteKey['page' + pageKey].start;
    nextBuffer(bufNum);
    }	else	{
    book.sprite = document.getElementById("audioController");
    if (isFirefox) {
    book.sprite.src = 'audio/sprite.ogg';
    }	else	{
    book.sprite.src = 'audio/sprite.mp3';
    }
    book.sprite.onerror = function(e) {
    console.error("audio sprite error ");
    console.error(e);
    }
    book.sprite.waitingForSilence = false;
    book.sprite.timeout = false;
    book.sprite.load();
    }
    }
    loadSprite();

    function startSprite() {
    document.getElementById('shade').removeEventListener("mouseup",startSprite);
    book.loader = new loader();

    // triggered once sound can play through.
    function startBuffer() {
    bufObjArr.push(new buffer());
    }

    if (spriteKey) {
    book.sprite.load();
    book.sprite.addEventListener("canplaythrough",startBuffer,false);
    book.sprite.addEventListener("load",startBuffer,false);
    }	else	{
    startBuffer();
    }
    }
    if (isPad) {
    document.getElementById('shade').addEventListener("mouseup",startSprite,false);
    }	else	{
    startSprite();
    }
    */
    if (book.sprite) {
        var pageKey = curPage - 1;
        if (pageKey == 0) {
            pageKey = 1
        }
        book.sprite.currentTime = spriteKey['page' + pageKey].start;
        nextBuffer(bufNum);
    } else {
        book.sprite = document.getElementById("audioController");
        if (isFirefox) {
            book.sprite.src = 'audio/sprite.ogg';
        } else {
            book.sprite.src = 'audio/sprite.mp3';
        }
        book.sprite.waitingForSilence = false;
        book.sprite.timeout = false;


        if (isPad) {
            document.getElementById('shade').addEventListener("mouseup", startSprite, false);
        } else {
            startSprite();
        }
    }



    function startSprite() {
        var shade = document.getElementById('shade');
        shade.removeEventListener("mouseup", startSprite);

        $("#tapPromptCentered").css("display","none");
        book.loader = new loader(shade);
        // triggered once sound can play through.
        function startBuffer() {
            if (bufObjArr.length < 1) {
                bufObjArr.push(new buffer());
                if (spriteFail) {
                    window.clearTimeout(spriteFail);
                    spriteFail = false;
                }
            }
        }

        if (spriteKey) {
            // emergency timeout.
            spriteFail = window.setTimeout(function () {
                console.warn("sprite did not load in time, skipping...");
                startBuffer();
            }, 2000)
            // sprite errors
            book.sprite.onerror = function (e) {
                console.error("audio sprite error, skipping...");
                console.error(e);
                startBuffer();
            }

            book.sprite.load();

            book.sprite.addEventListener("canplaythrough", startBuffer, false);
            book.sprite.addEventListener("load", startBuffer, false);
        } else {
            startBuffer();
        }
    }
}

function buffer() {
    var THIS = this;
    this.running = true;
    this.clear = false;
    this.path = false;
    var bufPageOrder = [], bufOrderFinal = [], unloadArr = [], bufNum = 0, absSwitch = 1, slotAddNum = 1, slot = 0, i = 0;
    function isLoaded(check) {
        if (bufArr[check + "load"] == true) {
            return true;
        } else {
            return false;
        }
    }
    for (page in book) {
        unloadArr.push(page);
        unloadArr[page] = true;
    }
    for (slot = curPage; i / 2 <= 2.5; i++) {
        if (slot > 0 && slot <= book.length) {
            bufPageOrder.push(slot);
            unloadArr[slot - 1] = false;
        }
        absSwitch *= -1;
        slot += (absSwitch * slotAddNum);
        slotAddNum++;
    }
    for (key in bufPageOrder) {
        for (elem in bufArr[bufPageOrder[key] - 1]) {
            var elem = bufArr[bufPageOrder[key] - 1][elem];
            bufOrderFinal.push("image," + elem + "," + bufPageOrder[key]);
        }
        bufOrderFinal.push("page," + bufPageOrder[key] + "," + bufPageOrder[key]);
        bufArr[(bufOrderFinal[key]-1) + 'at'] = 0;
    }
    // change to one hit only
    for (key in bufOrderFinal) {
        bufOrderFinal[key] = bufOrderFinal[key].split(",");
    }
    for (page in unloadArr) {
        var cur = unloadArr[page];
        if (cur && isLoaded(page)) {
            var pageObjKey = book[page].objKey;
            for (obj in pageObjKey) {
                if (book[page].objs[pageObjKey[obj]].type != 'video') {
                    delete book[page].objs[pageObjKey[obj]].elem;
                }
            }
            book[page].CAN.width = book[page].CAN.width;
            book[page].BUF.width = book[page].BUF.width;
            book[page].loaded = false;
            bufArr[page + 'at'] = 0;
        }
    }
    nextBuffer(0);
    // buffer the next object in the list.
    function nextBuffer(num) {
        bufNum++;
        if (THIS.clear) {
            //console.info("buffer has stopped at item " + bufNum);
            //console.info(bufOrderFinal);
            bufObjArr.splice(THIS.path, 1);
        } else {
            window.setTimeout(function() {
                var split = bufOrderFinal[num];
                if (split) {
                    //book[split[2]-1].progressgraph.update(5,10);
                    bufferElement(split[0], split[1], split[2] - 1);
                } else {
                    // NOTE fully buffered
                    THIS.running = false;
                }
            },testWait);
        }
    }
    function bufferElement(type, name, location) {
        if (firstLoad) {
            book.loader.update(bufNum-1,bufArr[0].length);
        }

        var splitName = name.split(".");
        if (splitName.length > 1) {
            var dotLen = splitName.length;
            type = splitName[dotLen - 1];
            name = splitName.splice(0, dotLen - 1).join(".");
        }
        if (isNaN(location)) {
            location = name;
        }
        pageLoc = book[location];
        if (type == "image") {
            if (book[location].objs[name].elem) {
                // book[location].redraw();
                nextBuffer(bufNum);
            } else {
                book[location].objs[name].elem = new Image();
                var canvas = pageLoc.BUF;
                var context = canvas.getContext('2d');
                var objLoc = pageLoc.objs[name];
                var img = objLoc.elem;
                img.onerror = function (e) {
                    console.error("ERROR - " + objLoc.name + " did not load");
                    console.error(objLoc);
                    console.error(e);
                    nextBuffer(bufNum);
                }
                img.src = objLoc.src;
                img.onload = function () {
                    if (objLoc.initVis == "show") {
                        context.drawImage(this, objLoc.left, objLoc.top, objLoc.width, objLoc.height);
                    }
                    nextBuffer(bufNum);
                }
            }
        } else if (type == "audio") {
            if (!document.getElementById(name)) {
                book[location].auds[name].elem = new Audio();
                var aud = book[location].auds[name].elem;
                // NOTE change to detect audio support (userAgent spoofing)
                if (isFirefox) {
                    aud.src = "audio/" + name + ".ogg";
                } else {
                    aud.src = "audio/" + name + ".mp3";
                }
                aud.id = name;
                aud.errorNum = 0;
                document.getElementById("audioDiv").appendChild(aud);
                if (isPad || isFirefox) {
                    nextBuffer(bufNum);
                } else {
                    aud.addEventListener('canplaythrough', function () {
                        bufArr[location + "load"] += 1 / bufArr[location].length;
                        nextBuffer(bufNum);
                    }, false);
                }
                aud.onerror = function () {
                    if (aud.errorNum == 0) {
                        aud.errorNum++;
                        // maybe local export?
                        aud.src = 'audio/' + name + '.wav';
                    } else {
                        console.error("audio error - cannot find audio " + aud.src);
                        nextBuffer(bufNum);
                    }
                }
            } else {
                book[location].auds[name].elem = document.getElementById(name);
                nextBuffer(bufNum);
            }
        } else if (type == "video") {
            var curObj = book[location].objs[name];
            if (curObj.elem) {
                nextBuffer(bufNum);
            } else {
                if (!curObj.created) {
                    curObj.created = true;
                    if (isFirefox && isMac) {
                        curObj.elem = document.createElement('embed');
                        curObj.elem.type = 'video/mp4';
                    } else {
                        curObj.elem = document.createElement('video');
                    }

                    curObj.elem.height = curObj.height;
                    curObj.elem.width = curObj.width;
                    curObj.elem.src = curObj.src;
                    curObj.elem.id = curObj.name;
                    book[location].DIV.appendChild(curObj.elem);
                    $(curObj.elem).css({'top': curObj.top, 'left': curObj.left, 'height': curObj.height, 'width': curObj.width, 'position': 'absolute','visibility':curObj.vis});
                    curObj.elem.src = curObj.src;
                    nextBuffer(bufNum);
                    curObj.elem.onError = function () {
                        console.error(e);
                        nextBuffer(bufNum);
                    }
                }
            }
        } else if (type == "workspace") {
            nextBuffer(bufNum);
        } else if (type == "highlighter") {
            nextBuffer(bufNum);
        } else if (type == "page") {
            if (firstLoad) {
                firstLoad = false;
                // draw video elements if any
                arrangePages();
                createGoto();
                addUserControl();
            } else if (secondLoad) {
                secondLoad = false;
                try {
                    book[0].CAN.getContext('2d').getImageData(0, 0, 1, 1);
                } catch (e) {
                    if (e.code = 18) {
                        console.warn('drag locations are set to bounding rect for local export');
                        dragDropRect = true;
                    } else {
                        console.error('Pubbly requires HTML5 canvases, please update your browser');
                        console.log(e);
                    }
                }
            }
            buf = pageLoc.BUF;
            canCtx = pageLoc.CAN.getContext('2d');
            canCtx.drawImage(buf, 0, 0);
            bufArr[location + "load"] = true;
            book[location].loaded = true;
            if (book[location].progressgraph) {
                book[location].progressgraph.kill();
                delete book[location].progressgraph;
            }
            pageLoc.redraw();
            nextBuffer(bufNum);
        } else {
            console.error('unknown type ' + type);
            nextBuffer(bufNum);
        }
    }
}
// to recalculate buffer priority, clear all buffers in bufObjArr (bufObjArr[0].clear = true).
// btx.putImageData(img, 0, 0);
//
// This will NOT stop them from buffering their last image/page/audio!
// It will allow them to finished their current task.
//
// ADD A NEW BUFFER with bufObjArr.push(new buffer());
// the new buffer will recalculate priority based on the new information.
//
// Recalculate buffer priorities on every page turn and audiolink click.
function arrangePages() {
    for (var pNum = 0; pNum < book.length; pNum++) {
        var PAGE = book[pNum].DIV;
        var DUP = book[pNum].DUP;
        var rNum = pNum - (curPage - 1);
        var pLeft = 0;
        var pIndex = 0;
        var pWidth = 0;
        var pVis = 'hidden';
        var pDis = 'none';
        if (pDisplay == 'Single') {
            if (rNum < 0) {
                pLeft = -1 * pUnit;
                pIndex = 1;
                pWidth = pUnit;
                pVis = 'visible';
                pDis = 'block';
            } else if (rNum == 0) {
                pLeft = 0;
                pIndex = 1;
                pWidth = pUnit;
                pVis = 'visible';
                pDis = 'block';
            } else if (rNum == 1) {
                pLeft = pUnit;
                pIndex = 1;
                pWidth = pUnit;
                pVis = 'visible';
                pDis = 'block';
            } else {
                pLeft = pUnit;
                pIndex = 1;
                pWidth = pUnit;
                pVis = 'hidden';
                pDis = 'none';
            }
        } else if (pDisplay == 'SingleSpread') {
            if (curPage == 1) {
                switch (rNum) {
                    // on the swing, open as regular, swing right pUnit/2
                    case 0:
                        pLeft = pUnit / 2;
                        pIndex = 4;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case 1:
                        pLeft = pUnit / 2;
                        pIndex = 3;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case 2:
                        pLeft = pUnit / 2;
                        pIndex = 3;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    default:
                        pLeft = pUnit * 2;
                        pIndex = 2;
                        pWidth = 0;
                        break;
                }
            } else if (curPage == bookLength + 1) {
                switch (rNum) {
                    case -3:
                        pLeft = pUnit / 2;
                        pIndex = 3;
                        pWidth = 0;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case -2:
                        pLeft = pUnit / 2;
                        pIndex = 4;
                        pWidth = 0;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case -1:
                        pLeft = pUnit / 2;
                        pIndex = 5;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    default:
                        pLeft = 0;
                        pIndex = 2;
                        pWidth = 0;
                        break;
                }
            } else {
                switch (rNum) {
                    case -3:
                        pLeft = 0;
                        pIndex = 1;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case -2:
                        pLeft = -pUnit;
                        pIndex = 1;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case -1:
                        pLeft = 0;
                        pIndex = 2;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case 0:
                        pLeft = pUnit;
                        pIndex = 4;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case 1:
                        pLeft = pUnit * 2;
                        pIndex = 1;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case 2:
                        pLeft = pUnit;
                        pIndex = 1;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    default:
                        pLeft = 0;
                        pIndex = 1;
                        pWidth = 0;
                        break;
                }
            }
        } else if (pDisplay == 'BlockSpread') {
            if (curPage == 1) {
                // first page
                switch (rNum) {
                    case 0:
                        pLeft = pUnit/2;
                        pIndex = 3;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case 1:
                        pLeft = pUnit*2;
                        pWidth = pUnit*2;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    default:
                        pLeft = pUnit;
                        pWidth = pUnit*2;
                        pVis = 'visible';
                        pDis = 'none';
                        break;
                }
            }   else if (curPage == bookLength && !book.lastPageDouble) {
                switch (rNum) {
                    case -1:
                        pLeft = 0;
                        pIndex = 1;
                        pWidth = pUnit*2;
                        pVis = 'visible';
                        pDis = 'none';
                        break;
                    case 0:
                        pLeft = pUnit/2;
                        pIndex = 2;
                        pWidth = pUnit;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                }
            }   else    {
                switch(rNum) {
                    case -1:
                        pLeft = -pUnit*2;
                        pIndex = 2;
                        if (pNum == 0) {
                            pWidth = pUnit;
                        }       else    {
                            pWidth = pUnit*2;
                        }
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case 0:
                        pLeft = 0;
                        pIndex = 3;
                        pWidth = pUnit*2;
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    case 1:
                        pLeft = pUnit*2;
                        pIndex = 2;
                        if (pNum == bookLength - 1) {
                            pWidth = pUnit;
                        }       else    {
                            pWidth = pUnit*2;
                        }
                        pVis = 'visible';
                        pDis = 'block';
                        break;
                    default:
                        pLeft = 0;
                        pWidth = pUnit*2;
                        pIndex = 1;
                        pVis = 'hidden';
                        pDis = 'none';
                        break;
                }
            }
        }
        $(PAGE).css({"left": pLeft, "z-index": pIndex, "width": pWidth, 'display': pDis});
        if (DUP) {
            $(DUP).css({'display': 'none'});
        }
    }
    visiblePages = [];
    visiblePages.push(book[curPage-1]);
    if (pDisplay == 'SingleSpread' && curPage > 1 && !(isEven(bookLength) && curPage == book.length)) {
        visiblePages.push(book[curPage-2]);
    }
    for (var p = 0; p < visiblePages.length; p++) {
        curP = visiblePages[p];
        if (curP && !curP.loaded && !curP.progressgraph) {
            curP.progressgraph = new spinner(curP.loadCont);
        }
    }
    /*
       var shade = document.getElementById('shade');
       shade.removeEventListener("mouseup", startSprite);
       book.loader = new loader(shade);
       */
}


function createGoto() {
    var gotoAct = document.getElementById('gotoAct');
    var gotoCover = document.getElementById('gotoCover');
    gotoAct.innerHTML = '<option selected value=1>' + (pageNumberingStr[0] || 1) + '</option>';
    gotoCover.innerHTML = (pageNumberingStr[0] || 1);
    if (pDisplay == 'Single') {
        for (var i = 2; i <= book.length; i++) {
            var leftPage = pageNumberingStr[i - 1] || i;
            gotoAct.innerHTML += '<option value=' + i + '>' + leftPage + '</option>';
        }
    } else if (pDisplay == 'SingleSpread') {
        var endOfPageLoop = bookLength;
        var lastItem = false;
        if (isEven(bookLength)) {
            endOfPageLoop--;
            lastItem = bookLength;
        }
        for (var i = 2; i < bookLength; i += 2) {
            var leftPage = pageNumberingStr[i - 1] || i;
            var rightPage = pageNumberingStr[i] || i+1;
            gotoAct.innerHTML += '<option value=' + (i + 1) + '>' + leftPage + ' - ' + rightPage + '</option>';
        }
        if (lastItem) {
            var rightPage = pageNumberingStr[lastItem - 1] || lastItem;
            gotoAct.innerHTML += '<option value=' + (lastItem + 1) + '>' + rightPage + '</option>';
        }
    } else if (pDisplay == 'BlockSpread') {
        for (var i = 2; i < book.length; i++) {
            var rightPageVis = (i*2)-1;
            var leftPageVis = rightPageVis-1;
            var doubleStr = leftPageVis + ' - ' + rightPageVis;
            gotoAct.innerHTML += '<option value=' + i + '>' + (pageNumberingStr[i-1] || doubleStr) + '</option>';
        }
        gotoAct.innerHTML += '<option value=' + bookLength + '>' + (pageNumberingStr[bookLength-1] || (bookLength*2)-2) + '</option>';
    }
}
</script>
		<script>var tapPromptHTML = '' + 
'<div id=prompt-center>' + 
'<div id=prompt-container>' + 
  '<div id=r1 class=circle>' + 
  '</div>' + 
  '<div id=r2 class=circle>' + 
  '</div>' + 
  '<div id=r3 class=circle>' + 
  '</div>' + 
  '<div id=r4 class=circle>' + 
  '</div>' + 
  '<div id=r5 class=circle>' + 
  '</div>' + 
'</div>';
'</div>';
var loginContHTML = '' + 
'<div class="login"><h3>Login</h3><form><p><input type="text" name="firstName" id="readerLoginFirstName" value="" placeholder="First Name"></p><p><input type="text" name="lastName" id="readerLoginLastName" value="" placeholder="Last Name"><p><select name="month" class="birthdateDropdown" id="readerLoginBirthMonth"><option value="na">Month</option><option value="1">January</option><option value="2">February</option><option value="3">March</option><option value="4">April</option><option value="5">May</option><option value="6">June</option><option value="7">July</option><option value="8">August</option><option value="9">September</option><option value="10">October</option><option value="11">November</option><option value="12">December</option></select><select name="day" id="readerLoginBirthDay" class="birthdateDropdown"><option value="na">Day</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="11">11</option><option value="12">12</option><option value="13">13</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option><option value="25">25</option><option value="26">26</option><option value="27">27</option><option value="28">28</option><option value="29">29</option><option value="30">30</option><option value="31">31</option></select></br><select name="year" id="readerLoginBirthYear" class="birthdateDropdown"><option value="na">Year</option><option value="2012">2012</option><option value="2011">2011</option><option value="2010">2010</option><option value="2009">2009</option><option value="2008">2008</option><option value="2007">2007</option><option value="2006">2006</option><option value="2005">2005</option><option value="2004">2004</option><option value="2003">2003</option><option value="2002">2002</option><option value="2001">2001</option><option value="2000">2000</option><option value="1999">1999</option><option value="1998">1998</option><option value="1997">1997</option><option value="1996">1996</option><option value="1995">1995</option><option value="1994">1994</option><option value="1993">1993</option><option value="1992">1992</option><option value="1991">1991</option><option value="1990">1990</option><option value="1989">1989</option><option value="1988">1988</option><option value="1987">1987</option><option value="1986">1986</option><option value="1985">1985</option><option value="1984">1984</option><option value="1983">1983</option><option value="1982">1982</option><option value="1981">1981</option><option value="1980">1980</option><option value="1979">1979</option><option value="1978">1978</option><option value="1977">1977</option><option value="1976">1976</option><option value="1975">1975</option><option value="1974">1974</option><option value="1973">1973</option><option value="1972">1972</option><option value="1971">1971</option><option value="1970">1970</option><option value="1969">1969</option><option value="1968">1968</option><option value="1967">1967</option><option value="1966">1966</option><option value="1965">1965</option><option value="1964">1964</option><option value="1963">1963</option><option value="1962">1962</option><option value="1961">1961</option><option value="1960">1960</option><option value="1959">1959</option><option value="1958">1958</option><option value="1957">1957</option><option value="1956">1956</option><option value="1955">1955</option><option value="1954">1954</option><option value="1953">1953</option><option value="1952">1952</option><option value="1951">1951</option><option value="1950">1950</option><option value="1949">1949</option><option value="1948">1948</option><option value="1947">1947</option><option value="1946">1946</option><option value="1945">1945</option><option value="1944">1944</option><option value="1943">1943</option><option value="1942">1942</option><option value="1941">1941</option><option value="1940">1940</option><option value="1939">1939</option><option value="1938">1938</option><option value="1937">1937</option><option value="1936">1936</option><option value="1935">1935</option><option value="1934">1934</option><option value="1933">1933</option><option value="1932">1932</option><option value="1931">1931</option><option value="1930">1930</option><option value="1929">1929</option><option value="1928">1928</option><option value="1927">1927</option><option value="1926">1926</option><option value="1925">1925</option><option value="1924">1924</option><option value="1923">1923</option><option value="1922">1922</option><option value="1921">1921</option><option value="1920">1920</option><option value="1919">1919</option><option value="1918">1918</option><option value="1917">1917</option><option value="1916">1916</option><option value="1915">1915</option><option value="1914">1914</option><option value="1913">1913</option><option value="1912">1912</option><option value="1911">1911</option><option value="1910">1910</option><option value="1909">1909</option></select></p><p class="remember_me"><label><input type="checkbox" name="remember_me" id="remember_me">Remember me!</label></p><p><input type="button" id="userLoginButton" class="loginCreateButtons" value="Sign In"><input type="button" id="userCreateButton" class="loginCreateButtons" value="Sign Up"><input type="button" id="userLogoutButton" value="Sign Out"></p></form></div><div class="login-help"><b><p id="loginErrorMessage"></p></b></div>';
</script>
		<script>var dependenciesLoc = '../../../bookDependencies/production/R14/';
var dependenciesVer = 14;

</script>
	</head>
	<body class=noSelect>
	</body>
</html>